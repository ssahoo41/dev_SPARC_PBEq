eigenSolver.c:94:    // if(pSPARC->cell_typ != 0 || pSPARC->chefsibound_flag == 0 || pSPARC->chefsibound_flag == 1){
eigenSolver.c:173:    if(pSPARC->spincomm_index < 0) return; 
eigenSolver.c:177:    pSPARC->Ncheb = (pSPARC->elecgs_Count == 0 && SCFcount > 0) ? Ncheb : 1;
eigenSolver.c:185:    log_TOL = log(pSPARC->TOL_SCF);
eigenSolver.c:191:    if(pSPARC->elecgs_Count == 0 && SCFcount == 0 && pSPARC->usefock < 2){
eigenSolver.c:192:        pSPARC->eigmin = (double *) malloc(pSPARC->Nspin_spincomm * sizeof(double));
eigenSolver.c:193:        pSPARC->eigmax = (double *) malloc(pSPARC->Nspin_spincomm * sizeof(double));
eigenSolver.c:196:    if(pSPARC->elecgs_Count > 0 || pSPARC->usefock > 1)
eigenSolver.c:197:        pSPARC->rhoTrigger = 1;
eigenSolver.c:200:    x0 = pSPARC->Lanczos_x0;
eigenSolver.c:203:        pSPARC->npl_max = pSPARC->ChebDegree; 
eigenSolver.c:204:        pSPARC->npl_min = max(pSPARC->ChebDegree / 4, 12);
eigenSolver.c:207:        cellsizes[0] = pSPARC->range_x;
eigenSolver.c:208:        cellsizes[1] = pSPARC->range_y;
eigenSolver.c:209:        cellsizes[2] = pSPARC->range_z;
eigenSolver.c:210:        meshes[0] = pSPARC->delta_x;
eigenSolver.c:211:        meshes[1] = pSPARC->delta_y;
eigenSolver.c:212:        meshes[2] = pSPARC->delta_z;
eigenSolver.c:214:        gridsizes[0] = pSPARC->Nx;
eigenSolver.c:215:        gridsizes[1] = pSPARC->Ny;
eigenSolver.c:216:        gridsizes[2] = pSPARC->Nz;
eigenSolver.c:217:        int RandFlag = (pSPARC->cell_typ != 0 || pSPARC->chefsibound_flag == 0 || 
eigenSolver.c:218:            pSPARC->chefsibound_flag == 1);
eigenSolver.c:220:        init_guess_Lanczos(x0, cellsizes, gridsizes, meshes, pSPARC->DMVertices_kptcomm, 
eigenSolver.c:221:            RandFlag, pSPARC->kptcomm_topo);
eigenSolver.c:228:        count = pSPARC->rhoTrigger;
eigenSolver.c:230:        count = pSPARC->rhoTrigger + (SCFcount-1) * pSPARC->Ncheb;
eigenSolver.c:234:    if (pSPARC->DDBP_Flag == 1) {
eigenSolver.c:235:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolver.c:240:    while(count < pSPARC->rhoTrigger + SCFcount*pSPARC->Ncheb){
eigenSolver.c:245:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolver.c:246:            if (pSPARC->DDBP_Flag == 1) {
eigenSolver.c:253:        if (pSPARC->ext_FPMD_Flag != 0) {
eigenSolver.c:254:            int Nc_e = pSPARC->Nstates - 1; // do these in initialization
eigenSolver.c:257:            pSPARC->ext_FPMD_U0 = U0;
eigenSolver.c:263:        if (pSPARC->CyclixFlag) {
eigenSolver.c:265:            for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolver.c:266:                indx0 = spn_i*pSPARC->Nstates;
eigenSolver.c:267:                for(ns = 0; ns < pSPARC->Nstates; ns++){
eigenSolver.c:269:                    pSPARC->lambda_sorted[indx] = pSPARC->lambda[indx];
eigenSolver.c:272:                qsort(pSPARC->lambda_sorted + indx0, pSPARC->Nstates, sizeof(pSPARC->lambda_sorted[0]), cmp);
eigenSolver.c:278:        double eigmin_g = pSPARC->lambda_sorted[0];
eigenSolver.c:279:        double eigmax_g = pSPARC->lambda_sorted[pSPARC->Nstates-1];
eigenSolver.c:280:        for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolver.c:281:            if(pSPARC->lambda_sorted[spn_i*pSPARC->Nstates] < eigmin_g)
eigenSolver.c:282:                eigmin_g = pSPARC->lambda_sorted[spn_i*pSPARC->Nstates];
eigenSolver.c:283:            if(pSPARC->lambda_sorted[(spn_i+1)*pSPARC->Nstates - 1] > eigmax_g)
eigenSolver.c:284:                eigmax_g = pSPARC->lambda_sorted[(spn_i+1)*pSPARC->Nstates - 1];
eigenSolver.c:287:        if (pSPARC->npspin != 1) { // find min/max over processes with the same rank in spincomm
eigenSolver.c:288:            MPI_Allreduce(MPI_IN_PLACE, &eigmin_g, 1, MPI_DOUBLE, MPI_MIN, pSPARC->spin_bridge_comm);
eigenSolver.c:289:            MPI_Allreduce(MPI_IN_PLACE, &eigmax_g, 1, MPI_DOUBLE, MPI_MAX, pSPARC->spin_bridge_comm);
eigenSolver.c:292:        if (pSPARC->SQ3Flag == 1){
eigenSolver.c:293:            if (pSPARC->Dscomm != MPI_COMM_NULL)
eigenSolver.c:294:                pSPARC->Efermi = Calculate_FermiLevel(pSPARC, eigmin_g-1.0, eigmax_g+1.0, 1e-12, 100, occ_constraint_SQ3); 
eigenSolver.c:296:            MPI_Bcast(&pSPARC->Efermi, 1, MPI_DOUBLE, 0, pSPARC->kptcomm);
eigenSolver.c:303:                       rank, pSPARC->Efermi, (t2-t1)*1e3);
eigenSolver.c:307:            pSPARC->Efermi = Calculate_occupation(pSPARC, eigmin_g-1.0, eigmax_g+1.0, 1e-12, 100); 
eigenSolver.c:309:            if (pSPARC->CyclixFlag) {
eigenSolver.c:311:                for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolver.c:312:                    for (ns = 0; ns < pSPARC->Nstates; ns++) {
eigenSolver.c:313:                        pSPARC->occ_sorted[ns+spn_i*pSPARC->Nstates] = smearing_function(pSPARC->Beta, pSPARC->lambda_sorted[ns+spn_i*pSPARC->Nstates], pSPARC->Efermi, pSPARC->elec_T_type);
eigenSolver.c:318:            // for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolver.c:320:            //     int ind = round(pSPARC->Nstates * 0.90) - 1;
eigenSolver.c:322:            //     double g_ind = pSPARC->occ_sorted[spn_i*pSPARC->Nstates + ind];
eigenSolver.c:323:            //     if (fabs((3.0-pSPARC->Nspin) * g_ind) > 1e-6) {
eigenSolver.c:327:            //                    (3.0-pSPARC->Nspin) * g_ind);
eigenSolver.c:337:                       rank, pSPARC->Efermi, (t2-t1)*1e3);
eigenSolver.c:344:    if (pSPARC->DDBP_Flag == 1) {
eigenSolver.c:346:        DDBP_INFO *DDBP_info = pSPARC->DDBP_info;
eigenSolver.c:347:        int nkpt = pSPARC->Nkpts_kptcomm;
eigenSolver.c:349:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolver.c:364:    if (pSPARC->CheFSI_Optmz) {
eigenSolver.c:367:            pSPARC->ChebDegree = pSPARC->npl_max;
eigenSolver.c:374:                       pSPARC->npl_max, pSPARC->ChebDegree);
eigenSolver.c:377:            pSPARC->ChebDegree = pSPARC->npl_min + (int)((pSPARC->npl_max - pSPARC->npl_min)/(log_err0 - log_TOL) * (log(error) - log_TOL));
eigenSolver.c:378:            pSPARC->ChebDegree = min(pSPARC->npl_max, pSPARC->ChebDegree);
eigenSolver.c:379:            pSPARC->ChebDegree = max(pSPARC->npl_min, pSPARC->ChebDegree);
eigenSolver.c:384:                             pSPARC->npl_max, pSPARC->ChebDegree);
eigenSolver.c:398:    MPI_Comm_rank(pSPARC->spincomm, &rank_spincomm);
eigenSolver.c:399:    MPI_Comm_size(pSPARC->kptcomm, &nproc_kptcomm);
eigenSolver.c:402:    Chebyshevfilter_constants(pSPARC, x0, &lambda_cutoff, &pSPARC->eigmin[spn_i], &pSPARC->eigmax[spn_i], count, k, spn_i);
eigenSolver.c:408:               count+1, lambda_cutoff, pSPARC->eigmin[spn_i], pSPARC->eigmax[spn_i]);
eigenSolver.c:419:        if (pSPARC->cell_typ != 0) CheFSI_use_EVA = 0;
eigenSolver.c:426:    size_s = pSPARC->Nd_d_dmcomm * pSPARC->Nband_bandcomm;
eigenSolver.c:434:            pSPARC, pSPARC->DMVertices_dmcomm, pSPARC->Nband_bandcomm, 
eigenSolver.c:435:            pSPARC->ChebDegree, lambda_cutoff, pSPARC->eigmax[spn_i], pSPARC->eigmin[spn_i],
eigenSolver.c:436:            pSPARC->dmcomm, pSPARC->Xorb + spn_i*size_s, pSPARC->Yorb + spn_i*size_s
eigenSolver.c:440:        ChebyshevFiltering(pSPARC, pSPARC->DMVertices_dmcomm, pSPARC->Xorb + spn_i*size_s, 
eigenSolver.c:441:                           pSPARC->Yorb + spn_i*size_s, pSPARC->Nband_bandcomm, 
eigenSolver.c:442:                           pSPARC->ChebDegree, lambda_cutoff, pSPARC->eigmax[spn_i], pSPARC->eigmin[spn_i], k, spn_i, 
eigenSolver.c:443:                           pSPARC->dmcomm, &t_temp);
eigenSolver.c:451:                pSPARC->Nband_bandcomm, pSPARC->ChebDegree, (t2-t1)*1e3);
eigenSolver.c:457:    if (pSPARC->SQ3Flag == 1 || pSPARC->StandardEigenFlag == 1) {
eigenSolver.c:459:            pSPARC, pSPARC->DMVertices_dmcomm, pSPARC->Yorb + spn_i*size_s, 
eigenSolver.c:464:            pSPARC, pSPARC->DMVertices_dmcomm, pSPARC->Yorb + spn_i*size_s, 
eigenSolver.c:465:            pSPARC->Hp, pSPARC->Mp, spn_i
eigenSolver.c:469:    Project_Hamiltonian(pSPARC, pSPARC->DMVertices_dmcomm, pSPARC->Yorb + spn_i*size_s, 
eigenSolver.c:470:                        pSPARC->Hp, pSPARC->Mp, k, spn_i, pSPARC->dmcomm);
eigenSolver.c:478:    if (pSPARC->SQ3Flag == 1) {
eigenSolver.c:481:    } else if (pSPARC->CS_Flag == 1) {
eigenSolver.c:486:            // Solve_partial_standard_EigenProblem(pSPARC, pSPARC->CS_Nt, k, spn_i);
eigenSolver.c:488:            repeat_chefsi = pSPARC->CS_ncheb;
eigenSolver.c:490:                pSPARC, lambda_cutoff, pSPARC->CS_Nt, repeat_chefsi, k, count, spn_i); 
eigenSolver.c:492:            repeat_chefsi = pSPARC->CS_ncheb;
eigenSolver.c:494:                pSPARC, lambda_cutoff, pSPARC->CS_Nt, repeat_chefsi, k, count, spn_i);
eigenSolver.c:510:    if (pSPARC->useACCEL == 1 && nproc_kptcomm > 1) 
eigenSolver.c:511:	    MPI_Bcast(pSPARC->lambda, pSPARC->Nstates * pSPARC->Nspin_spincomm, MPI_DOUBLE, 0, pSPARC->kptcomm); 
eigenSolver.c:513:    if (pSPARC->useLAPACK == 1 && nproc_kptcomm > 1) {
eigenSolver.c:514:        MPI_Bcast(pSPARC->lambda, pSPARC->Nstates * pSPARC->Nspin_spincomm, 
eigenSolver.c:515:                  MPI_DOUBLE, 0, pSPARC->kptcomm); // TODO: bcast in blacscomm if possible
eigenSolver.c:525:               pSPARC->lambda[0],
eigenSolver.c:526:               pSPARC->lambda[pSPARC->Nstates-1]);
eigenSolver.c:527:        int neig_print = min(20,pSPARC->Nstates - pSPARC->Nelectron/2 + 10);
eigenSolver.c:528:        neig_print = min(neig_print, pSPARC->Nstates);
eigenSolver.c:529:        printf("The last %d eigenvalues of kpoints #%d and spin #%d are (Nelectron = %d):\n", neig_print, 1, spn_i, pSPARC->Nelectron);
eigenSolver.c:533:                    pSPARC->Nstates - neig_print + i + 1, 
eigenSolver.c:534:                    pSPARC->lambda[pSPARC->Nstates - neig_print + i]);
eigenSolver.c:544:    if (pSPARC->CS_Flag == 0) {
eigenSolver.c:546:        DP_Subspace_Rotation(pSPARC, pSPARC->Xorb + spn_i*size_s);
eigenSolver.c:549:        Subspace_Rotation(pSPARC, pSPARC->Yorb_BLCYC, pSPARC->Q, 
eigenSolver.c:550:                          pSPARC->Xorb_BLCYC, pSPARC->Xorb + spn_i*size_s, k, spn_i);
eigenSolver.c:558:        int Nd_blacscomm = pSPARC->is_domain_uniform ? pSPARC->Nd : pSPARC->Nd_d_dmcomm;
eigenSolver.c:560:        pdgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, pSPARC->Xorb + spn_i*size_s, &ONE, &ONE, pSPARC->desc_orbitals,
eigenSolver.c:561:                  pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, &pSPARC->ictxt_blacs); 
eigenSolver.c:573:        temp_pointer = pSPARC->Xorb;
eigenSolver.c:574:        pSPARC->Xorb = pSPARC->Yorb;
eigenSolver.c:575:        pSPARC->Yorb = temp_pointer;
eigenSolver.c:582:        // DP_Subspace_partial_Rotation(pSPARC, pSPARC->Xorb + spn_i*size_s); // not fully correct
eigenSolver.c:585:        Subspace_partial_Rotation(pSPARC, pSPARC->Yorb_BLCYC, pSPARC->Q, 
eigenSolver.c:586:            pSPARC->Xorb_BLCYC, pSPARC->Yorb + spn_i*size_s, pSPARC->CS_Nt, k, spn_i);
eigenSolver.c:594:    if (pSPARC->CyclixFlag) {
eigenSolver.c:622:    find_mass_matrix(pSPARC, Y, pSPARC->Mp, k, spn_i, comm);
eigenSolver.c:637:    pdpotrf_("U", &pSPARC->Nstates, pSPARC->Mp, &ONE, &ONE, pSPARC->desc_Mp_BLCYC, &info);
eigenSolver.c:647:    pdtrsm_("R", "U", "N", "N", &pSPARC->Nd_d_dmcomm, &pSPARC->Nstates, &alpha, 
eigenSolver.c:648:        pSPARC->Mp, &ONE, &ONE, pSPARC->desc_Mp_BLCYC, pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC);
eigenSolver.c:660:    pdgemr2d_(&pSPARC->Nd_d_dmcomm, &pSPARC->Nstates, pSPARC->Yorb_BLCYC, &ONE, &ONE, 
eigenSolver.c:661:              pSPARC->desc_orb_BLCYC, Y, &ONE, &ONE, 
eigenSolver.c:662:              pSPARC->desc_orbitals, &pSPARC->ictxt_blacs);
eigenSolver.c:682:    if (pSPARC->bandcomm_index < 0 || comm == MPI_COMM_NULL) return;
eigenSolver.c:694:    int Nd_blacscomm = pSPARC->Nd_d_dmcomm;
eigenSolver.c:704:    pdgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, Y, &ONE, &ONE, pSPARC->desc_orbitals,
eigenSolver.c:705:              pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, &pSPARC->ictxt_blacs); 
eigenSolver.c:717:    // pdgemm_("T", "N", &pSPARC->Nstates, &pSPARC->Nstates, &Nd_blacscomm, &alpha, 
eigenSolver.c:718:    //         pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC,
eigenSolver.c:719:    //         pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, &beta, Mp, 
eigenSolver.c:720:    //         &ONE, &ONE, pSPARC->desc_Mp_BLCYC);
eigenSolver.c:721:    int Ns = pSPARC->Nstates;
eigenSolver.c:722:    pdsyrk_("U", "T", &Ns, &Nd_blacscomm, &alpha, pSPARC->Yorb_BLCYC, &ONE, &ONE, 
eigenSolver.c:723:        pSPARC->desc_orb_BLCYC, &beta, Mp, &ONE, &ONE, pSPARC->desc_Mp_BLCYC);
eigenSolver.c:733:    if (nproc_dmcomm > 1 && !pSPARC->is_domain_uniform) {
eigenSolver.c:735:        MPI_Allreduce(MPI_IN_PLACE, Mp, pSPARC->nr_Mp_BLCYC*pSPARC->nc_Mp_BLCYC, 
eigenSolver.c:736:                      MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
eigenSolver.c:767:    if (pSPARC->bandcomm_index < 0 || comm == MPI_COMM_NULL) return;
eigenSolver.c:779:    int Nd_blacscomm = pSPARC->Nd_d_dmcomm;
eigenSolver.c:780:    int sg  = pSPARC->spin_start_indx + spn_i;
eigenSolver.c:791:    int size_s = pSPARC->Nd_d_dmcomm * pSPARC->Nband_bandcomm;
eigenSolver.c:796:            pSPARC, pSPARC->Nd_d_dmcomm, DMVertices, 
eigenSolver.c:797:            pSPARC->Nband_bandcomm, 0.0, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm,
eigenSolver.c:798:            pSPARC->Atom_Influence_nloc, pSPARC->nlocProj,
eigenSolver.c:799:            Y, pSPARC->Xorb + spn_i*size_s, pSPARC->dmcomm
eigenSolver.c:804:            pSPARC, pSPARC->Nd_d_dmcomm, DMVertices, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, pSPARC->Atom_Influence_nloc, 
eigenSolver.c:805:            pSPARC->nlocProj, pSPARC->Nband_bandcomm, 0.0, Y, pSPARC->Xorb + spn_i*size_s, spn_i, pSPARC->dmcomm
eigenSolver.c:817:    HY_BLCYC = (double *)malloc(pSPARC->nr_orb_BLCYC * pSPARC->nc_orb_BLCYC * sizeof(double));
eigenSolver.c:818:    pdgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, pSPARC->Xorb + spn_i*size_s, &ONE, &ONE, 
eigenSolver.c:819:              pSPARC->desc_orbitals, HY_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, 
eigenSolver.c:820:              &pSPARC->ictxt_blacs);
eigenSolver.c:829:    pdgemm_("T", "N", &pSPARC->Nstates, &pSPARC->Nstates, &Nd_blacscomm, &alpha, 
eigenSolver.c:830:            pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, HY_BLCYC, 
eigenSolver.c:831:            &ONE, &ONE, pSPARC->desc_orb_BLCYC, &beta, Hp, &ONE, &ONE, 
eigenSolver.c:832:            pSPARC->desc_Hp_BLCYC);
eigenSolver.c:835:    // int Ns = pSPARC->Nstates;
eigenSolver.c:836:    // pdsyr2k_("U", "T", &Ns, &Nd_blacscomm, &alpha, pSPARC->Yorb_BLCYC, &ONE, &ONE, 
eigenSolver.c:837:    //     pSPARC->desc_orb_BLCYC, HY_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC,
eigenSolver.c:838:    //     &beta, Hp, &ONE, &ONE, pSPARC->desc_Hp_BLCYC);
eigenSolver.c:840:    if (nproc_dmcomm > 1 && !pSPARC->is_domain_uniform) {
eigenSolver.c:842:        MPI_Allreduce(MPI_IN_PLACE, Hp, pSPARC->nr_Hp_BLCYC*pSPARC->nc_Hp_BLCYC, 
eigenSolver.c:843:                      MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
eigenSolver.c:882:    MPI_Comm_rank(pSPARC->spincomm, &rank_spincomm);
eigenSolver.c:883:    MPI_Comm_rank(pSPARC->kptcomm,  &rank_kptcomm);
eigenSolver.c:887:    if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
eigenSolver.c:890:    MPI_Comm_size(pSPARC->dmcomm, &nproc_dmcomm);
eigenSolver.c:898:		if (pSPARC->useACCEL == 1) {
eigenSolver.c:901:		if ((!pSPARC->is_domain_uniform && !pSPARC->bandcomm_index) ||
eigenSolver.c:902:			(pSPARC->is_domain_uniform && !rank_kptcomm)) {
eigenSolver.c:903:			info = DSYEV(LAPACK_COL_MAJOR, 'V', 'U', pSPARC->Nstates,pSPARC->Hp, 
eigenSolver.c:904:						  pSPARC->Nstates, pSPARC->lambda + spn_i*pSPARC->Nstates);
eigenSolver.c:918:		pdgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, pSPARC->Hp, &ONE, &ONE, 
eigenSolver.c:919:				  pSPARC->desc_Hp_BLCYC, pSPARC->Q, &ONE, &ONE, 
eigenSolver.c:920:				  pSPARC->desc_Q_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolver.c:933:        if (pSPARC->useLAPACK == 1) {
eigenSolver.c:936:            if ((!pSPARC->is_domain_uniform && !pSPARC->bandcomm_index) ||
eigenSolver.c:937:                (pSPARC->is_domain_uniform && !rank_kptcomm)) {
eigenSolver.c:938:                info = LAPACKE_dsyevd(LAPACK_COL_MAJOR, 'V', 'U', pSPARC->Nstates,pSPARC->Hp, 
eigenSolver.c:939:                            pSPARC->Nstates, pSPARC->lambda + spn_i*pSPARC->Nstates);
eigenSolver.c:953:            pdgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, pSPARC->Hp, &ONE, &ONE, 
eigenSolver.c:954:                    pSPARC->desc_Hp_BLCYC, pSPARC->Q, &ONE, &ONE, 
eigenSolver.c:955:                    pSPARC->desc_Q_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolver.c:966:            Cblacs_gridinfo(pSPARC->ictxt_blacs_topo, &nprow, &npcol, &myrow, &mycol);
eigenSolver.c:968:            int N = pSPARC->Nstates, ONE = 1, info;
eigenSolver.c:971:            automem_pdsyev_ ( "V", "U", &N, pSPARC->Hp, &ONE, &ONE, pSPARC->desc_Hp_BLCYC, 
eigenSolver.c:972:                    pSPARC->lambda + spn_i*N, pSPARC->Q, &ONE, &ONE, pSPARC->desc_Q_BLCYC, 
eigenSolver.c:1021:    MPI_Comm_rank(pSPARC->spincomm, &rank_spincomm);
eigenSolver.c:1022:    MPI_Comm_rank(pSPARC->kptcomm,  &rank_kptcomm);
eigenSolver.c:1026:    if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
eigenSolver.c:1029:    MPI_Comm_size(pSPARC->dmcomm, &nproc_dmcomm);
eigenSolver.c:1035:    if (pSPARC->useLAPACK == 1) {
eigenSolver.c:1036:        int Ns = pSPARC->Nstates, il = Ns-Nt+1, iu = Ns, m, info = 0;
eigenSolver.c:1041:        if ((!pSPARC->is_domain_uniform && !pSPARC->bandcomm_index) ||
eigenSolver.c:1042:            (pSPARC->is_domain_uniform && !rank_kptcomm)) {
eigenSolver.c:1047:                    pSPARC->Mp[j*Ns+i] = 1.0; // TODO: remove after check
eigenSolver.c:1048:                    // printf("%6.3f ", pSPARC->Mp[j*12+i]);
eigenSolver.c:1055:                tr_Hp_k += pSPARC->Hp[i*Ns+i];
eigenSolver.c:1058:            if (!rank) printf(GRN "spn_i = %d, Nkpts_kptcomm = %d \n" RESET, spn_i, pSPARC->Nkpts_kptcomm);
eigenSolver.c:1059:            pSPARC->tr_Hp_k[spn_i*pSPARC->Nkpts_kptcomm] = tr_Hp_k;
eigenSolver.c:1061:            // info = LAPACKE_dsyevd(LAPACK_COL_MAJOR, 'V', 'U', pSPARC->Nstates,pSPARC->Hp, 
eigenSolver.c:1062:            //               pSPARC->Nstates, pSPARC->lambda + spn_i*pSPARC->Nstates);
eigenSolver.c:1064:            info = LAPACKE_dsyevx(LAPACK_COL_MAJOR, 'V', 'I', 'U', Ns, pSPARC->Hp, Ns, 
eigenSolver.c:1065:                    vl, vu, il, iu, abstol, &m, pSPARC->lambda + spn_i*Ns + il-1, 
eigenSolver.c:1066:                    pSPARC->Mp+(il-1)*Ns, Ns, ifail);
eigenSolver.c:1079:                printf("lambda[%d] = %.15f\n", i, *(pSPARC->lambda+spn_i*Ns+i));
eigenSolver.c:1085:                    printf("%6.3f ", pSPARC->Mp[j*Ns+i]);
eigenSolver.c:1095:        pdgemr2d_(&Ns, &Nt, pSPARC->Mp, &ONE, &il, 
eigenSolver.c:1096:                  pSPARC->desc_Mp_BLCYC, pSPARC->Q, &ONE, &il, 
eigenSolver.c:1097:                  pSPARC->desc_Q_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolver.c:1108:        int Ns = pSPARC->Nstates;
eigenSolver.c:1112:        orfac = pSPARC->eig_paral_orfac;
eigenSolver.c:1113:        N = pSPARC->Nstates;
eigenSolver.c:1121:        tr_Hp_k = pdlatra_(&Ns, pSPARC->Hp, &ONE, &ONE, pSPARC->desc_Hp_BLCYC);
eigenSolver.c:1122:        pSPARC->tr_Hp_k[spn_i*pSPARC->Nkpts_kptcomm] = tr_Hp_k;
eigenSolver.c:1130:        abstol = pdlamch_(&pSPARC->ictxt_blacs_topo, "U");
eigenSolver.c:1131:        ifail = (int *)malloc(pSPARC->Nstates * sizeof(int));
eigenSolver.c:1134:        pdsyevx_subcomm_ ("V", "I", "U", &N, pSPARC->Hp, &ONE, &ONE, 
eigenSolver.c:1135:            pSPARC->desc_Hp_BLCYC, &vl, &vu, &il, &iu, &abstol, 
eigenSolver.c:1136:            &M, &NZ, pSPARC->lambda + spn_i*Ns + il-1, &orfac, 
eigenSolver.c:1137:            pSPARC->Mp, &ONE, &ONE, pSPARC->desc_Q_BLCYC, ifail, &info,
eigenSolver.c:1138:            pSPARC->blacscomm, pSPARC->eig_paral_subdims, pSPARC->eig_paral_blksz);
eigenSolver.c:1150:                    rank, info, ifail[0], pSPARC->eig_paral_subdims[0], pSPARC->eig_paral_subdims[1], (t2 - t1)*1e3);
eigenSolver.c:1157:        pdgemr2d_(&Ns, &Nt, pSPARC->Mp, &ONE, &ONE, 
eigenSolver.c:1158:                  pSPARC->desc_Mp_BLCYC, pSPARC->Q, &ONE, &il, 
eigenSolver.c:1159:                  pSPARC->desc_Q_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolver.c:1207:    gridsizes[0] = pSPARC->Nx; gridsizes[1] = pSPARC->Ny; gridsizes[2] = pSPARC->Nz;
eigenSolver.c:1208:    sdims[0] = pSPARC->npNdx;         
eigenSolver.c:1209:    sdims[1] = pSPARC->npNdy;         
eigenSolver.c:1210:    sdims[2] = pSPARC->npNdz; 
eigenSolver.c:1211:    rdims[0] = pSPARC->npNdx_kptcomm; 
eigenSolver.c:1212:    rdims[1] = pSPARC->npNdy_kptcomm; 
eigenSolver.c:1213:    rdims[2] = pSPARC->npNdz_kptcomm;
eigenSolver.c:1215:    int sg  = pSPARC->spin_start_indx + spn_i;
eigenSolver.c:1221:        if (pSPARC->chefsibound_flag == 0 || pSPARC->chefsibound_flag == 1) { // 0 - default, 1 - always call Lanczos on H
eigenSolver.c:1223:            if (pSPARC->spin_typ == 0 && pSPARC->is_phi_eq_kpt_topo) {
eigenSolver.c:1224:                Lanczos(pSPARC, pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_dmcomm_phi, 
eigenSolver.c:1225:                        pSPARC->Atom_Influence_nloc_kptcomm, pSPARC->nlocProj_kptcomm, 
eigenSolver.c:1226:                        eigmin, eigmax, x0, pSPARC->TOL_LANCZOS, pSPARC->TOL_LANCZOS, 1000, k, spn_i,
eigenSolver.c:1227:                        pSPARC->kptcomm_topo, &pSPARC->req_veff_loc);
eigenSolver.c:1230:                D2D(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo, gridsizes, 
eigenSolver.c:1231:                    pSPARC->DMVertices_dmcomm, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, 
eigenSolver.c:1232:                    pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo, 
eigenSolver.c:1233:                    pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL,
eigenSolver.c:1234:                    sdims, pSPARC->kptcomm_topo, rdims, pSPARC->kptcomm);
eigenSolver.c:1236:                Lanczos(pSPARC, pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo, 
eigenSolver.c:1237:                        pSPARC->Atom_Influence_nloc_kptcomm, pSPARC->nlocProj_kptcomm, 
eigenSolver.c:1238:                        eigmin, eigmax, x0, pSPARC->TOL_LANCZOS, pSPARC->TOL_LANCZOS, 
eigenSolver.c:1239:                        1000, k, spn_i, pSPARC->kptcomm_topo, &pSPARC->req_veff_loc);
eigenSolver.c:1243:            if (pSPARC->cell_typ == 0 && (pSPARC->BC == 2 || pSPARC->BC == 0)) {
eigenSolver.c:1248:                *eigmax = pSPARC->MaxEigVal_mhalfLap; 
eigenSolver.c:1253:                Lanczos_laplacian(pSPARC, pSPARC->DMVertices_kptcomm, &eigmin_lap, &temp,
eigenSolver.c:1254:                                  x0, pSPARC->TOL_LANCZOS, 1e10, 1000, k, spn_i, pSPARC->kptcomm_topo);
eigenSolver.c:1256:                // *eigmax += 10 * pSPARC->TOL_LANCZOS; 
eigenSolver.c:1272:    } else if (count >= pSPARC->rhoTrigger) {
eigenSolver.c:1273:        *eigmin = pSPARC->lambda_sorted[spn_i*pSPARC->Nstates]; // take previous eigmin
eigenSolver.c:1275:        if (pSPARC->chefsibound_flag == 1 || ((count == pSPARC->rhoTrigger) && (strcmpi(pSPARC->XC, "SCAN") == 0))) { // 1 - always call Lanczos on H; the other condition is for SCAN
eigenSolver.c:1279:            if (pSPARC->spin_typ == 0 && pSPARC->is_phi_eq_kpt_topo) {
eigenSolver.c:1280:                Lanczos(pSPARC, pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_dmcomm_phi, 
eigenSolver.c:1281:                        pSPARC->Atom_Influence_nloc_kptcomm, pSPARC->nlocProj_kptcomm, 
eigenSolver.c:1282:                        &temp, eigmax, x0, 1e10, pSPARC->TOL_LANCZOS, 1000, k, spn_i,
eigenSolver.c:1283:                        pSPARC->kptcomm_topo, &pSPARC->req_veff_loc);
eigenSolver.c:1284:                // *eigmax += 10 * pSPARC->TOL_LANCZOS;
eigenSolver.c:1287:                D2D(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, 
eigenSolver.c:1288:                    pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo, pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL,
eigenSolver.c:1289:                    sdims, pSPARC->kptcomm_topo, rdims, pSPARC->kptcomm);
eigenSolver.c:1290:                if (strcmpi(pSPARC->XC, "SCAN") == 0) { // transfer vxcMGGA3 of this spin to kptcomm, it is moved from file mgga/mgga.c to here.
eigenSolver.c:1291:                    // printf("rank %d, joined SCAN Lanczos, pSPARC->countSCF %d\n", rank, pSPARC->countSCF);
eigenSolver.c:1292:                    D2D(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo, gridsizes, 
eigenSolver.c:1293:                    pSPARC->DMVertices_dmcomm, pSPARC->vxcMGGA3_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, // processors in dmcomm does not save vxcMGGA3 of both spins; they just saved which their spincomm needs 
eigenSolver.c:1294:                    pSPARC->DMVertices_kptcomm, pSPARC->vxcMGGA3_loc_kptcomm, 
eigenSolver.c:1295:                    pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL,
eigenSolver.c:1296:                    sdims, pSPARC->kptcomm_topo, rdims, pSPARC->kptcomm);
eigenSolver.c:1298:                Lanczos(pSPARC, pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo, 
eigenSolver.c:1299:                        pSPARC->Atom_Influence_nloc_kptcomm, pSPARC->nlocProj_kptcomm, 
eigenSolver.c:1300:                        &temp, eigmax, x0, 1e10, pSPARC->TOL_LANCZOS, 
eigenSolver.c:1301:                        1000, k, spn_i, pSPARC->kptcomm_topo, &pSPARC->req_veff_loc);
eigenSolver.c:1302:                // *eigmax += 10 * pSPARC->TOL_LANCZOS;
eigenSolver.c:1315:    if (pSPARC->elecgs_Count == 0 && count == 0) {
eigenSolver.c:1318:        //*lambda_cutoff = pSPARC->Efermi + log(1e6-1) / pSPARC->Beta + 0.1;
eigenSolver.c:1319:        *lambda_cutoff = pSPARC->lambda_sorted[(spn_i+1)*pSPARC->Nstates-1] + 0.1;
eigenSolver.c:1334:    if (comm == MPI_COMM_NULL || pSPARC->bandcomm_index < 0) return;
eigenSolver.c:1358:    int sg  = pSPARC->spin_start_indx + spn_i;
eigenSolver.c:1360:        pSPARC, DMnd, DMVertices, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, 
eigenSolver.c:1361:        pSPARC->Atom_Influence_nloc, pSPARC->nlocProj, ncol, -c, X, Y, spn_i, comm
eigenSolver.c:1378:            pSPARC, DMnd, DMVertices, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, 
eigenSolver.c:1379:            pSPARC->Atom_Influence_nloc, pSPARC->nlocProj, ncol, -c, Y, Ynew, spn_i, comm
eigenSolver.c:1416:    int proc_active = (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) ? 0 : 1;
eigenSolver.c:1420:    // Split the kpt_comm for all active processes in pSPARC->kptcomm
eigenSolver.c:1422:    MPI_Comm_rank(pSPARC->kptcomm, &rank_kpt);
eigenSolver.c:1423:    MPI_Comm_split(pSPARC->kptcomm, proc_active, rank_kpt, &DP_CheFSI->kpt_comm);
eigenSolver.c:1428:        pSPARC->DP_CheFSI = NULL;
eigenSolver.c:1437:    MPI_Comm_size(pSPARC->blacscomm, &nproc_row);
eigenSolver.c:1438:    MPI_Comm_rank(pSPARC->blacscomm, &rank_row);
eigenSolver.c:1439:    int Ns_bp = pSPARC->band_end_indx - pSPARC->band_start_indx + 1;
eigenSolver.c:1440:    int Ns_dp = pSPARC->Nstates;
eigenSolver.c:1441:    int Nd_bp = pSPARC->Nd_d_dmcomm;
eigenSolver.c:1447:        &pSPARC->band_start_indx, 1, MPI_INT, Ns_bp_displs, 1, 
eigenSolver.c:1448:        MPI_INT, pSPARC->blacscomm
eigenSolver.c:1450:    Ns_bp_displs[nproc_row] = pSPARC->Nstates;
eigenSolver.c:1482:        &ZERO, &ZERO, &pSPARC->ictxt_blacs_topo, &Ns_dp, &info);
eigenSolver.c:1485:        &ZERO, &ZERO, &pSPARC->ictxt_blacs_topo, &Ns_dp, &info);
eigenSolver.c:1488:        &ZERO, &ZERO, &pSPARC->ictxt_blacs_topo, &Ns_dp, &info);
eigenSolver.c:1523:    pSPARC->DP_CheFSI = (void*) DP_CheFSI;
eigenSolver.c:1538:    DP_CheFSI_t DP_CheFSI = (DP_CheFSI_t) pSPARC->DP_CheFSI;
eigenSolver.c:1547:    int sg = pSPARC->spin_start_indx + spn_i;
eigenSolver.c:1548:    int size_s = pSPARC->Nd_d_dmcomm * pSPARC->Nband_bandcomm;
eigenSolver.c:1549:    double *Veff_loc_sg = pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm;
eigenSolver.c:1550:    double *HY = pSPARC->Xorb + spn_i * size_s;
eigenSolver.c:1553:        pSPARC, pSPARC->Nd_d_dmcomm, DMVertices, 
eigenSolver.c:1554:        Veff_loc_sg, pSPARC->Atom_Influence_nloc, 
eigenSolver.c:1555:        pSPARC->nlocProj, pSPARC->Nband_bandcomm, 
eigenSolver.c:1556:        0.0, Y, HY, spn_i, pSPARC->dmcomm
eigenSolver.c:1569:        pSPARC->blacscomm, DP_CheFSI->nproc_row,
eigenSolver.c:1576:        pSPARC->blacscomm, DP_CheFSI->nproc_row,
eigenSolver.c:1595:	if (pSPARC->useACCEL == 1)
eigenSolver.c:1682:    DP_CheFSI_t DP_CheFSI = (DP_CheFSI_t) pSPARC->DP_CheFSI;
eigenSolver.c:1696:    int sg = pSPARC->spin_start_indx + spn_i;
eigenSolver.c:1697:    int size_s = pSPARC->Nd_d_dmcomm * pSPARC->Nband_bandcomm;
eigenSolver.c:1698:    double *Veff_loc_sg = pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm;
eigenSolver.c:1704:        pSPARC->blacscomm, DP_CheFSI->nproc_row,
eigenSolver.c:1765:        pSPARC->blacscomm, DP_CheFSI->nproc_row,
eigenSolver.c:1769:        sizeof(double), Y_dp, DP_CheFSI->Y_packbuf, pSPARC->Xorb + spn_i*size_s
eigenSolver.c:1781:        pSPARC, pSPARC->Nd_d_dmcomm, DMVertices, 
eigenSolver.c:1782:        Veff_loc_sg, pSPARC->Atom_Influence_nloc, 
eigenSolver.c:1783:        pSPARC->nlocProj, pSPARC->Nband_bandcomm, 
eigenSolver.c:1784:        0.0, pSPARC->Xorb + spn_i*size_s, Y, spn_i, pSPARC->dmcomm
eigenSolver.c:1793:        pSPARC->blacscomm, DP_CheFSI->nproc_row,
eigenSolver.c:1857:    DP_CheFSI_t DP_CheFSI = (DP_CheFSI_t) pSPARC->DP_CheFSI;
eigenSolver.c:1861:	if (pSPARC->useACCEL == 1)
eigenSolver.c:1871:			double *eig_val  = pSPARC->lambda + spn_i * Ns_dp;
eigenSolver.c:1873:			if (pSPARC->StandardEigenFlag == 0)
eigenSolver.c:1885:		if (pSPARC->StandardEigenFlag == 0) {
eigenSolver.c:1896:        if (pSPARC->useLAPACK == 1)
eigenSolver.c:1906:                double *eig_val  = pSPARC->lambda + spn_i * Ns_dp;
eigenSolver.c:1908:                if (pSPARC->StandardEigenFlag == 0)
eigenSolver.c:1920:            if (pSPARC->StandardEigenFlag == 0) {
eigenSolver.c:1929:            if (pSPARC->dmcomm != MPI_COMM_NULL) 
eigenSolver.c:1930:                MPI_Comm_rank(pSPARC->dmcomm, &rank_dmcomm);
eigenSolver.c:1935:                pdgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, DP_CheFSI->Hp_local, &ONE, &ONE, 
eigenSolver.c:1936:                        DP_CheFSI->desc_Hp_local, pSPARC->Hp, &ONE, &ONE, 
eigenSolver.c:1937:                        pSPARC->desc_Hp_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolver.c:1938:                pdgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, DP_CheFSI->Mp_local, &ONE, &ONE, 
eigenSolver.c:1939:                        DP_CheFSI->desc_Mp_local, pSPARC->Mp, &ONE, &ONE, 
eigenSolver.c:1940:                        pSPARC->desc_Mp_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolver.c:1946:                pdgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, pSPARC->Q, &ONE, &ONE, 
eigenSolver.c:1947:                        pSPARC->desc_Q_BLCYC, DP_CheFSI->eig_vecs, &ONE, &ONE, 
eigenSolver.c:1948:                        DP_CheFSI->desc_eig_vecs, &pSPARC->ictxt_blacs_topo);
eigenSolver.c:1953:            if (pSPARC->npNd > 1 && pSPARC->bandcomm_index >= 0 && pSPARC->dmcomm != MPI_COMM_NULL) {
eigenSolver.c:1954:                double *eig_val  = pSPARC->lambda + spn_i * Ns_dp;
eigenSolver.c:1955:                MPI_Bcast(eig_val, Ns_dp, MPI_DOUBLE, 0, pSPARC->dmcomm);
eigenSolver.c:1978:    DP_CheFSI_t DP_CheFSI = (DP_CheFSI_t) pSPARC->DP_CheFSI;
eigenSolver.c:1993:	if (pSPARC->useACCEL == 1)
eigenSolver.c:2017:        pSPARC->blacscomm, DP_CheFSI->nproc_row,
eigenSolver.c:2043:    DP_CheFSI_t DP_CheFSI = (DP_CheFSI_t) pSPARC->DP_CheFSI;
eigenSolver.c:2075:        pSPARC->blacscomm, DP_CheFSI->nproc_row,
eigenSolver.c:2095:    DP_CheFSI_t DP_CheFSI = (DP_CheFSI_t) pSPARC->DP_CheFSI;
eigenSolver.c:2114:    pSPARC->DP_CheFSI = NULL;
eigenSolver.c:2129:    if (pSPARC->bandcomm_index < 0 || comm == MPI_COMM_NULL) return;
eigenSolver.c:2142:    int sg  = pSPARC->spin_start_indx + spn_i;
eigenSolver.c:2143:    Nd_blacscomm = pSPARC->is_domain_uniform ? pSPARC->Nd : pSPARC->Nd_d_dmcomm;
eigenSolver.c:2144:    //my_nproc = pSPARC->npband;
eigenSolver.c:2145:    my_nproc = pSPARC->is_domain_uniform ? (pSPARC->npband*pSPARC->npNd) : pSPARC->npband;;
eigenSolver.c:2146:    gridsizes[0] = pSPARC->Nd_d_dmcomm;
eigenSolver.c:2147:    gridsizes[1] = pSPARC->Nstates;
eigenSolver.c:2165:    pdgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, Y, &ONE, &ONE, pSPARC->desc_orbitals,
eigenSolver.c:2166:              pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, &pSPARC->ictxt_blacs); 
eigenSolver.c:2179:    int Ns = pSPARC->Nstates;
eigenSolver.c:2180:    if (pSPARC->CyclixFlag) {
eigenSolver.c:2181:        pdgemm_("T", "N", &pSPARC->Nstates, &pSPARC->Nstates, &Nd_blacscomm, &alpha, 
eigenSolver.c:2182:                pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC,
eigenSolver.c:2183:                pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, &beta, Mp, 
eigenSolver.c:2184:                &ONE, &ONE, pSPARC->desc_Mp_BLCYC);
eigenSolver.c:2186:        pdsyrk_("U", "T", &Ns, &Nd_blacscomm, &alpha, pSPARC->Yorb_BLCYC, &ONE, &ONE, 
eigenSolver.c:2187:            pSPARC->desc_orb_BLCYC, &beta, Mp, &ONE, &ONE, pSPARC->desc_Mp_BLCYC);
eigenSolver.c:2197:    if (nproc_dmcomm > 1 && !pSPARC->is_domain_uniform) {
eigenSolver.c:2199:        MPI_Allreduce(MPI_IN_PLACE, Mp, pSPARC->nr_Mp_BLCYC*pSPARC->nc_Mp_BLCYC, 
eigenSolver.c:2200:                      MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
eigenSolver.c:2211:    int size_s = pSPARC->Nd_d_dmcomm * pSPARC->Nband_bandcomm;
eigenSolver.c:2212:    if (pSPARC->SQ3Flag == 1 || pSPARC->StandardEigenFlag == 1){
eigenSolver.c:2215:        Chol_orth(pSPARC->Yorb_BLCYC, pSPARC->desc_orb_BLCYC, Mp, pSPARC->desc_Mp_BLCYC, &Nd_blacscomm, &pSPARC->Nstates);
eigenSolver.c:2218:        pdgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, pSPARC->Yorb_BLCYC, &ONE, &ONE, 
eigenSolver.c:2219:              pSPARC->desc_orb_BLCYC, pSPARC->Yorb + spn_i*size_s, &ONE, &ONE, 
eigenSolver.c:2220:              pSPARC->desc_orbitals, &pSPARC->ictxt_blacs);
eigenSolver.c:2238:            pSPARC, pSPARC->Nd_d_dmcomm, DMVertices, 
eigenSolver.c:2239:            pSPARC->Nband_bandcomm, 0.0, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm,
eigenSolver.c:2240:            pSPARC->Atom_Influence_nloc, pSPARC->nlocProj,
eigenSolver.c:2241:            pSPARC->Yorb + spn_i*size_s, pSPARC->Xorb + spn_i*size_s, pSPARC->dmcomm
eigenSolver.c:2246:            pSPARC, pSPARC->Nd_d_dmcomm, DMVertices, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, pSPARC->Atom_Influence_nloc, 
eigenSolver.c:2247:            pSPARC->nlocProj, pSPARC->Nband_bandcomm, 0.0, pSPARC->Yorb + spn_i*size_s, pSPARC->Xorb + spn_i*size_s, spn_i, pSPARC->dmcomm
eigenSolver.c:2259:    HY_BLCYC = (double *)malloc(pSPARC->nr_orb_BLCYC * pSPARC->nc_orb_BLCYC * sizeof(double));
eigenSolver.c:2260:    pdgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, pSPARC->Xorb + spn_i*size_s, &ONE, &ONE, 
eigenSolver.c:2261:              pSPARC->desc_orbitals, HY_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, 
eigenSolver.c:2262:              &pSPARC->ictxt_blacs);
eigenSolver.c:2271:    pdgemm_("T", "N", &pSPARC->Nstates, &pSPARC->Nstates, &Nd_blacscomm, &alpha, 
eigenSolver.c:2272:            pSPARC->Yorb_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, HY_BLCYC, 
eigenSolver.c:2273:            &ONE, &ONE, pSPARC->desc_orb_BLCYC, &beta, Hp, &ONE, &ONE, 
eigenSolver.c:2274:            pSPARC->desc_Hp_BLCYC);
eigenSolver.c:2277:    // pdsyr2k_("U", "T", &Ns, &Nd_blacscomm, &alpha, pSPARC->Yorb_BLCYC, &ONE, &ONE, 
eigenSolver.c:2278:    //     pSPARC->desc_orb_BLCYC, HY_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC,
eigenSolver.c:2279:    //     &beta, Hp, &ONE, &ONE, pSPARC->desc_Hp_BLCYC);
eigenSolver.c:2281:    if (nproc_dmcomm > 1 && !pSPARC->is_domain_uniform) {
eigenSolver.c:2283:        MPI_Allreduce(MPI_IN_PLACE, Hp, pSPARC->nr_Hp_BLCYC*pSPARC->nc_Hp_BLCYC, 
eigenSolver.c:2284:                      MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
eigenSolver.c:2298:    if (pSPARC->SQ3Flag == 1){
eigenSolver.c:2299:        double *temp = pSPARC->Xorb;
eigenSolver.c:2300:        pSPARC->Xorb = pSPARC->Yorb;
eigenSolver.c:2301:        pSPARC->Yorb = temp;
eigenSolver.c:2329:    MPI_Comm_rank(pSPARC->spincomm, &rank_spincomm);
eigenSolver.c:2330:    MPI_Comm_rank(pSPARC->kptcomm,  &rank_kptcomm);
eigenSolver.c:2334:    if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
eigenSolver.c:2337:    MPI_Comm_size(pSPARC->dmcomm, &nproc_dmcomm);
eigenSolver.c:2345:    if (pSPARC->useACCEL == 1) {
eigenSolver.c:2348:		if ((!pSPARC->is_domain_uniform && !pSPARC->bandcomm_index) ||
eigenSolver.c:2349:			(pSPARC->is_domain_uniform && !rank_kptcomm)) {
eigenSolver.c:2350:            if (pSPARC->StandardEigenFlag == 0)
eigenSolver.c:2351:                info = DSYGV(LAPACK_COL_MAJOR,1,'V','U',pSPARC->Nstates,pSPARC->Hp,
eigenSolver.c:2352:                            pSPARC->Nstates,pSPARC->Mp,pSPARC->Nstates,
eigenSolver.c:2353:                            pSPARC->lambda + spn_i*pSPARC->Nstates);
eigenSolver.c:2355:                info = DSYEV(LAPACK_COL_MAJOR,'V','U',pSPARC->Nstates,pSPARC->Hp,
eigenSolver.c:2356:                            pSPARC->Nstates, pSPARC->lambda + spn_i*pSPARC->Nstates);
eigenSolver.c:2360:		if (pSPARC->StandardEigenFlag == 0) {
eigenSolver.c:2376:		pdgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, pSPARC->Hp, &ONE, &ONE, 
eigenSolver.c:2377:				  pSPARC->desc_Hp_BLCYC, pSPARC->Q, &ONE, &ONE, 
eigenSolver.c:2378:				  pSPARC->desc_Q_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolver.c:2391:        if (pSPARC->useLAPACK == 1) {
eigenSolver.c:2394:            if ((!pSPARC->is_domain_uniform && !pSPARC->bandcomm_index) ||
eigenSolver.c:2395:                (pSPARC->is_domain_uniform && !rank_kptcomm)) {
eigenSolver.c:2397:                if (pSPARC->CyclixFlag) {
eigenSolver.c:2398:                    info = LAPACKE_dggev(LAPACK_COL_MAJOR,'N','V',pSPARC->Nstates,pSPARC->Hp,
eigenSolver.c:2399:                            pSPARC->Nstates,pSPARC->Mp,pSPARC->Nstates,
eigenSolver.c:2400:                            pSPARC->lambda_temp1, pSPARC->lambda_temp2, pSPARC->lambda_temp3,
eigenSolver.c:2401:                            pSPARC->vl, pSPARC->Nstates, pSPARC->vr, pSPARC->Nstates);
eigenSolver.c:2403:                    indx0 = spn_i*pSPARC->Nstates;
eigenSolver.c:2404:                    for(n = 0; n < pSPARC->Nstates; n++){
eigenSolver.c:2407:                        printf("%.15f, %.15f, %.15f\n",pSPARC->lambda_temp1[n],pSPARC->lambda_temp2[n],pSPARC->lambda_temp3[n]);
eigenSolver.c:2408:                        assert(fabs(pSPARC->lambda_temp3[n]) > 1e-15);
eigenSolver.c:2410:                        pSPARC->lambda[indx] = pSPARC->lambda_temp1[n]/pSPARC->lambda_temp3[n];
eigenSolver.c:2411:                        for(m = 0; m < pSPARC->Nstates; m++){
eigenSolver.c:2412:                            pSPARC->Hp[n*pSPARC->Nstates+m] = pSPARC->vr[n*pSPARC->Nstates+m];
eigenSolver.c:2416:                    if (pSPARC->StandardEigenFlag == 0)
eigenSolver.c:2417:                        info = LAPACKE_dsygvd(LAPACK_COL_MAJOR,1,'V','U',pSPARC->Nstates,pSPARC->Hp,
eigenSolver.c:2418:                                    pSPARC->Nstates,pSPARC->Mp,pSPARC->Nstates,
eigenSolver.c:2419:                                    pSPARC->lambda + spn_i*pSPARC->Nstates);
eigenSolver.c:2421:                        info = LAPACKE_dsyevd(LAPACK_COL_MAJOR,'V','U',pSPARC->Nstates,pSPARC->Hp,
eigenSolver.c:2422:                                    pSPARC->Nstates, pSPARC->lambda + spn_i*pSPARC->Nstates);
eigenSolver.c:2427:            if (pSPARC->StandardEigenFlag == 0) {
eigenSolver.c:2445:            pdgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, pSPARC->Hp, &ONE, &ONE, 
eigenSolver.c:2446:                    pSPARC->desc_Hp_BLCYC, pSPARC->Q, &ONE, &ONE, 
eigenSolver.c:2447:                    pSPARC->desc_Q_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolver.c:2460:            ifail = (int *)malloc(pSPARC->Nstates * sizeof(int));
eigenSolver.c:2461:            N = pSPARC->Nstates;
eigenSolver.c:2462:            orfac = pSPARC->eig_paral_orfac;
eigenSolver.c:2467:            // abstol = pdlamch_(&pSPARC->ictxt_blacs_topo, "U");
eigenSolver.c:2471:            if (pSPARC->StandardEigenFlag == 0)
eigenSolver.c:2473:                    &ONE, "V", "A", "U", &N, pSPARC->Hp, &ONE, &ONE, 
eigenSolver.c:2474:                    pSPARC->desc_Hp_BLCYC, pSPARC->Mp, &ONE, &ONE, 
eigenSolver.c:2475:                    pSPARC->desc_Mp_BLCYC, &vl, &vu, &il, &iu, &abstol, 
eigenSolver.c:2476:                    &M, &NZ, pSPARC->lambda + spn_i*N, &orfac, pSPARC->Q, 
eigenSolver.c:2477:                    &ONE, &ONE, pSPARC->desc_Q_BLCYC, ifail, &info,
eigenSolver.c:2478:                    pSPARC->blacscomm, pSPARC->eig_paral_subdims, pSPARC->eig_paral_blksz);
eigenSolver.c:2480:                pdsyevx_subcomm_ ("V", "A", "U", &N, pSPARC->Hp, &ONE, &ONE, 
eigenSolver.c:2481:                        pSPARC->desc_Hp_BLCYC, &vl, &vu, &il, &iu, &abstol, 
eigenSolver.c:2482:                        &M, &NZ, pSPARC->lambda + spn_i*N, &orfac, 
eigenSolver.c:2483:                        pSPARC->Q, &ONE, &ONE, pSPARC->desc_Q_BLCYC, ifail, &info,
eigenSolver.c:2484:                        pSPARC->blacscomm, pSPARC->eig_paral_subdims, pSPARC->eig_paral_blksz);
eigenSolver.c:2530:    if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
eigenSolver.c:2540:    Nd_blacscomm = pSPARC->is_domain_uniform ? pSPARC->Nd : pSPARC->Nd_d_dmcomm;
eigenSolver.c:2548:    pdgemm_("N", "N", &Nd_blacscomm, &pSPARC->Nstates, &pSPARC->Nstates, &alpha, 
eigenSolver.c:2549:            Psi, &ONE, &ONE, pSPARC->desc_orb_BLCYC, Q, &ONE, &ONE, 
eigenSolver.c:2550:            pSPARC->desc_Q_BLCYC, &beta, PsiQ, &ONE, &ONE, pSPARC->desc_orb_BLCYC);
eigenSolver.c:2560:    pdgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, PsiQ, &ONE, &ONE, 
eigenSolver.c:2561:              pSPARC->desc_orb_BLCYC, Psi_rot, &ONE, &ONE, 
eigenSolver.c:2562:              pSPARC->desc_orbitals, &pSPARC->ictxt_blacs);
eigenSolver.c:2590:    if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
eigenSolver.c:2600:    Nd_blacscomm = pSPARC->is_domain_uniform ? pSPARC->Nd : pSPARC->Nd_d_dmcomm;
eigenSolver.c:2601:    int Ns = pSPARC->Nstates;
eigenSolver.c:2611:            Psi, &ONE, &ONE, pSPARC->desc_orb_BLCYC, Q, &ONE, &il, 
eigenSolver.c:2612:            pSPARC->desc_Q_BLCYC, &beta, PsiQ, &ONE, &il, pSPARC->desc_orb_BLCYC);
eigenSolver.c:2623:              pSPARC->desc_orb_BLCYC, Psi_rot, &ONE, &il, 
eigenSolver.c:2624:              pSPARC->desc_orbitals, &pSPARC->ictxt_blacs);
eigenSolver.c:2665:        MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm_inter);
eigenSolver.c:2667:        // MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm); 
eigenSolver.c:2830:    if (pSPARC->kptcomm_inter != MPI_COMM_NULL) {
eigenSolver.c:2835:        MPI_Comm_rank(pSPARC->kptcomm, &rank_kptcomm);
eigenSolver.c:2841:            MPI_Bcast(Bbuf, 2, MPI_DOUBLE, MPI_ROOT, pSPARC->kptcomm_inter);
eigenSolver.c:2844:            MPI_Bcast(Bbuf, 2, MPI_DOUBLE, MPI_PROC_NULL, pSPARC->kptcomm_inter);
eigenSolver.c:2846:        // MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm);
eigenSolver.c:2882:        MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm_inter);
eigenSolver.c:2884:        // MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm); 
eigenSolver.c:3032:    if (pSPARC->kptcomm_inter != MPI_COMM_NULL) {
eigenSolver.c:3037:        MPI_Comm_rank(pSPARC->kptcomm, &rank_kptcomm);
eigenSolver.c:3043:            MPI_Bcast(Bbuf, 2, MPI_DOUBLE, MPI_ROOT, pSPARC->kptcomm_inter);
eigenSolver.c:3046:            MPI_Bcast(Bbuf, 2, MPI_DOUBLE, MPI_PROC_NULL, pSPARC->kptcomm_inter);
eigenSolver.c:3048:        // MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm);
eigenSolverKpt.c:71:    if(pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0) return;
eigenSolverKpt.c:74:    pSPARC->Ncheb = (pSPARC->elecgs_Count == 0 && SCFcount > 0) ? Ncheb : 1;
eigenSolverKpt.c:86:    log_TOL = log(pSPARC->TOL_SCF);
eigenSolverKpt.c:92:    if(pSPARC->elecgs_Count == 0 && SCFcount == 0 && pSPARC->usefock < 2){
eigenSolverKpt.c:93:        pSPARC->eigmin = (double *) malloc(pSPARC->Nkpts_kptcomm * pSPARC->Nspin_spincomm * sizeof (double));
eigenSolverKpt.c:94:        pSPARC->eigmax = (double *) malloc(pSPARC->Nkpts_kptcomm * pSPARC->Nspin_spincomm * sizeof (double));
eigenSolverKpt.c:96:    if(pSPARC->elecgs_Count > 0 || pSPARC->usefock > 1) 
eigenSolverKpt.c:97:        pSPARC->rhoTrigger = 1;
eigenSolverKpt.c:100:    x0 = pSPARC->Lanczos_x0_complex;
eigenSolverKpt.c:103:        pSPARC->npl_max = pSPARC->ChebDegree;
eigenSolverKpt.c:104:        pSPARC->npl_min = max(pSPARC->ChebDegree / 4, 12);
eigenSolverKpt.c:107:        if (pSPARC->kptcomm_topo != MPI_COMM_NULL)
eigenSolverKpt.c:108:            SetRandMat_complex(x0, pSPARC->Nd_d_kptcomm*pSPARC->Nspinor, 1, 0.0, 1.0, pSPARC->kptcomm_topo); // TODO: change for FixRandSeed = 1
eigenSolverKpt.c:117:        count = pSPARC->rhoTrigger;
eigenSolverKpt.c:120:        count = pSPARC->rhoTrigger + (SCFcount-1) * pSPARC->Ncheb;
eigenSolverKpt.c:124:    while(count < pSPARC->rhoTrigger + SCFcount*pSPARC->Ncheb){
eigenSolverKpt.c:126:        for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolverKpt.c:128:            for (kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++) {
eigenSolverKpt.c:139:        int Nk = pSPARC->Nkpts_kptcomm;
eigenSolverKpt.c:140:        int Ns = pSPARC->Nstates;
eigenSolverKpt.c:141:        if (pSPARC->CyclixFlag) {
eigenSolverKpt.c:143:            for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolverKpt.c:148:                        pSPARC->lambda_sorted[indx] = pSPARC->lambda[indx];
eigenSolverKpt.c:151:                    qsort(pSPARC->lambda_sorted + indx0, pSPARC->Nstates, sizeof(pSPARC->lambda_sorted[0]), cmp);
eigenSolverKpt.c:157:        //if(pSPARC->kptcomm_index < 0) return;
eigenSolverKpt.c:160:        double eigmin_g = pSPARC->lambda_sorted[0];
eigenSolverKpt.c:161:        double eigmax_g = pSPARC->lambda_sorted[pSPARC->Nstates-1];
eigenSolverKpt.c:163:        for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolverKpt.c:164:            spn_disp = spn_i*pSPARC->Nkpts_kptcomm*pSPARC->Nstates;
eigenSolverKpt.c:165:            for(kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++){
eigenSolverKpt.c:166:                if(pSPARC->lambda_sorted[spn_disp + kpt*pSPARC->Nstates] < eigmin_g)
eigenSolverKpt.c:167:                    eigmin_g = pSPARC->lambda_sorted[spn_disp + kpt*pSPARC->Nstates];
eigenSolverKpt.c:168:                if(pSPARC->lambda_sorted[spn_disp + (kpt+1)*pSPARC->Nstates-1] > eigmax_g)
eigenSolverKpt.c:169:                    eigmax_g = pSPARC->lambda_sorted[spn_disp + (kpt+1)*pSPARC->Nstates-1];
eigenSolverKpt.c:173:        if (pSPARC->npspin != 1) { // find min/max over processes with the same rank in spincomm
eigenSolverKpt.c:174:            MPI_Allreduce(MPI_IN_PLACE, &eigmin_g, 1, MPI_DOUBLE, MPI_MIN, pSPARC->spin_bridge_comm);
eigenSolverKpt.c:175:            MPI_Allreduce(MPI_IN_PLACE, &eigmax_g, 1, MPI_DOUBLE, MPI_MAX, pSPARC->spin_bridge_comm);
eigenSolverKpt.c:178:        if (pSPARC->npkpt != 1) { // find min/max over processes with the same rank in kptcomm to find g
eigenSolverKpt.c:179:            MPI_Allreduce(MPI_IN_PLACE, &eigmin_g, 1, MPI_DOUBLE, MPI_MIN, pSPARC->kpt_bridge_comm);
eigenSolverKpt.c:180:            MPI_Allreduce(MPI_IN_PLACE, &eigmax_g, 1, MPI_DOUBLE, MPI_MAX, pSPARC->kpt_bridge_comm);
eigenSolverKpt.c:183:        pSPARC->Efermi = Calculate_occupation(pSPARC, eigmin_g - 1, eigmax_g + 1, 1e-12, 100); 
eigenSolverKpt.c:185:        if (pSPARC->CyclixFlag) {
eigenSolverKpt.c:187:            for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolverKpt.c:190:                        pSPARC->occ_sorted[ns+spn_i*Nk*Ns+kpt*Ns] = smearing_function(pSPARC->Beta, pSPARC->lambda_sorted[ns+spn_i*Nk*Ns+kpt*Ns], pSPARC->Efermi, pSPARC->elec_T_type);
eigenSolverKpt.c:196:        // for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
eigenSolverKpt.c:197:        //     spn_disp = spn_i*pSPARC->Nkpts_kptcomm*pSPARC->Nstates;
eigenSolverKpt.c:198:        //     for (kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++) {
eigenSolverKpt.c:200:        //         int ind = round(pSPARC->Nstates * 0.90) - 1;
eigenSolverKpt.c:202:        //         double g_ind = pSPARC->occ_sorted[spn_disp + kpt*pSPARC->Nstates + ind];
eigenSolverKpt.c:203:        //         if (fabs((3.0-pSPARC->Nspin) * g_ind) > 1e-6) {
eigenSolverKpt.c:207:        //                        (3.0-pSPARC->Nspin) * g_ind);
eigenSolverKpt.c:209:        //                 output_fp = fopen(pSPARC->OutFilename,"a");
eigenSolverKpt.c:211:        //                     printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
eigenSolverKpt.c:217:        //                        (3.0-pSPARC->Nspin) * g_ind);
eigenSolverKpt.c:229:                   rank, pSPARC->Efermi, (t2-t1)*1e3);
eigenSolverKpt.c:237:    if (pSPARC->CheFSI_Optmz) {
eigenSolverKpt.c:240:            pSPARC->ChebDegree = pSPARC->npl_max;
eigenSolverKpt.c:247:                       pSPARC->npl_max, pSPARC->ChebDegree);
eigenSolverKpt.c:250:            pSPARC->ChebDegree = pSPARC->npl_min + (int)((pSPARC->npl_max - pSPARC->npl_min)/(log_err0 - log_TOL) * (log(error) - log_TOL));
eigenSolverKpt.c:251:            pSPARC->ChebDegree = min(pSPARC->npl_max, pSPARC->ChebDegree);
eigenSolverKpt.c:252:            pSPARC->ChebDegree = max(pSPARC->npl_min, pSPARC->ChebDegree);
eigenSolverKpt.c:257:                             pSPARC->npl_max, pSPARC->ChebDegree);
eigenSolverKpt.c:272:    MPI_Comm_rank(pSPARC->spincomm, &rank_spincomm);
eigenSolverKpt.c:273:    MPI_Comm_size(pSPARC->kptcomm, &nproc_kptcomm);
eigenSolverKpt.c:276:    Chebyshevfilter_constants_kpt(pSPARC, x0, &lambda_cutoff, &pSPARC->eigmin[spn_i*pSPARC->Nkpts_kptcomm + kpt], &pSPARC->eigmax[spn_i*pSPARC->Nkpts_kptcomm + kpt], count, kpt, spn_i);
eigenSolverKpt.c:282:                       count+1, lambda_cutoff, pSPARC->eigmin[spn_i*pSPARC->Nkpts_kptcomm + kpt], pSPARC->eigmax[spn_i*pSPARC->Nkpts_kptcomm + kpt]);
eigenSolverKpt.c:293:        if (pSPARC->cell_typ != 0) CheFSI_use_EVA_Kpt = 0;
eigenSolverKpt.c:302:    DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
eigenSolverKpt.c:303:    size_k = DMnd * pSPARC->Nband_bandcomm;
eigenSolverKpt.c:304:    size_s = size_k * pSPARC->Nkpts_kptcomm;
eigenSolverKpt.c:313:            pSPARC, pSPARC->DMVertices_dmcomm, pSPARC->Nband_bandcomm, 
eigenSolverKpt.c:314:            pSPARC->ChebDegree, lambda_cutoff, pSPARC->eigmax[spn_i*pSPARC->Nkpts_kptcomm + kpt], pSPARC->eigmin[spn_i*pSPARC->Nkpts_kptcomm + kpt],
eigenSolverKpt.c:315:            pSPARC->dmcomm, pSPARC->Xorb_kpt + kpt*size_k + spn_i*size_s, pSPARC->Yorb_kpt + kpt*size_k + spn_i*size_s
eigenSolverKpt.c:320:        ChebyshevFiltering_kpt(pSPARC, pSPARC->DMVertices_dmcomm, pSPARC->Xorb_kpt + kpt*size_k + spn_i*size_s, 
eigenSolverKpt.c:321:                           pSPARC->Yorb_kpt + kpt*size_k + spn_i*size_s, pSPARC->Nband_bandcomm, 
eigenSolverKpt.c:322:                           pSPARC->ChebDegree, lambda_cutoff, pSPARC->eigmax[spn_i*pSPARC->Nkpts_kptcomm + kpt], pSPARC->eigmin[spn_i*pSPARC->Nkpts_kptcomm + kpt], kpt, spn_i,
eigenSolverKpt.c:323:                           pSPARC->dmcomm, &t_temp);
eigenSolverKpt.c:331:                pSPARC->Nband_bandcomm, pSPARC->ChebDegree, (t2-t1)*1e3);
eigenSolverKpt.c:338:        pSPARC, pSPARC->DMVertices_dmcomm, pSPARC->Yorb_kpt + kpt*size_k + spn_i*size_s, 
eigenSolverKpt.c:339:        pSPARC->Hp_kpt, pSPARC->Mp_kpt, spn_i, kpt
eigenSolverKpt.c:342:    Project_Hamiltonian_kpt(pSPARC, pSPARC->DMVertices_dmcomm, pSPARC->Yorb_kpt + kpt*size_k + spn_i*size_s, 
eigenSolverKpt.c:343:                        pSPARC->Hp_kpt, pSPARC->Mp_kpt, kpt, spn_i, pSPARC->dmcomm);
eigenSolverKpt.c:360:    if (pSPARC->useLAPACK == 1 && nproc_kptcomm > 1) {
eigenSolverKpt.c:361:        MPI_Bcast(pSPARC->lambda, pSPARC->Nstates * pSPARC->Nkpts_kptcomm * pSPARC->Nspin_spincomm, 
eigenSolverKpt.c:362:                  MPI_DOUBLE, 0, pSPARC->kptcomm); // TODO: bcast in blacscomm if possible
eigenSolverKpt.c:377:    DP_Subspace_Rotation_kpt(pSPARC, pSPARC->Xorb_kpt + kpt*size_k + spn_i*size_s);
eigenSolverKpt.c:380:    Subspace_Rotation_kpt(pSPARC, pSPARC->Yorb_BLCYC_kpt, pSPARC->Q_kpt, 
eigenSolverKpt.c:381:                      pSPARC->Xorb_BLCYC_kpt, pSPARC->Xorb_kpt + kpt*size_k + spn_i*size_s, kpt, spn_i);
eigenSolverKpt.c:388:    if (pSPARC->CyclixFlag) {
eigenSolverKpt.c:414:    gridsizes[0] = pSPARC->Nx; gridsizes[1] = pSPARC->Ny; gridsizes[2] = pSPARC->Nz;
eigenSolverKpt.c:415:    sdims[0] = pSPARC->npNdx;         
eigenSolverKpt.c:416:    sdims[1] = pSPARC->npNdy;         
eigenSolverKpt.c:417:    sdims[2] = pSPARC->npNdz; 
eigenSolverKpt.c:418:    rdims[0] = pSPARC->npNdx_kptcomm; 
eigenSolverKpt.c:419:    rdims[1] = pSPARC->npNdy_kptcomm; 
eigenSolverKpt.c:420:    rdims[2] = pSPARC->npNdz_kptcomm;
eigenSolverKpt.c:421:    //size_k = pSPARC->Nd_d_dmcomm * pSPARC->Nband_bandcomm;
eigenSolverKpt.c:422:    int sg  = pSPARC->spin_start_indx + spn_i;
eigenSolverKpt.c:428:        if (pSPARC->chefsibound_flag == 0 || pSPARC->chefsibound_flag == 1) { // 0 - default, 1 - always call Lanczos on H
eigenSolverKpt.c:430:            if (pSPARC->Nspinor == 1) {
eigenSolverKpt.c:431:                D2D(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, 
eigenSolverKpt.c:432:                    pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo, pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL,
eigenSolverKpt.c:433:                    sdims, pSPARC->kptcomm_topo, rdims, pSPARC->kptcomm);
eigenSolverKpt.c:435:                for (int i = 0; i < pSPARC->Nspden; i++) {
eigenSolverKpt.c:436:                    D2D(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo, gridsizes, pSPARC->DMVertices_dmcomm, 
eigenSolverKpt.c:437:                        pSPARC->Veff_loc_dmcomm + i * pSPARC->Nd_d_dmcomm, 
eigenSolverKpt.c:438:                        pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo + i * pSPARC->Nd_d_kptcomm, 
eigenSolverKpt.c:439:                        pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL,
eigenSolverKpt.c:440:                        sdims, pSPARC->kptcomm_topo, rdims, pSPARC->kptcomm);
eigenSolverKpt.c:444:            Lanczos_kpt(pSPARC, pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo, 
eigenSolverKpt.c:445:                    pSPARC->Atom_Influence_nloc_kptcomm, pSPARC->nlocProj_kptcomm, 
eigenSolverKpt.c:446:                    eigmin, eigmax, x0, pSPARC->TOL_LANCZOS, pSPARC->TOL_LANCZOS, 
eigenSolverKpt.c:447:                    1000, kpt, spn_i, pSPARC->kptcomm_topo, &pSPARC->req_veff_loc);
eigenSolverKpt.c:452:            Lanczos_laplacian_kpt(pSPARC, pSPARC->DMVertices_kptcomm, &eigmin_lap, &temp,
eigenSolverKpt.c:453:                    x0, pSPARC->TOL_LANCZOS, 1e10, 1000, kpt, spn_i, pSPARC->kptcomm_topo); 
eigenSolverKpt.c:469:    } else if (count >= pSPARC->rhoTrigger) {
eigenSolverKpt.c:470:        *eigmin = pSPARC->lambda_sorted[spn_i*pSPARC->Nstates*pSPARC->Nkpts_kptcomm + kpt*pSPARC->Nstates]; // take previous eigmin
eigenSolverKpt.c:472:        if (pSPARC->chefsibound_flag == 1 || ((count == pSPARC->rhoTrigger) && (strcmpi(pSPARC->XC, "SCAN") == 0))) { // 1 - always call Lanczos on H; the other condition is for SCAN: 
eigenSolverKpt.c:476:            if (pSPARC->Nspinor == 1) {
eigenSolverKpt.c:477:                D2D(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, 
eigenSolverKpt.c:478:                    pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo, pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL,
eigenSolverKpt.c:479:                    sdims, pSPARC->kptcomm_topo, rdims, pSPARC->kptcomm);
eigenSolverKpt.c:481:                for (int i = 0; i < pSPARC->Nspden; i++) {
eigenSolverKpt.c:482:                    D2D(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo, gridsizes, pSPARC->DMVertices_dmcomm, 
eigenSolverKpt.c:483:                        pSPARC->Veff_loc_dmcomm + i * pSPARC->Nd_d_dmcomm, 
eigenSolverKpt.c:484:                        pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo + i * pSPARC->Nd_d_kptcomm, 
eigenSolverKpt.c:485:                        pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL,
eigenSolverKpt.c:486:                        sdims, pSPARC->kptcomm_topo, rdims, pSPARC->kptcomm);
eigenSolverKpt.c:489:            if (strcmpi(pSPARC->XC, "SCAN") == 0) { // transfer vxcMGGA3 of this spin to kptcomm, it is moved from file mgga/mgga.c to here.
eigenSolverKpt.c:490:                // printf("rank %d, joined SCAN Lanczos, pSPARC->countSCF %d\n", rank, pSPARC->countSCF);
eigenSolverKpt.c:491:                D2D(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo, gridsizes, 
eigenSolverKpt.c:492:                pSPARC->DMVertices_dmcomm, pSPARC->vxcMGGA3_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, 
eigenSolverKpt.c:493:                pSPARC->DMVertices_kptcomm, pSPARC->vxcMGGA3_loc_kptcomm, 
eigenSolverKpt.c:494:                pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL,
eigenSolverKpt.c:495:                sdims, pSPARC->kptcomm_topo, rdims, pSPARC->kptcomm);
eigenSolverKpt.c:497:            Lanczos_kpt(pSPARC, pSPARC->DMVertices_kptcomm, pSPARC->Veff_loc_kptcomm_topo, 
eigenSolverKpt.c:498:                    pSPARC->Atom_Influence_nloc_kptcomm, pSPARC->nlocProj_kptcomm, 
eigenSolverKpt.c:499:                    &temp, eigmax, x0, 1e10, pSPARC->TOL_LANCZOS, 
eigenSolverKpt.c:500:                    1000, kpt, spn_i, pSPARC->kptcomm_topo, &pSPARC->req_veff_loc);
eigenSolverKpt.c:512:    if (pSPARC->elecgs_Count == 0 && count == 0) 
eigenSolverKpt.c:515:        //*lambda_cutoff = pSPARC->Efermi + log(1e6-1) / pSPARC->Beta + 0.1;
eigenSolverKpt.c:516:        *lambda_cutoff = pSPARC->lambda_sorted[spn_i*pSPARC->Nstates*pSPARC->Nkpts_kptcomm + (kpt+1)*pSPARC->Nstates-1] + 0.1;
eigenSolverKpt.c:531:    if (comm == MPI_COMM_NULL || pSPARC->bandcomm_index < 0) return;
eigenSolverKpt.c:548:    DMnd *= pSPARC->Nspinor;           
eigenSolverKpt.c:557:    int sg  = pSPARC->spin_start_indx + spn_i;
eigenSolverKpt.c:559:        pSPARC, DMnd, DMVertices, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, 
eigenSolverKpt.c:560:        pSPARC->Atom_Influence_nloc, pSPARC->nlocProj, ncol, -c, X, Y, spn_i, kpt, comm
eigenSolverKpt.c:577:            pSPARC, DMnd, DMVertices, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, 
eigenSolverKpt.c:578:            pSPARC->Atom_Influence_nloc, pSPARC->nlocProj, ncol, -c, Y, Ynew, spn_i, kpt, comm
eigenSolverKpt.c:601:    int nproc_row;                // Number of processes in process row, == comm size of pSPARC->blacscomm
eigenSolverKpt.c:603:    int rank_row;                 // Rank of this process in process row, == rank in pSPARC->blacscomm
eigenSolverKpt.c:606:                                  // == number of local states (bands) in SPARC == pSPARC->{band_end_indx-band_start_indx} + 1
eigenSolverKpt.c:608:                                  // == number of total states (bands) in SPARC == pSPARC->Nstates
eigenSolverKpt.c:609:    int Nd_bp;                    // Number of FD points this process has in the original band parallelization (BP), == pSPARC->Nd_d_dmcomm
eigenSolverKpt.c:616:    int *Ns_bp_displs;            // Size nproc_row+1, the pSPARC->band_start_indx on each process in pSPARC->blacscomm
eigenSolverKpt.c:629:    MPI_Comm kpt_comm;            // MPI communicator that contains all active processes in pSPARC->kptcomm
eigenSolverKpt.c:649:    int proc_active = (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) ? 0 : 1;
eigenSolverKpt.c:653:    // Split the kpt_comm for all active processes in pSPARC->kptcomm
eigenSolverKpt.c:655:    MPI_Comm_rank(pSPARC->kptcomm, &rank_kpt);
eigenSolverKpt.c:656:    MPI_Comm_split(pSPARC->kptcomm, proc_active, rank_kpt, &DP_CheFSI_kpt->kpt_comm);
eigenSolverKpt.c:661:        pSPARC->DP_CheFSI_kpt = NULL;
eigenSolverKpt.c:670:    MPI_Comm_size(pSPARC->blacscomm, &nproc_row);
eigenSolverKpt.c:671:    MPI_Comm_rank(pSPARC->blacscomm, &rank_row);
eigenSolverKpt.c:672:    int Ns_bp = pSPARC->band_end_indx - pSPARC->band_start_indx + 1;
eigenSolverKpt.c:673:    int Ns_dp = pSPARC->Nstates;
eigenSolverKpt.c:674:    int Nd_bp = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
eigenSolverKpt.c:680:        &pSPARC->band_start_indx, 1, MPI_INT, Ns_bp_displs, 1, 
eigenSolverKpt.c:681:        MPI_INT, pSPARC->blacscomm
eigenSolverKpt.c:683:    Ns_bp_displs[nproc_row] = pSPARC->Nstates;
eigenSolverKpt.c:715:        &ZERO, &ZERO, &pSPARC->ictxt_blacs_topo, &Ns_dp, &info);
eigenSolverKpt.c:718:        &ZERO, &ZERO, &pSPARC->ictxt_blacs_topo, &Ns_dp, &info);
eigenSolverKpt.c:721:        &ZERO, &ZERO, &pSPARC->ictxt_blacs_topo, &Ns_dp, &info);
eigenSolverKpt.c:756:    pSPARC->DP_CheFSI_kpt = (void*) DP_CheFSI_kpt;
eigenSolverKpt.c:771:    DP_CheFSI_kpt_t DP_CheFSI_kpt = (DP_CheFSI_kpt_t) pSPARC->DP_CheFSI_kpt;
eigenSolverKpt.c:780:    int sg = pSPARC->spin_start_indx + spn_i;
eigenSolverKpt.c:781:    int DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
eigenSolverKpt.c:782:    int size_k = DMnd * pSPARC->Nband_bandcomm;
eigenSolverKpt.c:783:    int size_s = size_k * pSPARC->Nkpts_kptcomm;
eigenSolverKpt.c:784:    double *Veff_loc_sg = pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm;
eigenSolverKpt.c:785:    double complex *HY = pSPARC->Xorb_kpt + kpt*size_k + spn_i*size_s;
eigenSolverKpt.c:789:        Veff_loc_sg, pSPARC->Atom_Influence_nloc, 
eigenSolverKpt.c:790:        pSPARC->nlocProj, pSPARC->Nband_bandcomm, 
eigenSolverKpt.c:791:        0.0, Y, HY, spn_i, kpt, pSPARC->dmcomm
eigenSolverKpt.c:805:        pSPARC->blacscomm, DP_CheFSI_kpt->nproc_row,
eigenSolverKpt.c:812:        pSPARC->blacscomm, DP_CheFSI_kpt->nproc_row,
eigenSolverKpt.c:898:    DP_CheFSI_kpt_t DP_CheFSI_kpt = (DP_CheFSI_kpt_t) pSPARC->DP_CheFSI_kpt;
eigenSolverKpt.c:901:    if (pSPARC->useLAPACK == 1)
eigenSolverKpt.c:911:            double *eig_val = pSPARC->lambda + kpt*pSPARC->Nstates + spn_i*pSPARC->Nkpts_kptcomm*pSPARC->Nstates;
eigenSolverKpt.c:927:        if (pSPARC->dmcomm != MPI_COMM_NULL) 
eigenSolverKpt.c:928:            MPI_Comm_rank(pSPARC->dmcomm, &rank_dmcomm);
eigenSolverKpt.c:933:            pzgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, DP_CheFSI_kpt->Hp_local, &ONE, &ONE, 
eigenSolverKpt.c:934:                      DP_CheFSI_kpt->desc_Hp_local, pSPARC->Hp_kpt, &ONE, &ONE, 
eigenSolverKpt.c:935:                      pSPARC->desc_Hp_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolverKpt.c:936:            pzgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, DP_CheFSI_kpt->Mp_local, &ONE, &ONE, 
eigenSolverKpt.c:937:                      DP_CheFSI_kpt->desc_Mp_local, pSPARC->Mp_kpt, &ONE, &ONE, 
eigenSolverKpt.c:938:                      pSPARC->desc_Mp_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolverKpt.c:944:            pzgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, pSPARC->Q_kpt, &ONE, &ONE, 
eigenSolverKpt.c:945:                      pSPARC->desc_Q_BLCYC, DP_CheFSI_kpt->eig_vecs, &ONE, &ONE, 
eigenSolverKpt.c:946:                      DP_CheFSI_kpt->desc_eig_vecs, &pSPARC->ictxt_blacs_topo);
eigenSolverKpt.c:952:        if (pSPARC->npNd > 1 && pSPARC->bandcomm_index >= 0 && pSPARC->dmcomm != MPI_COMM_NULL) {
eigenSolverKpt.c:953:            double *eig_val = pSPARC->lambda + kpt*Ns_dp + spn_i*pSPARC->Nkpts_kptcomm*Ns_dp;
eigenSolverKpt.c:954:            MPI_Bcast(eig_val, Ns_dp, MPI_DOUBLE, 0, pSPARC->dmcomm);
eigenSolverKpt.c:975:    DP_CheFSI_kpt_t DP_CheFSI_kpt = (DP_CheFSI_kpt_t) pSPARC->DP_CheFSI_kpt;
eigenSolverKpt.c:1000:        pSPARC->blacscomm, DP_CheFSI_kpt->nproc_row,
eigenSolverKpt.c:1020:    DP_CheFSI_kpt_t DP_CheFSI_kpt = (DP_CheFSI_kpt_t) pSPARC->DP_CheFSI_kpt;
eigenSolverKpt.c:1039:    pSPARC->DP_CheFSI_kpt = NULL;
eigenSolverKpt.c:1054:    if (pSPARC->bandcomm_index < 0 || comm == MPI_COMM_NULL) return;
eigenSolverKpt.c:1064:    int sg  = pSPARC->spin_start_indx + spn_i;
eigenSolverKpt.c:1065:    Nd_blacscomm = pSPARC->is_domain_uniform ? pSPARC->Nd : pSPARC->Nd_d_dmcomm;
eigenSolverKpt.c:1066:    Nd_blacscomm *= pSPARC->Nspinor;
eigenSolverKpt.c:1076:    pzgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, Y, &ONE, &ONE, pSPARC->desc_orbitals,
eigenSolverKpt.c:1077:              pSPARC->Yorb_BLCYC_kpt, &ONE, &ONE, pSPARC->desc_orb_BLCYC, &pSPARC->ictxt_blacs); 
eigenSolverKpt.c:1089:    pzgemm_("C", "N", &pSPARC->Nstates, &pSPARC->Nstates, &Nd_blacscomm, &alpha, 
eigenSolverKpt.c:1090:            pSPARC->Yorb_BLCYC_kpt, &ONE, &ONE, pSPARC->desc_orb_BLCYC,
eigenSolverKpt.c:1091:            pSPARC->Yorb_BLCYC_kpt, &ONE, &ONE, pSPARC->desc_orb_BLCYC, &beta, Mp, 
eigenSolverKpt.c:1092:            &ONE, &ONE, pSPARC->desc_Mp_BLCYC);
eigenSolverKpt.c:1100:    if (nproc_dmcomm > 1 && !pSPARC->is_domain_uniform) {
eigenSolverKpt.c:1102:        MPI_Allreduce(MPI_IN_PLACE, Mp, pSPARC->nr_Mp_BLCYC*pSPARC->nc_Mp_BLCYC, 
eigenSolverKpt.c:1103:                      MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
eigenSolverKpt.c:1120:    int DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
eigenSolverKpt.c:1121:    int size_k = DMnd * pSPARC->Nband_bandcomm;
eigenSolverKpt.c:1122:    int size_s = size_k * pSPARC->Nkpts_kptcomm;
eigenSolverKpt.c:1128:            pSPARC, pSPARC->Nd_d_dmcomm, DMVertices, 
eigenSolverKpt.c:1129:            pSPARC->Nband_bandcomm, 0.0, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm,
eigenSolverKpt.c:1130:            pSPARC->Atom_Influence_nloc, pSPARC->nlocProj,
eigenSolverKpt.c:1131:            Y, pSPARC->Xorb_kpt + kpt*size_k + spn_i*size_s, pSPARC->dmcomm
eigenSolverKpt.c:1137:            pSPARC, DMnd, DMVertices, pSPARC->Veff_loc_dmcomm + sg * pSPARC->Nd_d_dmcomm, pSPARC->Atom_Influence_nloc, 
eigenSolverKpt.c:1138:            pSPARC->nlocProj, pSPARC->Nband_bandcomm, 0.0, Y, pSPARC->Xorb_kpt + kpt*size_k + spn_i*size_s, spn_i, kpt, pSPARC->dmcomm
eigenSolverKpt.c:1150:    HY_BLCYC = (double complex *)malloc(pSPARC->nr_orb_BLCYC * pSPARC->nc_orb_BLCYC * sizeof(double complex));
eigenSolverKpt.c:1151:    pzgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, pSPARC->Xorb_kpt + kpt*size_k + spn_i*size_s, &ONE, &ONE, 
eigenSolverKpt.c:1152:              pSPARC->desc_orbitals, HY_BLCYC, &ONE, &ONE, pSPARC->desc_orb_BLCYC, 
eigenSolverKpt.c:1153:              &pSPARC->ictxt_blacs);
eigenSolverKpt.c:1161:    pzgemm_("C", "N", &pSPARC->Nstates, &pSPARC->Nstates, &Nd_blacscomm, &alpha, 
eigenSolverKpt.c:1162:            pSPARC->Yorb_BLCYC_kpt, &ONE, &ONE, pSPARC->desc_orb_BLCYC, HY_BLCYC, 
eigenSolverKpt.c:1163:            &ONE, &ONE, pSPARC->desc_orb_BLCYC, &beta, Hp, &ONE, &ONE, 
eigenSolverKpt.c:1164:            pSPARC->desc_Hp_BLCYC);
eigenSolverKpt.c:1166:    if (nproc_dmcomm > 1 && !pSPARC->is_domain_uniform) {
eigenSolverKpt.c:1168:        MPI_Allreduce(MPI_IN_PLACE, Hp, pSPARC->nr_Hp_BLCYC*pSPARC->nc_Hp_BLCYC, 
eigenSolverKpt.c:1169:                      MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
eigenSolverKpt.c:1197:    MPI_Comm_rank(pSPARC->spincomm, &rank_spincomm);
eigenSolverKpt.c:1198:    MPI_Comm_rank(pSPARC->kptcomm, &rank_kptcomm);
eigenSolverKpt.c:1203:    if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
eigenSolverKpt.c:1206:    MPI_Comm_size(pSPARC->dmcomm, &nproc_dmcomm);
eigenSolverKpt.c:1210:    if (pSPARC->useLAPACK == 1) {
eigenSolverKpt.c:1213:        if ((!pSPARC->is_domain_uniform && !pSPARC->bandcomm_index) ||
eigenSolverKpt.c:1214:            (pSPARC->is_domain_uniform && !rank_kptcomm)) {
eigenSolverKpt.c:1215:            if (pSPARC->CyclixFlag) {
eigenSolverKpt.c:1216:                info = LAPACKE_zggev(LAPACK_COL_MAJOR,'N','V',pSPARC->Nstates,pSPARC->Hp_kpt,
eigenSolverKpt.c:1217:                            pSPARC->Nstates,pSPARC->Mp_kpt,pSPARC->Nstates,
eigenSolverKpt.c:1218:                            pSPARC->lambda_temp1_kpt, pSPARC->lambda_temp2_kpt,
eigenSolverKpt.c:1219:                            pSPARC->vl_kpt, pSPARC->Nstates, pSPARC->vr_kpt, pSPARC->Nstates);
eigenSolverKpt.c:1221:                indx0 = spn_i*pSPARC->Nkpts_kptcomm*pSPARC->Nstates + kpt*pSPARC->Nstates;
eigenSolverKpt.c:1222:                for(n = 0; n < pSPARC->Nstates; n++){
eigenSolverKpt.c:1225:                    assert(fabs(creal(pSPARC->lambda_temp2_kpt[n])) > 1e-15);
eigenSolverKpt.c:1227:                    pSPARC->lambda[indx] = creal(pSPARC->lambda_temp1_kpt[n])/creal(pSPARC->lambda_temp2_kpt[n]);
eigenSolverKpt.c:1228:                    //if(pSPARC->bandcomm_index == 0)
eigenSolverKpt.c:1229:                    //    printf("eigenvalues %.15f\n",pSPARC->lambda[indx]);
eigenSolverKpt.c:1230:                    for(m = 0; m < pSPARC->Nstates; m++){
eigenSolverKpt.c:1231:                        pSPARC->Hp_kpt[n*pSPARC->Nstates+m] = pSPARC->vr_kpt[n*pSPARC->Nstates+m];
eigenSolverKpt.c:1235:                info = LAPACKE_zhegvd(LAPACK_COL_MAJOR,1,'V','U',pSPARC->Nstates,pSPARC->Hp_kpt,
eigenSolverKpt.c:1236:                            pSPARC->Nstates,pSPARC->Mp_kpt,pSPARC->Nstates,
eigenSolverKpt.c:1237:                            pSPARC->lambda + kpt*pSPARC->Nstates + spn_i*pSPARC->Nkpts_kptcomm*pSPARC->Nstates);
eigenSolverKpt.c:1252:        pzgemr2d_(&pSPARC->Nstates, &pSPARC->Nstates, pSPARC->Hp_kpt, &ONE, &ONE, 
eigenSolverKpt.c:1253:                  pSPARC->desc_Hp_BLCYC, pSPARC->Q_kpt, &ONE, &ONE, 
eigenSolverKpt.c:1254:                  pSPARC->desc_Q_BLCYC, &pSPARC->ictxt_blacs_topo);
eigenSolverKpt.c:1268:        ifail = (int *)malloc(pSPARC->Nstates * sizeof(int));
eigenSolverKpt.c:1269:        N = pSPARC->Nstates;
eigenSolverKpt.c:1270:        orfac = pSPARC->eig_paral_orfac;
eigenSolverKpt.c:1275:        abstol = pdlamch_(&pSPARC->ictxt_blacs_topo, "U");
eigenSolverKpt.c:1278:                &ONE, "V", "A", "U", &N, pSPARC->Hp_kpt, &ONE, 
eigenSolverKpt.c:1279:                &ONE, pSPARC->desc_Hp_BLCYC, pSPARC->Mp_kpt, &ONE, &ONE, 
eigenSolverKpt.c:1280:                pSPARC->desc_Mp_BLCYC, &vl, &vu, &il, &iu, &abstol, &M, 
eigenSolverKpt.c:1281:                &NZ, pSPARC->lambda + kpt*N + spn_i*pSPARC->Nkpts_kptcomm*N, &orfac, 
eigenSolverKpt.c:1282:                pSPARC->Q_kpt, &ONE, &ONE, pSPARC->desc_Q_BLCYC, ifail, &info,
eigenSolverKpt.c:1283:                pSPARC->blacscomm, pSPARC->eig_paral_subdims, pSPARC->eig_paral_blksz);
eigenSolverKpt.c:1321:    if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
eigenSolverKpt.c:1327:    Nd_blacscomm = pSPARC->is_domain_uniform ? pSPARC->Nd : pSPARC->Nd_d_dmcomm;
eigenSolverKpt.c:1328:    Nd_blacscomm *= pSPARC->Nspinor;
eigenSolverKpt.c:1336:    pzgemm_("N", "N", &Nd_blacscomm, &pSPARC->Nstates, &pSPARC->Nstates, &alpha, 
eigenSolverKpt.c:1337:            Psi, &ONE, &ONE, pSPARC->desc_orb_BLCYC, Q, &ONE, &ONE, 
eigenSolverKpt.c:1338:            pSPARC->desc_Q_BLCYC, &beta, PsiQ, &ONE, &ONE, pSPARC->desc_orb_BLCYC);
eigenSolverKpt.c:1348:    pzgemr2d_(&Nd_blacscomm, &pSPARC->Nstates, PsiQ, &ONE, &ONE, 
eigenSolverKpt.c:1349:              pSPARC->desc_orb_BLCYC, Psi_rot, &ONE, &ONE, 
eigenSolverKpt.c:1350:              pSPARC->desc_orbitals, &pSPARC->ictxt_blacs);
eigenSolverKpt.c:1386:        MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm_inter);
eigenSolverKpt.c:1388:        // MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm); 
eigenSolverKpt.c:1406:    DMnd *= pSPARC->Nspinor;           
eigenSolverKpt.c:1554:    if (pSPARC->kptcomm_inter != MPI_COMM_NULL) {
eigenSolverKpt.c:1559:        MPI_Comm_rank(pSPARC->kptcomm, &rank_kptcomm);
eigenSolverKpt.c:1565:            MPI_Bcast(Bbuf, 2, MPI_DOUBLE, MPI_ROOT, pSPARC->kptcomm_inter);
eigenSolverKpt.c:1568:            MPI_Bcast(Bbuf, 2, MPI_DOUBLE, MPI_PROC_NULL, pSPARC->kptcomm_inter);
eigenSolverKpt.c:1570:        //MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm);
eigenSolverKpt.c:1606:        MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm_inter);
eigenSolverKpt.c:1608:        // MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm); 
eigenSolverKpt.c:1626:    DMnd *= pSPARC->Nspinor;
eigenSolverKpt.c:1758:    if (pSPARC->kptcomm_inter != MPI_COMM_NULL) {
eigenSolverKpt.c:1763:        MPI_Comm_rank(pSPARC->kptcomm, &rank_kptcomm);
eigenSolverKpt.c:1769:            MPI_Bcast(Bbuf, 2, MPI_DOUBLE, MPI_ROOT, pSPARC->kptcomm_inter);
eigenSolverKpt.c:1772:            MPI_Bcast(Bbuf, 2, MPI_DOUBLE, MPI_PROC_NULL, pSPARC->kptcomm_inter);
eigenSolverKpt.c:1774:        // MPI_Bcast(Bbuf, 2, MPI_DOUBLE, 0, pSPARC->kptcomm);
electronDensity.c:37:    double *rho = (double *) calloc(pSPARC->Nd_d_dmcomm * (pSPARC->Nspden/2*2+1), sizeof(double));
electronDensity.c:41:    if (pSPARC->isGammaPoint){
electronDensity.c:43:        if(pSPARC->SQ3Flag == 1){
electronDensity.c:44:            SubDensMat(pSPARC, pSPARC->Ds_cmc, pSPARC->Efermi, pSPARC->ChebComp);
electronDensity.c:46:        if (pSPARC->DDBP_Flag == 1) {
electronDensity.c:47:            DDBP_INFO *DDBP_info = pSPARC->DDBP_info;
electronDensity.c:48:            int Nstates = pSPARC->Nstates;
electronDensity.c:49:            int nspin = pSPARC->Nspin_spincomm;
electronDensity.c:50:            int nkpt = pSPARC->Nkpts_kptcomm;
electronDensity.c:53:                DDBP_info->psi, DDBP_info->rho, pSPARC->occ, pSPARC->dV,
electronDensity.c:54:                pSPARC->isGammaPoint, pSPARC->spin_typ, nspin, nkpt, Nstates,
electronDensity.c:55:                pSPARC->spin_start_indx, DDBP_info->band_start_index,
electronDensity.c:71:                int_rho *= pSPARC->dV;
electronDensity.c:75:                    sum_occ += 2.0*pSPARC->occ[i];
electronDensity.c:80:                if (pSPARC->spin_typ == 0 && rank == 0)
electronDensity.c:84:            if(pSPARC->spin_typ == 0)
electronDensity.c:86:            else if(pSPARC->spin_typ == 1)
electronDensity.c:88:            else if(pSPARC->spin_typ == 2)
electronDensity.c:89:                assert(pSPARC->spin_typ <= 1);
electronDensity.c:93:        if(pSPARC->spin_typ == 0)
electronDensity.c:95:        else if(pSPARC->spin_typ == 1)
electronDensity.c:97:        else if(pSPARC->spin_typ == 2)
electronDensity.c:98:            assert(pSPARC->spin_typ <= 1);
electronDensity.c:102:    if (pSPARC->ext_FPMD_Flag != 0) {
electronDensity.c:103:        highE_rho_extFPMD(pSPARC, 1.0, rho, pSPARC->Nd_d_dmcomm);
electronDensity.c:115:    if (pSPARC->DDBP_Flag == 1) {
electronDensity.c:118:        // for (int i = 0; i < pSPARC->Nd_d; i++) {
electronDensity.c:119:        //     pSPARC->electronDens[i] = -124;
electronDensity.c:122:        for (int i = 0; i < 2*pSPARC->Nspin-1; i++) {
electronDensity.c:124:            DDBP_INFO *DDBP_info = pSPARC->DDBP_info;
electronDensity.c:125:            int Nstates = pSPARC->Nstates;
electronDensity.c:126:            int nspin = pSPARC->Nspin_spincomm;
electronDensity.c:127:            int nkpt = pSPARC->Nkpts_kptcomm;
electronDensity.c:129:            int gridsizes[3] = {pSPARC->Nx, pSPARC->Ny, pSPARC->Nz};
electronDensity.c:130:            int BCs[3] = {pSPARC->BCx, pSPARC->BCy, pSPARC->BCz};
electronDensity.c:131:            int dmcomm_phi_dims[3] = {pSPARC->npNdx_phi, pSPARC->npNdy_phi, pSPARC->npNdz_phi};
electronDensity.c:140:                0, recv_ncol, pSPARC->DMVertices, MPI_COMM_SELF, 1, pSPARC->dmcomm_phi,
electronDensity.c:141:                &dmcomm_phi_dims[0], 0, pSPARC->kptcomm
electronDensity.c:145:            E2D_Wait(&E2D_info, pSPARC->electronDens + i*pSPARC->Nd_d);
electronDensity.c:149:        for (i = 0; i < pSPARC->Nspden/2*2+1; i++)
electronDensity.c:150:            TransferDensity(pSPARC, rho + i*pSPARC->Nd_d_dmcomm, pSPARC->electronDens + i*pSPARC->Nd_d);
electronDensity.c:159:    for (int i = 0; i < pSPARC->Nd_d; i++) {
electronDensity.c:160:        int_rho += pSPARC->electronDens[i];
electronDensity.c:163:    int_rho *= pSPARC->dV;
electronDensity.c:164:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL)
electronDensity.c:165:        MPI_Allreduce(MPI_IN_PLACE, &int_rho, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
electronDensity.c:167:    for (int i = 0; i < pSPARC->Nstates; i++) {
electronDensity.c:168:        sum_occ += 2.0*pSPARC->occ[i];
electronDensity.c:170:    if (pSPARC->ext_FPMD_Flag != 0) {
electronDensity.c:172:	    double HighECharge = calculate_highE_Charge_extFPMD(pSPARC, pSPARC->Efermi);
electronDensity.c:173:        printf("== CHECK_RHO ==: rank = %d, Efermi = %f, HighECharge = %f\n", rank, pSPARC->Efermi, HighECharge);
electronDensity.c:178:    if (pSPARC->spin_typ == 0 && rank == 0)
electronDensity.c:186:    // int length = pSPARC->Nd_d_dmcomm * (pSPARC->Nspden/2*2+1); // new length
electronDensity.c:187:    // // int length = (2*pSPARC->Nspin-1) * pSPARC->Nd_d_dmcomm; // this data can be distributed
electronDensity.c:189:    // memcpy(pSPARC->scfElectronDens, rho, length * sizeof(double));
electronDensity.c:192:    // BroadcastRho(pSPARC, pSPARC->scfElectronDens, rank, length);
electronDensity.c:222:    if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
electronDensity.c:226:    int CS_Flag = pSPARC->CS_Flag;
electronDensity.c:229:        Nt = pSPARC->CS_Nt;
electronDensity.c:230:    int Ns = pSPARC->Nstates;
electronDensity.c:231:    Nd = pSPARC->Nd_d_dmcomm;
electronDensity.c:232:    nstart = pSPARC->band_start_indx;
electronDensity.c:233:    nend = pSPARC->band_end_indx;
electronDensity.c:243:    if (pSPARC->SQ3Flag == 1) {
electronDensity.c:249:            double *psi_n = pSPARC->Xorb + Nd*(n-nstart);
electronDensity.c:256:            g_nk = -2.0 * (1-pSPARC->occ[n]);
electronDensity.c:257:            double *psi_n = pSPARC->Yorb + Nd*(n-nstart);
electronDensity.c:265:            // g_nk = 2.0 * smearing_FermiDirac(pSPARC->Beta,pSPARC->lambda[n],pSPARC->Efermi);
electronDensity.c:266:            g_nk = pSPARC->occfac * pSPARC->occ[n];
electronDensity.c:267:            for (spinor = 0; spinor < pSPARC->Nspinor; spinor ++) {
electronDensity.c:269:                    rho[i] += g_nk * pSPARC->Xorb[count] * pSPARC->Xorb[count];
electronDensity.c:283:    if (pSPARC->npband > 1) {
electronDensity.c:284:        if (pSPARC->bandcomm_index == 0)
electronDensity.c:285:            MPI_Reduce(MPI_IN_PLACE, rho, pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
electronDensity.c:287:            MPI_Reduce(rho, rho, pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
electronDensity.c:296:    if (!pSPARC->CyclixFlag) {
electronDensity.c:298:        double vscal = 1.0 / pSPARC->dV;
electronDensity.c:302:        for (i = 0; i < pSPARC->Nd_d_dmcomm; i++) {
electronDensity.c:323:    if (pSPARC->spincomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
electronDensity.c:327:    Ns = pSPARC->Nstates;
electronDensity.c:328:    Nd = pSPARC->Nd_d_dmcomm;
electronDensity.c:329:    nstart = pSPARC->band_start_indx;
electronDensity.c:330:    nend = pSPARC->band_end_indx;
electronDensity.c:342:    for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
electronDensity.c:343:        sg = spn_i + pSPARC->spin_start_indx;
electronDensity.c:345:            // g_nk = 2.0 * smearing_FermiDirac(pSPARC->Beta,pSPARC->lambda[n],pSPARC->Efermi);
electronDensity.c:346:            g_nk = pSPARC->occfac * pSPARC->occ[n+spn_i*Ns];
electronDensity.c:347:            for (spinor = 0; spinor < pSPARC->Nspinor; spinor++) {
electronDensity.c:349:                    rho[(sg+spinor+1)*Nd + i] += g_nk * pSPARC->Xorb[count] * pSPARC->Xorb[count];
electronDensity.c:362:    if(pSPARC->npspin > 1) {
electronDensity.c:363:        if (pSPARC->spincomm_index == 0)
electronDensity.c:364:            MPI_Reduce(MPI_IN_PLACE, rho, 3*pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
electronDensity.c:366:            MPI_Reduce(rho, rho, 3*pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
electronDensity.c:376:    if (pSPARC->npband > 1 && pSPARC->spincomm_index == 0) {
electronDensity.c:377:        if (pSPARC->bandcomm_index == 0)
electronDensity.c:378:            MPI_Reduce(MPI_IN_PLACE, rho, 3*pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
electronDensity.c:380:            MPI_Reduce(rho, rho, 3*pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
electronDensity.c:389:    if (!pSPARC->CyclixFlag) {
electronDensity.c:391:        double vscal = 1.0 / pSPARC->dV;
electronDensity.c:419:    if (pSPARC->kptcomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
electronDensity.c:423:    Ns = pSPARC->Nstates;
electronDensity.c:424:    nstart = pSPARC->band_start_indx;
electronDensity.c:425:    nend = pSPARC->band_end_indx;
electronDensity.c:426:    occfac = pSPARC->occfac;
electronDensity.c:436:    for (k = 0; k < pSPARC->Nkpts_kptcomm; k++) {
electronDensity.c:438:            g_nk = occfac * (pSPARC->kptWts_loc[k] / pSPARC->Nkpts) * pSPARC->occ[k*Ns+n];
electronDensity.c:439:            for (spinor = 0; spinor < pSPARC->Nspinor; spinor ++) {
electronDensity.c:440:                for (i = 0; i < pSPARC->Nd_d_dmcomm; i++) {
electronDensity.c:441:                    rho[i] += g_nk * (pow(creal(pSPARC->Xorb_kpt[count]), 2.0) 
electronDensity.c:442:                                    + pow(cimag(pSPARC->Xorb_kpt[count]), 2.0));
electronDensity.c:458:    if (pSPARC->npkpt > 1) {    
electronDensity.c:459:        if (pSPARC->kptcomm_index == 0)
electronDensity.c:460:            MPI_Reduce(MPI_IN_PLACE, rho, pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
electronDensity.c:462:            MPI_Reduce(rho, rho, pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
electronDensity.c:473:    if (pSPARC->npband > 1 && pSPARC->kptcomm_index == 0) {
electronDensity.c:474:        if (pSPARC->bandcomm_index == 0)
electronDensity.c:475:            MPI_Reduce(MPI_IN_PLACE, rho, pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
electronDensity.c:477:            MPI_Reduce(rho, rho, pSPARC->Nd_d_dmcomm, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
electronDensity.c:486:    if (!pSPARC->CyclixFlag) {
electronDensity.c:488:        double vscal = 1.0 / pSPARC->dV;
electronDensity.c:492:        for (i = 0; i < pSPARC->Nd_d_dmcomm; i++) {
electronDensity.c:508:    if (pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
electronDensity.c:511:    double g_nk, occfac = pSPARC->occfac;
electronDensity.c:512:    Ns = pSPARC->Nstates;
electronDensity.c:513:    Nd = pSPARC->Nd_d_dmcomm;
electronDensity.c:514:    Nk = pSPARC->Nkpts_kptcomm;
electronDensity.c:515:    nstart = pSPARC->band_start_indx;
electronDensity.c:516:    nend = pSPARC->band_end_indx;
electronDensity.c:526:    for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
electronDensity.c:527:        sg = spn_i + pSPARC->spin_start_indx;
electronDensity.c:530:                g_nk = (pSPARC->kptWts_loc[k] / pSPARC->Nkpts) * occfac * pSPARC->occ[spn_i*Nk*Ns+k*Ns+n];
electronDensity.c:531:                for (spinor = 0; spinor < pSPARC->Nspinor; spinor ++) {
electronDensity.c:532:                    for (i = 0; i < pSPARC->Nd_d_dmcomm; i++) {
electronDensity.c:533:                        rho[i+(sg+spinor+1)*Nd] += g_nk * (pow(creal(pSPARC->Xorb_kpt[count]), 2.0) + pow(cimag(pSPARC->Xorb_kpt[count]), 2.0));
electronDensity.c:548:    if(pSPARC->npspin > 1) {
electronDensity.c:549:        if (pSPARC->spincomm_index == 0)
electronDensity.c:550:            MPI_Reduce(MPI_IN_PLACE, rho, 3*Nd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
electronDensity.c:552:            MPI_Reduce(rho, rho, 3*Nd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
electronDensity.c:562:    if (pSPARC->spincomm_index == 0 &&  pSPARC->npkpt > 1) {    
electronDensity.c:563:        if (pSPARC->kptcomm_index == 0)
electronDensity.c:564:            MPI_Reduce(MPI_IN_PLACE, rho, 3*Nd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
electronDensity.c:566:            MPI_Reduce(rho, rho, 3*Nd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
electronDensity.c:576:    if (pSPARC->npband > 1 && pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0) {
electronDensity.c:577:        if (pSPARC->bandcomm_index == 0)
electronDensity.c:578:            MPI_Reduce(MPI_IN_PLACE, rho, 3*Nd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
electronDensity.c:580:            MPI_Reduce(rho, rho, 3*Nd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
electronDensity.c:589:    if (!pSPARC->CyclixFlag) {
electronDensity.c:591:        double vscal = 1.0 / pSPARC->dV;
electronicGroundState.c:82:        if (pSPARC->MDFlag == 1)
electronicGroundState.c:83:            SCF_ind = pSPARC->MDCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0);
electronicGroundState.c:84:        else if(pSPARC->RelaxFlag >= 1)
electronicGroundState.c:85:            SCF_ind = pSPARC->RelaxCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0);
electronicGroundState.c:88:        if (pSPARC->REFERENCE_CUTOFF > 0.5*nn) {
electronicGroundState.c:90:                        pSPARC->REFERENCE_CUTOFF, 0.5*nn,  SCF_ind);
electronicGroundState.c:92:        if (pSPARC->REFERENCE_CUTOFF < pSPARC->delta_x ||
electronicGroundState.c:93:            pSPARC->REFERENCE_CUTOFF < pSPARC->delta_y ||
electronicGroundState.c:94:            pSPARC->REFERENCE_CUTOFF < pSPARC->delta_z ) {
electronicGroundState.c:96:                        pSPARC->REFERENCE_CUTOFF, pSPARC->delta_x, pSPARC->delta_y, pSPARC->delta_z, SCF_ind );
electronicGroundState.c:100:    if (pSPARC->OFDFTFlag == 1) {
electronicGroundState.c:104:        if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
electronicGroundState.c:105:            memset(pSPARC->mixing_hist_Xk, 0, sizeof(double)* pSPARC->Nd_d * pSPARC->Nspden * pSPARC->MixingHistory);
electronicGroundState.c:106:            memset(pSPARC->mixing_hist_Fk, 0, sizeof(double)* pSPARC->Nd_d * pSPARC->Nspden * pSPARC->MixingHistory);
electronicGroundState.c:110:    if ((pSPARC->mGGAflag == 1) || (pSPARC->vdWDFFlag != 0)) { // initialize the SCF time counter for vdWDF and SCAN
electronicGroundState.c:111:        pSPARC->countSCF = 0;
electronicGroundState.c:117:    if (pSPARC->d3Flag == 1) {
electronicGroundState.c:127:    if (!rank && pSPARC->Verbosity) {
electronicGroundState.c:128:        output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:130:            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:136:        fprintf(output_fp,"Free energy per atom               :%18.10E (Ha/atom)\n", pSPARC->Etot / pSPARC->n_atom);
electronicGroundState.c:137:        fprintf(output_fp,"Total free energy                  :%18.10E (Ha)\n", pSPARC->Etot);
electronicGroundState.c:138:        if (pSPARC->OFDFTFlag == 1) {
electronicGroundState.c:139:            fprintf(output_fp,"Kinetic energy                     :%18.10E (Ha)\n", pSPARC->OFDFT_Ek);
electronicGroundState.c:140:            fprintf(output_fp,"Exchange correlation energy        :%18.10E (Ha)\n", pSPARC->Exc);
electronicGroundState.c:141:            fprintf(output_fp,"Self and correction energy         :%18.10E (Ha)\n", pSPARC->Esc);
electronicGroundState.c:143:            fprintf(output_fp,"Band structure energy              :%18.10E (Ha)\n", pSPARC->Eband);
electronicGroundState.c:144:            fprintf(output_fp,"Exchange correlation energy        :%18.10E (Ha)\n", pSPARC->Exc);
electronicGroundState.c:145:            fprintf(output_fp,"Self and correction energy         :%18.10E (Ha)\n", pSPARC->Esc);
electronicGroundState.c:146:            fprintf(output_fp,"Entropy*kb*T                       :%18.10E (Ha)\n", pSPARC->Entropy);
electronicGroundState.c:147:            fprintf(output_fp,"Fermi level                        :%18.10E (Ha)\n", pSPARC->Efermi);
electronicGroundState.c:149:        if (pSPARC->d3Flag == 1) {
electronicGroundState.c:150:        	fprintf(output_fp,"DFT-D3 correction                  :%18.10E (Ha)\n", pSPARC->d3Energy[0]);
electronicGroundState.c:152:        if (pSPARC->vdWDFFlag != 0) {
electronicGroundState.c:153:            fprintf(output_fp,"vdWDF energy                       :%18.10E (Ha)\n", pSPARC->vdWDFenergy);
electronicGroundState.c:157:        if (pSPARC->MDFlag == 0 && pSPARC->RelaxFlag == 0) {
electronicGroundState.c:158:            if (pSPARC->PrintForceFlag == 1 || pSPARC->PrintAtomPosFlag == 1) {
electronicGroundState.c:159:                static_fp = fopen(pSPARC->StaticFilename,"a");
electronicGroundState.c:161:                    printf("\nCannot open file \"%s\"\n",pSPARC->StaticFilename);
electronicGroundState.c:164:                fprintf(static_fp,"Total free energy (Ha): %.15E\n", pSPARC->Etot);
electronicGroundState.c:173:    if (pSPARC->d3Flag == 1) add_d3_forces(pSPARC);
electronicGroundState.c:177:    if (rank == 0 && pSPARC->Verbosity && pSPARC->PrintForceFlag == 1 && pSPARC->MDFlag == 0 && pSPARC->RelaxFlag == 0) {
electronicGroundState.c:178:        static_fp = fopen(pSPARC->StaticFilename,"a");
electronicGroundState.c:180:            printf("\nCannot open file \"%s\"\n",pSPARC->StaticFilename);
electronicGroundState.c:184:        for (i = 0; i < pSPARC->n_atom; i++) {
electronicGroundState.c:186:                    pSPARC->forces[3*i],pSPARC->forces[3*i+1],pSPARC->forces[3*i+2]);
electronicGroundState.c:191:    if(!rank && pSPARC->Verbosity) {
electronicGroundState.c:192:    	output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:194:            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:198:        for (i = 0; i< pSPARC->n_atom; i++){
electronicGroundState.c:199:        	temp = fabs(sqrt(pow(pSPARC->forces[3*i  ],2.0) 
electronicGroundState.c:200:        	               + pow(pSPARC->forces[3*i+1],2.0) 
electronicGroundState.c:201:        	               + pow(pSPARC->forces[3*i+2],2.0)));
electronicGroundState.c:205:        avgF /= pSPARC->n_atom;
electronicGroundState.c:213:    if(pSPARC->Calc_stress == 1){
electronicGroundState.c:217:        if(!rank && pSPARC->Verbosity) {
electronicGroundState.c:219:            if (pSPARC->MDFlag == 0 && pSPARC->RelaxFlag == 0) {
electronicGroundState.c:220:                static_fp = fopen(pSPARC->StaticFilename,"a");
electronicGroundState.c:222:                    printf("\nCannot open file \"%s\"\n",pSPARC->StaticFilename);
electronicGroundState.c:225:                if(pSPARC->MDFlag == 0 && pSPARC->RelaxFlag == 0){
electronicGroundState.c:227:                    PrintStress (pSPARC, pSPARC->stress, static_fp);
electronicGroundState.c:232:            output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:234:            if (pSPARC->CyclixFlag) {
electronicGroundState.c:235:                maxS = fabs(pSPARC->stress[5]);
electronicGroundState.c:238:                    temp = fabs(pSPARC->stress[i]);
electronicGroundState.c:244:            if (pSPARC->BC == 2){
electronicGroundState.c:245:                fprintf(output_fp,"Pressure                           :%18.10E (GPa)\n",pSPARC->pres*CONST_HA_BOHR3_GPA);
electronicGroundState.c:253:    } else if(pSPARC->Calc_pres == 1){
electronicGroundState.c:257:        if(!rank && pSPARC->Verbosity) {
electronicGroundState.c:258:        	output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:260:                printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:263:            fprintf(output_fp,"Pressure                           :%18.10E (GPa)\n",pSPARC->pres*CONST_HA_BOHR3_GPA);
electronicGroundState.c:269:    if(pSPARC->MDFlag == 1 || pSPARC->RelaxFlag == 1){
electronicGroundState.c:270:		MPI_Bcast(pSPARC->forces, 3*pSPARC->n_atom, MPI_DOUBLE, 0, MPI_COMM_WORLD);
electronicGroundState.c:272:	    if(pSPARC->cell_typ != 0){
electronicGroundState.c:273:	        for(i = 0; i < pSPARC->n_atom; i++)
electronicGroundState.c:274:	            nonCart2Cart_coord(pSPARC, &pSPARC->atom_pos[3*i], &pSPARC->atom_pos[3*i+1], &pSPARC->atom_pos[3*i+2]);	
electronicGroundState.c:279:    if (pSPARC->SQFlag == 1) {
electronicGroundState.c:281:    } else if (pSPARC->OFDFTFlag == 1) {
electronicGroundState.c:285:        if (pSPARC->DDBP_Flag == 1) {
electronicGroundState.c:289:    if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0) {
electronicGroundState.c:295:    if (pSPARC->CalcMCSHFlag == 1){
electronicGroundState.c:296:        if (strcmpi(pSPARC->XC,"GGA_PBE") == 0){
electronicGroundState.c:306:    if (pSPARC->PrintElecDensFlag == 1) {
electronicGroundState.c:318:    if (pSPARC->PrintEigenFlag == 1) {
electronicGroundState.c:329:    if (pSPARC->PrintEnergyDensFlag == 1) {
electronicGroundState.c:332:        compute_Kinetic_Density_Tau(pSPARC, pSPARC->KineticRho);
electronicGroundState.c:384:    if (pSPARC->SQFlag == 1) {
electronicGroundState.c:385:        SQ_OBJ *pSQ = pSPARC->pSQ;
electronicGroundState.c:386:        GetInfluencingAtoms_nloc(pSPARC, &pSPARC->Atom_Influence_nloc_kptcomm, 
electronicGroundState.c:395:        CalculateNonlocalProjectors(pSPARC, &pSPARC->nlocProj_kptcomm, 
electronicGroundState.c:396:                        pSPARC->Atom_Influence_nloc_kptcomm, pSQ->DMVertices_PR, pSQ->dmcomm_SQ);
electronicGroundState.c:404:        GetNonlocalProjectorsForNode(pSPARC, pSPARC->nlocProj_kptcomm, &pSPARC->nlocProj_SQ, 
electronicGroundState.c:405:                        pSPARC->Atom_Influence_nloc_kptcomm, &pSPARC->Atom_Influence_nloc_SQ, pSQ->dmcomm_SQ);
electronicGroundState.c:414:        if(pSPARC->SQ_correction == 1) {
electronicGroundState.c:418:    } else if (pSPARC->OFDFTFlag == 1) {
electronicGroundState.c:423:        GetInfluencingAtoms_nloc(pSPARC, &pSPARC->Atom_Influence_nloc, pSPARC->DMVertices_dmcomm, 
electronicGroundState.c:424:                                pSPARC->bandcomm_index < 0 ? MPI_COMM_NULL : pSPARC->dmcomm);
electronicGroundState.c:433:        if (pSPARC->isGammaPoint)
electronicGroundState.c:434:            CalculateNonlocalProjectors(pSPARC, &pSPARC->nlocProj, pSPARC->Atom_Influence_nloc, 
electronicGroundState.c:435:                                        pSPARC->DMVertices_dmcomm, pSPARC->bandcomm_index < 0 ? MPI_COMM_NULL : pSPARC->dmcomm);
electronicGroundState.c:437:            CalculateNonlocalProjectors_kpt(pSPARC, &pSPARC->nlocProj, pSPARC->Atom_Influence_nloc, 
electronicGroundState.c:438:                                            pSPARC->DMVertices_dmcomm, pSPARC->bandcomm_index < 0 ? MPI_COMM_NULL : pSPARC->dmcomm);	                            
electronicGroundState.c:440:        if (pSPARC->SOC_Flag) {
electronicGroundState.c:441:            CalculateNonlocalProjectors_SOC(pSPARC, pSPARC->nlocProj, pSPARC->Atom_Influence_nloc, 
electronicGroundState.c:442:                                            pSPARC->DMVertices_dmcomm, pSPARC->bandcomm_index < 0 ? MPI_COMM_NULL : pSPARC->dmcomm);
electronicGroundState.c:443:            CreateChiSOMatrix(pSPARC, pSPARC->nlocProj, pSPARC->Atom_Influence_nloc, 
electronicGroundState.c:444:                              pSPARC->bandcomm_index < 0 ? MPI_COMM_NULL : pSPARC->dmcomm);
electronicGroundState.c:454:        GetInfluencingAtoms_nloc(pSPARC, &pSPARC->Atom_Influence_nloc_kptcomm, pSPARC->DMVertices_kptcomm, 
electronicGroundState.c:455:                                pSPARC->kptcomm_index < 0 ? MPI_COMM_NULL : pSPARC->kptcomm_topo);
electronicGroundState.c:464:        if (pSPARC->isGammaPoint)
electronicGroundState.c:465:            CalculateNonlocalProjectors(pSPARC, &pSPARC->nlocProj_kptcomm, pSPARC->Atom_Influence_nloc_kptcomm, 
electronicGroundState.c:466:                                        pSPARC->DMVertices_kptcomm, 
electronicGroundState.c:467:                                        pSPARC->kptcomm_index < 0 ? MPI_COMM_NULL : pSPARC->kptcomm_topo);
electronicGroundState.c:469:            CalculateNonlocalProjectors_kpt(pSPARC, &pSPARC->nlocProj_kptcomm, pSPARC->Atom_Influence_nloc_kptcomm, 
electronicGroundState.c:470:                                            pSPARC->DMVertices_kptcomm, 
electronicGroundState.c:471:                                            pSPARC->kptcomm_index < 0 ? MPI_COMM_NULL : pSPARC->kptcomm_topo);	    
electronicGroundState.c:472:        if (pSPARC->SOC_Flag) {
electronicGroundState.c:473:            CalculateNonlocalProjectors_SOC(pSPARC, pSPARC->nlocProj_kptcomm, pSPARC->Atom_Influence_nloc_kptcomm, 
electronicGroundState.c:474:                                            pSPARC->DMVertices_kptcomm, 
electronicGroundState.c:475:                                            pSPARC->kptcomm_index < 0 ? MPI_COMM_NULL : pSPARC->kptcomm_topo);
electronicGroundState.c:476:            CreateChiSOMatrix(pSPARC, pSPARC->nlocProj_kptcomm, pSPARC->Atom_Influence_nloc_kptcomm, 
electronicGroundState.c:477:                              pSPARC->kptcomm_index < 0 ? MPI_COMM_NULL : pSPARC->kptcomm_topo);
electronicGroundState.c:489:    if (pSPARC->DDBP_Flag == 1) {
electronicGroundState.c:496:    if (pSPARC->OFDFTFlag == 1) {
electronicGroundState.c:517:    // TODO: Remove pSPARC->cell_typ when EVA support non-orthogonal cells
electronicGroundState.c:518:    EVA_buff_init(pSPARC->order, pSPARC->cell_typ);
electronicGroundState.c:525:    if (!rank && pSPARC->Verbosity) {
electronicGroundState.c:526:        output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:528:            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:532:        if(pSPARC->spin_typ == 0)
electronicGroundState.c:536:        if(pSPARC->MDFlag == 1)
electronicGroundState.c:538:                    pSPARC->MDCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0));
electronicGroundState.c:539:        else if(pSPARC->RelaxFlag >= 1)
electronicGroundState.c:541:                    pSPARC->RelaxCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0));
electronicGroundState.c:545:        if(pSPARC->spin_typ == 0)
electronicGroundState.c:549:        if(pSPARC->spin_typ == 0)
electronicGroundState.c:559:    int DMnd = pSPARC->Nd_d;
electronicGroundState.c:560:    int NspdenDMnd = pSPARC->Nspden * DMnd;
electronicGroundState.c:561:    int sindx_rho = (pSPARC->Nspden == 2) ? DMnd : 0;
electronicGroundState.c:563:    int Nk = pSPARC->Nkpts_kptcomm;
electronicGroundState.c:564:    int Ns = pSPARC->Nstates;
electronicGroundState.c:583:    if (pSPARC->MixingVariable == 1)  { // potential mixing
electronicGroundState.c:584:        if (pSPARC->BC == 2 || pSPARC->BC == 0) {
electronicGroundState.c:585:            VectorSum(pSPARC->Veff_loc_dmcomm_phi, NspdenDMnd, &veff_mean, pSPARC->dmcomm_phi);
electronicGroundState.c:586:            veff_mean /= ((double) (pSPARC->Nd * pSPARC->Nspden));
electronicGroundState.c:589:    pSPARC->veff_mean = veff_mean;
electronicGroundState.c:594:    if (pSPARC->SQFlag == 1) {
electronicGroundState.c:595:        TransferVeff_phi2sq(pSPARC, pSPARC->Veff_loc_dmcomm_phi, pSPARC->pSQ->Veff_loc_SQ);
electronicGroundState.c:598:        for (i = 0; i < pSPARC->Nspden; i++)
electronicGroundState.c:599:            Transfer_Veff_loc(pSPARC, pSPARC->Veff_loc_dmcomm_phi + i*DMnd, pSPARC->Veff_loc_dmcomm + i*pSPARC->Nd_d_dmcomm);
electronicGroundState.c:609:    if (pSPARC->usefock <= 1) {
electronicGroundState.c:612:        if (pSPARC->DDBP_Flag == 1) {
electronicGroundState.c:616:            DDBP_INFO *DDBP_info = pSPARC->DDBP_info;
electronicGroundState.c:617:            transfer_orbitals_E2D(pSPARC, DDBP_info->psi, pSPARC->Xorb);
electronicGroundState.c:625:        if (pSPARC->usefock ==1) {
electronicGroundState.c:627:            pSPARC->usefock ++;
electronicGroundState.c:632:        pSPARC->usefock ++;
electronicGroundState.c:644:    int DMnd = pSPARC->Nd_d;
electronicGroundState.c:645:    int NspdenDMnd = pSPARC->Nspden * DMnd;
electronicGroundState.c:646:    int sindx_rho = (pSPARC->Nspden == 2) ? DMnd : 0;
electronicGroundState.c:648:    int Nk = pSPARC->Nkpts_kptcomm;
electronicGroundState.c:649:    int Ns = pSPARC->Nstates;
electronicGroundState.c:657:    error = pSPARC->TOL_SCF + 1.0;
electronicGroundState.c:658:    pSPARC->scf_err = error;
electronicGroundState.c:659:    dEtot = dEband = pSPARC->TOL_SCF + 1.0;
electronicGroundState.c:660:    veff_mean = pSPARC->veff_mean;
electronicGroundState.c:666:    while (SCFcount < pSPARC->MAXIT_SCF) {
electronicGroundState.c:676:        if (pSPARC->scf_err_type == 1) {
electronicGroundState.c:677:            memcpy(pSPARC->phi_dmcomm_phi_in, pSPARC->elecstPotential, DMnd * sizeof(double));
electronicGroundState.c:678:            memcpy(pSPARC->rho_dmcomm_phi_in, pSPARC->electronDens   , DMnd * sizeof(double));
electronicGroundState.c:684:        if (pSPARC->SQFlag == 1)
electronicGroundState.c:690:        if (pSPARC->spin_typ != 0)
electronicGroundState.c:693:        if (pSPARC->MixingVariable == 0) { // density mixing
electronicGroundState.c:695:            dEband = pSPARC->Eband;
electronicGroundState.c:696:            dEtot  = pSPARC->Etot;
electronicGroundState.c:705:            if(pSPARC->spin_typ == 1) {
electronicGroundState.c:708:                    rho_in[i] = pSPARC->mixing_hist_xk[i] + pSPARC->mixing_hist_xk[DMnd+i];
electronicGroundState.c:709:                    rho_in[DMnd+i] = pSPARC->mixing_hist_xk[i];
electronicGroundState.c:710:                    rho_in[2*DMnd+i] = pSPARC->mixing_hist_xk[DMnd+i];
electronicGroundState.c:715:                Calculate_Free_Energy(pSPARC, pSPARC->mixing_hist_xk);
electronicGroundState.c:717:            dEband = fabs(dEband - pSPARC->Eband) / pSPARC->n_atom;
electronicGroundState.c:718:            dEtot  = fabs(dEtot  - pSPARC->Etot ) / pSPARC->n_atom;
electronicGroundState.c:725:                   rank,(t2-t1)*1e3,pSPARC->Etot,dEtot,dEband);
electronicGroundState.c:730:        if (pSPARC->MixingVariable == 1) { // potential mixing
electronicGroundState.c:753:        if (pSPARC->MixingVariable == 1) { // potential mixing
electronicGroundState.c:755:            dEband = pSPARC->Eband;
electronicGroundState.c:756:            dEtot  = pSPARC->Etot;
electronicGroundState.c:759:            Calculate_Free_Energy(pSPARC, pSPARC->electronDens);
electronicGroundState.c:764:            if (pSPARC->BC == 2 || pSPARC->BC == 0) {
electronicGroundState.c:765:                VectorShift(pSPARC->Veff_loc_dmcomm_phi_in, NspdenDMnd, veff_mean, pSPARC->dmcomm_phi);
electronicGroundState.c:769:                pSPARC, NspdenDMnd, pSPARC->Veff_loc_dmcomm_phi, 
electronicGroundState.c:770:                pSPARC->Veff_loc_dmcomm_phi_in, pSPARC->electronDens + sindx_rho,
electronicGroundState.c:771:                pSPARC->dmcomm_phi
electronicGroundState.c:773:            pSPARC->Escc = Escc;
electronicGroundState.c:776:            if (pSPARC->BC == 2 || pSPARC->BC == 0) {
electronicGroundState.c:777:                VectorShift(pSPARC->Veff_loc_dmcomm_phi_in, NspdenDMnd, -veff_mean, pSPARC->dmcomm_phi);
electronicGroundState.c:785:            pSPARC->Etot = pSPARC->Etot + Escc;
electronicGroundState.c:787:            dEband = fabs(dEband - pSPARC->Eband) / pSPARC->n_atom;
electronicGroundState.c:788:            dEtot  = fabs(dEtot  - pSPARC->Etot ) / pSPARC->n_atom;
electronicGroundState.c:795:                   rank,(t2-t1)*1e3,pSPARC->Etot,dEtot,dEband);
electronicGroundState.c:800:        if (pSPARC->MixingVariable == 1 && pSPARC->BC == 2) { // potential mixing 
electronicGroundState.c:802:            VectorSum(pSPARC->Veff_loc_dmcomm_phi, NspdenDMnd, &veff_mean, pSPARC->dmcomm_phi);
electronicGroundState.c:803:            veff_mean /= ((double) (pSPARC->Nd * pSPARC->Nspden));
electronicGroundState.c:805:            VectorShift(pSPARC->Veff_loc_dmcomm_phi, NspdenDMnd, -veff_mean, pSPARC->dmcomm_phi);
electronicGroundState.c:806:            pSPARC->veff_mean = veff_mean;
electronicGroundState.c:813:        if (pSPARC->scf_err_type == 0) { // default
electronicGroundState.c:815:        } else if (pSPARC->scf_err_type == 1) { // QE scf err: conv_thr
electronicGroundState.c:818:        pSPARC->scf_err = error;
electronicGroundState.c:821:        if (pSPARC->Etot != pSPARC->Etot) {
electronicGroundState.c:826:        if (pSPARC->CalcMCSHFlag == 2){
electronicGroundState.c:827:            if (strcmpi(pSPARC->XC,"GGA_PBE") == 0){
electronicGroundState.c:834:        // if (dEtot < pSPARC->TOL_SCF && dEband < pSPARC->TOL_SCF) break;
electronicGroundState.c:837:        if ((scf_conv && SCFcount >= pSPARC->MINIT_SCF-1) ||
electronicGroundState.c:838:            (scf_conv && pSPARC->usefock > 1)) {
electronicGroundState.c:848:                output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:850:                    printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:853:                if(pSPARC->spin_typ == 0)
electronicGroundState.c:855:                            SCFcount, pSPARC->Etot/pSPARC->n_atom, error, t_cum_scf);
electronicGroundState.c:858:                            SCFcount, pSPARC->Etot/pSPARC->n_atom, pSPARC->netM, error, t_cum_scf);
electronicGroundState.c:874:        if (pSPARC->MixingVariable == 1 && pSPARC->BC == 2) { // potential mixing, add veff_mean back
electronicGroundState.c:878:            VectorShift(pSPARC->Veff_loc_dmcomm_phi, NspdenDMnd, veff_mean, pSPARC->dmcomm_phi);
electronicGroundState.c:879:        } else if (pSPARC->MixingVariable == 0) { // recalculate potential for density mixing 
electronicGroundState.c:886:        if (pSPARC->SQFlag == 1) {
electronicGroundState.c:887:            for (i = 0; i < pSPARC->Nspden; i++)
electronicGroundState.c:888:                TransferVeff_phi2sq(pSPARC, pSPARC->Veff_loc_dmcomm_phi, pSPARC->pSQ->Veff_loc_SQ);
electronicGroundState.c:892:            for (i = 0; i < pSPARC->Nspden; i++)
electronicGroundState.c:893:                Transfer_Veff_loc(pSPARC, pSPARC->Veff_loc_dmcomm_phi + i*DMnd, pSPARC->Veff_loc_dmcomm + i*pSPARC->Nd_d_dmcomm);
electronicGroundState.c:912:            output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:914:                printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:917:            if(pSPARC->spin_typ == 0)
electronicGroundState.c:919:                        SCFcount, pSPARC->Etot/pSPARC->n_atom, error, t_cum_scf);
electronicGroundState.c:922:                            SCFcount, pSPARC->Etot/pSPARC->n_atom, pSPARC->netM, error, t_cum_scf);
electronicGroundState.c:929:        output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:931:            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:936:        if (pSPARC->scf_err_type == 1 && pSPARC->MixingVariable == 0) { 
electronicGroundState.c:937:            fprintf(output_fp,"Extra time for evaluating QE SCF Error: %.3f (sec)\n", pSPARC->t_qe_extra);
electronicGroundState.c:943:    if (pSPARC->MixingVariable == 0) {
electronicGroundState.c:945:        if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
electronicGroundState.c:947:                pSPARC->Veff_loc_dmcomm_phi_in[i] = pSPARC->Veff_loc_dmcomm_phi[i];
electronicGroundState.c:956:        Calculate_Free_Energy(pSPARC, pSPARC->electronDens); 
electronicGroundState.c:958:            pSPARC, NspdenDMnd, pSPARC->Veff_loc_dmcomm_phi, 
electronicGroundState.c:959:            pSPARC->Veff_loc_dmcomm_phi_in, pSPARC->electronDens + sindx_rho,
electronicGroundState.c:960:            pSPARC->dmcomm_phi
electronicGroundState.c:962:        pSPARC->Escc = Escc;
electronicGroundState.c:963:        pSPARC->Etot = pSPARC->Etot + Escc;
electronicGroundState.c:977:    if (pSPARC->SQFlag == 1) {
electronicGroundState.c:978:        SQ_OBJ *pSQ = pSPARC->pSQ;
electronicGroundState.c:987:            occ_maxeig = 2.0 * smearing_function(pSPARC->Beta, maxeig, pSPARC->Efermi, pSPARC->elec_T_type);
electronicGroundState.c:993:            if (occ_maxeig > pSPARC->SQ_tol_occ) {
electronicGroundState.c:995:                            "eigenvalue exceeded the tolerance of: %E\n", pSPARC->SQ_tol_occ);
electronicGroundState.c:999:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++){
electronicGroundState.c:1001:                // int ind = round(pSPARC->Nstates * 0.90) - 1;
electronicGroundState.c:1003:                // double g_ind = pSPARC->occ_sorted[spn_i*Ns*Nk + k*Ns + ind];
electronicGroundState.c:1004:                // if (fabs((3.0-pSPARC->Nspin) * g_ind) > 1e-6) {
electronicGroundState.c:1008:                //         for (Nocc = ind+1; Nocc < pSPARC->Nstates; Nocc++) {
electronicGroundState.c:1009:                //             double occ_Nocc = pSPARC->occ_sorted[spn_i*Ns*Nk + k*Ns + Nocc];
electronicGroundState.c:1019:                //             Ns_suggest = max((int)((pSPARC->Nelectron/2)*1.2)+5, round(pSPARC->Nstates*1.15));
electronicGroundState.c:1023:                //         if (pSPARC->BC != 1) {
electronicGroundState.c:1024:                //             k1_red = pSPARC->k1_loc[k]*pSPARC->range_x/(2.0*M_PI);
electronicGroundState.c:1025:                //             k2_red = pSPARC->k2_loc[k]*pSPARC->range_y/(2.0*M_PI);
electronicGroundState.c:1026:                //             k3_red = pSPARC->k3_loc[k]*pSPARC->range_z/(2.0*M_PI);
electronicGroundState.c:1034:                //                ind+1, (3.0-pSPARC->Nspin) * g_ind);
electronicGroundState.c:1037:                //         output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:1039:                //             printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:1047:                //                ind+1, (3.0-pSPARC->Nspin) * g_ind);
electronicGroundState.c:1051:                int ind = pSPARC->Nstates-1;
electronicGroundState.c:1053:                double g_ind = pSPARC->occ_sorted[spn_i*Ns*Nk + k*Ns + ind];
electronicGroundState.c:1054:                // if (fabs((3.0-pSPARC->Nspin) * g_ind) > 1e-5) {
electronicGroundState.c:1057:                //         if (pSPARC->BC != 1) {
electronicGroundState.c:1058:                //             k1_red = pSPARC->k1_loc[k]*pSPARC->range_x/(2.0*M_PI);
electronicGroundState.c:1059:                //             k2_red = pSPARC->k2_loc[k]*pSPARC->range_y/(2.0*M_PI);
electronicGroundState.c:1060:                //             k3_red = pSPARC->k3_loc[k]*pSPARC->range_z/(2.0*M_PI);
electronicGroundState.c:1067:                //                ind+1, (3.0-pSPARC->Nspin) * g_ind);
electronicGroundState.c:1070:                //         output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:1072:                //             printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:1079:                //                ind+1, (3.0-pSPARC->Nspin) * g_ind);
electronicGroundState.c:1091:                    int nocc_print = min(200,pSPARC->Nstates - pSPARC->Nelectron/2 + 10);
electronicGroundState.c:1092:                    nocc_print = min(nocc_print, pSPARC->Nstates);
electronicGroundState.c:1093:                    printf("The last %d occupations of kpoints #%d are (Nelectron = %d):\n", nocc_print, k+1, pSPARC->Nelectron);
electronicGroundState.c:1097:                                pSPARC->lambda_sorted[spn_i*Ns*Nk + k*Ns + Ns - nocc_print + i],
electronicGroundState.c:1099:                                pSPARC->occfac * pSPARC->occ_sorted[spn_i*Ns*Nk + k*Ns + Ns - nocc_print + i]);
electronicGroundState.c:1111:            if (pSPARC->BC != 1) {
electronicGroundState.c:1112:                k1_red = pSPARC->k1_loc[k]*pSPARC->range_x/(2.0*M_PI);
electronicGroundState.c:1113:                k2_red = pSPARC->k2_loc[k]*pSPARC->range_y/(2.0*M_PI);
electronicGroundState.c:1114:                k3_red = pSPARC->k3_loc[k]*pSPARC->range_z/(2.0*M_PI);
electronicGroundState.c:1118:            int ind_90percent = round(pSPARC->Nstates * 0.90) - 1;
electronicGroundState.c:1119:            int ind_100percent = pSPARC->Nstates - 1;
electronicGroundState.c:1120:            double g_ind_90percent = pSPARC->occ_sorted[spn_i*Ns*Nk + k*Ns + ind_90percent];
electronicGroundState.c:1121:            double g_ind_100percent = pSPARC->occ_sorted[spn_i*Ns*Nk + k*Ns + ind_100percent];
electronicGroundState.c:1126:            //        ind_90percent+1, (3.0-pSPARC->Nspin) * g_ind_90percent,
electronicGroundState.c:1127:            //        ind_100percent+1, (3.0-pSPARC->Nspin) * g_ind_100percent);
electronicGroundState.c:1129:            output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:1131:                printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:1139:                ind_90percent+1, pSPARC->occfac * g_ind_90percent,
electronicGroundState.c:1140:                ind_100percent+1, pSPARC->occfac * g_ind_100percent);
electronicGroundState.c:1146:    double TOL = (pSPARC->usefock == 1) ? pSPARC->TOL_SCF_INIT : pSPARC->TOL_SCF;
electronicGroundState.c:1150:                    pSPARC->MDFlag ? pSPARC->MDCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0) : pSPARC->RelaxCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0));
electronicGroundState.c:1152:            output_fp = fopen(pSPARC->OutFilename,"a");
electronicGroundState.c:1154:                printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
electronicGroundState.c:1158:                    pSPARC->MDFlag ? pSPARC->MDCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0) : pSPARC->RelaxCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0));
electronicGroundState.c:1179:    int DMnd = pSPARC->Nd_d;
electronicGroundState.c:1180:    int NspdenDMnd = pSPARC->Nspden * DMnd;
electronicGroundState.c:1181:    int sindx_rho = (pSPARC->Nspden == 2) ? DMnd : 0;
electronicGroundState.c:1187:    if (pSPARC->MixingVariable == 0) {        // density mixing
electronicGroundState.c:1189:            temp     = pSPARC->electronDens[sindx_rho + i] - pSPARC->mixing_hist_xk[i];
electronicGroundState.c:1190:            sbuf[0] += pSPARC->electronDens[sindx_rho + i] * pSPARC->electronDens[sindx_rho + i];
electronicGroundState.c:1193:    } else if (pSPARC->MixingVariable == 1) { // potential mixing 
electronicGroundState.c:1195:            //temp = (pSPARC->Veff_loc_dmcomm_phi[i] - veff_mean) - pSPARC->mixing_hist_xk[i];
electronicGroundState.c:1196:            temp     = pSPARC->Veff_loc_dmcomm_phi[i] - pSPARC->mixing_hist_xk[i];
electronicGroundState.c:1198:            sbuf[0] += pSPARC->Veff_loc_dmcomm_phi[i] * pSPARC->Veff_loc_dmcomm_phi[i];
electronicGroundState.c:1203:            printf("Cannot recogonize mixing variable option %d\n", pSPARC->MixingVariable);
electronicGroundState.c:1208:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
electronicGroundState.c:1209:        // MPI_Allreduce(sbuf, rbuf, 2, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
electronicGroundState.c:1210:        MPI_Reduce(sbuf, rbuf, 2, MPI_DOUBLE, MPI_SUM, 0, pSPARC->dmcomm_phi);
electronicGroundState.c:1217:    *scf_conv  = (pSPARC->usefock == 1) 
electronicGroundState.c:1218:                ? ((int) (error < pSPARC->TOL_SCF_INIT)) : ((int) (error < pSPARC->TOL_SCF));
electronicGroundState.c:1239:    if (pSPARC->MixingVariable == 0) { // desity mixing
electronicGroundState.c:1246:        pSPARC->t_qe_extra += (t2 - t1);
electronicGroundState.c:1250:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
electronicGroundState.c:1252:        int DMnd = pSPARC->Nd_d;
electronicGroundState.c:1255:            loc_err += (pSPARC->electronDens[i]    - pSPARC->rho_dmcomm_phi_in[i]) * 
electronicGroundState.c:1256:                       (pSPARC->elecstPotential[i] - pSPARC->phi_dmcomm_phi_in[i]);
electronicGroundState.c:1258:        loc_err = fabs(loc_err * pSPARC->dV); // in case error is not numerically positive
electronicGroundState.c:1259:        MPI_Reduce(&loc_err, &error, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->dmcomm_phi);
electronicGroundState.c:1265:    *scf_conv  = (pSPARC->usefock == 1) 
electronicGroundState.c:1266:                ? ((int) (error < pSPARC->TOL_SCF_INIT)) : ((int) (error < pSPARC->TOL_SCF));
electronicGroundState.c:1276:    if(pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
electronicGroundState.c:1280:    int DMnd = pSPARC->Nd_d, i;
electronicGroundState.c:1283:        int_rhoup += pSPARC->electronDens[DMnd+i];
electronicGroundState.c:1284:        int_rhodn += pSPARC->electronDens[2*DMnd+i];
electronicGroundState.c:1287:    int_rhoup *= pSPARC->dV;
electronicGroundState.c:1288:    int_rhodn *= pSPARC->dV;
electronicGroundState.c:1292:                  MPI_SUM, pSPARC->dmcomm_phi);
electronicGroundState.c:1293:    pSPARC->Nelectron_up = spn_sum[0];
electronicGroundState.c:1294:    pSPARC->Nelectron_dn = spn_sum[1];         
electronicGroundState.c:1295:    pSPARC->netM = spn_sum[0] - spn_sum[1];
electronicGroundState.c:1303:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
electronicGroundState.c:1305:    for (den_i = 0; den_i < pSPARC->Nspden; den_i++) {
electronicGroundState.c:1306:        dindx = den_i * pSPARC->Nd_d;
electronicGroundState.c:1307:        for (i = 0; i < pSPARC->Nd_d; i++) {
electronicGroundState.c:1308:            pSPARC->Veff_loc_dmcomm_phi[dindx + i] = pSPARC->XCPotential[dindx + i] + pSPARC->elecstPotential[i];
electronicGroundState.c:1321:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
electronicGroundState.c:1323:    if (pSPARC->spin_typ == 0) {
electronicGroundState.c:1324:        if (pSPARC->MixingVariable == 0) {        // density mixing
electronicGroundState.c:1325:            for (i = 0; i < pSPARC->Nd_d; i++) {
electronicGroundState.c:1326:                pSPARC->mixing_hist_xk[i] = pSPARC->mixing_hist_xkm1[i]
electronicGroundState.c:1327:                                          = pSPARC->electronDens[i];
electronicGroundState.c:1329:        } else if (pSPARC->MixingVariable == 1) { // potential mixing
electronicGroundState.c:1330:            for (i = 0; i < pSPARC->Nd_d; i++) {
electronicGroundState.c:1331:                pSPARC->mixing_hist_xk[i] = pSPARC->mixing_hist_xkm1[i]
electronicGroundState.c:1332:                                          = pSPARC->Veff_loc_dmcomm_phi[i] - veff_mean;
electronicGroundState.c:1335:    } else if (pSPARC->spin_typ == 1) {
electronicGroundState.c:1336:        if (pSPARC->MixingVariable == 0) {        // density mixing
electronicGroundState.c:1337:            for (i = 0; i < 2 * pSPARC->Nd_d; i++) {
electronicGroundState.c:1338:                pSPARC->mixing_hist_xk[i] = pSPARC->mixing_hist_xkm1[i]
electronicGroundState.c:1339:                                          = pSPARC->electronDens[pSPARC->Nd_d + i];
electronicGroundState.c:1341:        } else if (pSPARC->MixingVariable == 1) { // potential mixing
electronicGroundState.c:1342:            for (i = 0; i < 2 * pSPARC->Nd_d; i++) {
electronicGroundState.c:1343:                pSPARC->mixing_hist_xk[i] = pSPARC->mixing_hist_xkm1[i]
electronicGroundState.c:1344:                                          = pSPARC->Veff_loc_dmcomm_phi[i] - veff_mean;
electronicGroundState.c:1347:    } else if (pSPARC->spin_typ == 2) {
electronicGroundState.c:1349:        assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
electronicGroundState.c:1374:    gridsizes[0] = pSPARC->Nx; gridsizes[1] = pSPARC->Ny; gridsizes[2] = pSPARC->Nz;
electronicGroundState.c:1375:    sdims[0] = pSPARC->npNdx_phi; sdims[1] = pSPARC->npNdy_phi; sdims[2] = pSPARC->npNdz_phi;
electronicGroundState.c:1376:    rdims[0] = pSPARC->npNdx; rdims[1] = pSPARC->npNdy; rdims[2] = pSPARC->npNdz;
electronicGroundState.c:1379:    D2D(&pSPARC->d2d_dmcomm_phi, &pSPARC->d2d_dmcomm, gridsizes, pSPARC->DMVertices, Veff_phi_domain, 
electronicGroundState.c:1380:        pSPARC->DMVertices_dmcomm, Veff_psi_domain, pSPARC->dmcomm_phi, sdims, 
electronicGroundState.c:1381:        (pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0 && pSPARC->bandcomm_index == 0) ? pSPARC->dmcomm : MPI_COMM_NULL, 
electronicGroundState.c:1391:    if (pSPARC->npspin > 1 && pSPARC->spincomm_index >= 0 && pSPARC->kptcomm_index == 0) {
electronicGroundState.c:1392:        MPI_Bcast(Veff_psi_domain, pSPARC->Nd_d_dmcomm, MPI_DOUBLE, 0, pSPARC->spin_bridge_comm);
electronicGroundState.c:1403:    if (pSPARC->spincomm_index >= 0 && pSPARC->npkpt > 1 && pSPARC->kptcomm_index >= 0 && pSPARC->bandcomm_index == 0 && pSPARC->dmcomm != MPI_COMM_NULL) {
electronicGroundState.c:1404:        MPI_Bcast(Veff_psi_domain, pSPARC->Nd_d_dmcomm, MPI_DOUBLE, 0, pSPARC->kpt_bridge_comm);
electronicGroundState.c:1412:    MPI_Barrier(pSPARC->blacscomm); // experienced severe slowdown of MPI_Bcast below on Quartz cluster, this Barrier fixed the issue (why?)
electronicGroundState.c:1416:    if (pSPARC->npband > 1 && pSPARC->kptcomm_index >= 0 && pSPARC->dmcomm != MPI_COMM_NULL) {
electronicGroundState.c:1417:        MPI_Bcast(Veff_psi_domain, pSPARC->Nd_d_dmcomm, MPI_DOUBLE, 0, pSPARC->blacscomm);    
electronicGroundState.c:1419:    pSPARC->req_veff_loc = MPI_REQUEST_NULL;
electronicGroundState.c:1421:    MPI_Barrier(pSPARC->blacscomm); // experienced severe slowdown of MPI_Bcast above on Quartz cluster, this Barrier fixed the issue (why?)
electronicGroundState.c:1424:    if (rank == 0) printf("---Transfer Veff_loc: mpi_bcast (count = %d) to all bandcomms took %.3f ms\n",pSPARC->Nd_d_dmcomm,(t2-t1)*1e3);
electronicGroundState.c:1442:    sdims[0] = pSPARC->npNdx; sdims[1] = pSPARC->npNdy; sdims[2] = pSPARC->npNdz;
electronicGroundState.c:1443:    rdims[0] = pSPARC->npNdx_phi; rdims[1] = pSPARC->npNdy_phi; rdims[2] = pSPARC->npNdz_phi;
electronicGroundState.c:1444:    gridsizes[0] = pSPARC->Nx; gridsizes[1] = pSPARC->Ny; gridsizes[2] = pSPARC->Nz;
electronicGroundState.c:1448:    D2D(&pSPARC->d2d_dmcomm, &pSPARC->d2d_dmcomm_phi, gridsizes, pSPARC->DMVertices_dmcomm, rho_send, 
electronicGroundState.c:1449:        pSPARC->DMVertices, rho_recv, (pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0 && pSPARC->bandcomm_index == 0) ? pSPARC->dmcomm : MPI_COMM_NULL, sdims, 
electronicGroundState.c:1450:        pSPARC->dmcomm_phi, rdims, MPI_COMM_WORLD);
electronicGroundState.c:1466:    MPI_Comm_rank(pSPARC->spincomm, &rank_spincomm);
electronicGroundState.c:1467:    MPI_Comm_rank(pSPARC->kptcomm, &rank_kptcomm);
electronicGroundState.c:1470:    if (pSPARC->kptcomm_index < 0 || rank_kptcomm != 0) return; 
electronicGroundState.c:1472:    int Nk = pSPARC->Nkpts_kptcomm;
electronicGroundState.c:1473:    int Ns = pSPARC->Nstates;
electronicGroundState.c:1475:    int    *Nk_i   = (int    *)malloc(pSPARC->npkpt * sizeof(int)); 
electronicGroundState.c:1476:    double *kred_i = (double *)malloc(pSPARC->Nkpts_sym * 3 * sizeof(double));
electronicGroundState.c:1477:    int *kpt_displs= (int    *)malloc((pSPARC->npkpt+1) * sizeof(int));
electronicGroundState.c:1480:    snprintf(EigenFilename, L_STRING, "%s", pSPARC->EigenFilename);
electronicGroundState.c:1504:    if (pSPARC->npspin > 1) {
electronicGroundState.c:1506:        if (pSPARC->spincomm_index == 0) { 
electronicGroundState.c:1507:            recvbuf_eig = (double *)malloc(pSPARC->Nspin * Nk * Ns * sizeof(double));
electronicGroundState.c:1508:            recvbuf_occ = (double *)malloc(pSPARC->Nspin * Nk * Ns * sizeof(double));
electronicGroundState.c:1509:            recvcounts  = (int *)   malloc(pSPARC->npspin * sizeof(int)); // npspin is 2
electronicGroundState.c:1510:            displs      = (int *)   malloc((pSPARC->npspin+1) * sizeof(int)); 
electronicGroundState.c:1513:            for (i = 0; i < pSPARC->npspin; i++) {
electronicGroundState.c:1514:                recvcounts[i] = pSPARC->Nspin_spincomm * Nk * Ns;
electronicGroundState.c:1519:        sendcount = pSPARC->Nspin_spincomm * Nk * Ns;
electronicGroundState.c:1520:        MPI_Gatherv(pSPARC->lambda_sorted, sendcount, MPI_DOUBLE,
electronicGroundState.c:1522:                    MPI_DOUBLE, 0, pSPARC->spin_bridge_comm);
electronicGroundState.c:1523:        MPI_Gatherv(pSPARC->occ_sorted, sendcount, MPI_DOUBLE,
electronicGroundState.c:1525:                    MPI_DOUBLE, 0, pSPARC->spin_bridge_comm);
electronicGroundState.c:1526:        if (pSPARC->spincomm_index == 0) { 
electronicGroundState.c:1531:        recvbuf_eig = pSPARC->lambda_sorted;
electronicGroundState.c:1532:        recvbuf_occ = pSPARC->occ_sorted;
electronicGroundState.c:1537:    displs_all = (int *)malloc((pSPARC->npkpt+1) * sizeof(int));  
electronicGroundState.c:1540:    if (pSPARC->npkpt > 1 && pSPARC->spincomm_index == 0) {
electronicGroundState.c:1542:        if (pSPARC->kptcomm_index == 0) {
electronicGroundState.c:1544:            eig_all = (double *)malloc(pSPARC->Nspin * pSPARC->Nkpts_sym * Ns * sizeof(double));
electronicGroundState.c:1545:            occ_all = (double *)malloc(pSPARC->Nspin * pSPARC->Nkpts_sym * Ns * sizeof(double));
electronicGroundState.c:1546:            recvcounts = (int *)malloc(pSPARC->npkpt * sizeof(int));
electronicGroundState.c:1549:               0, pSPARC->kpt_bridge_comm);
electronicGroundState.c:1551:            for (i = 0; i < pSPARC->npkpt; i++) {
electronicGroundState.c:1552:                recvcounts[i] = Nk_i[i] * pSPARC->Nspin * Ns;
electronicGroundState.c:1558:            int *kpt_recvcounts = (int *)malloc(pSPARC->npkpt * sizeof(int));
electronicGroundState.c:1559:            // int *kpt_displs     = (int *)malloc((pSPARC->npkpt+1) * sizeof(int));
electronicGroundState.c:1561:                kpt_sendbuf[3*i  ] = pSPARC->k1_loc[i]*pSPARC->range_x/(2.0*M_PI);
electronicGroundState.c:1562:                kpt_sendbuf[3*i+1] = pSPARC->k2_loc[i]*pSPARC->range_y/(2.0*M_PI);
electronicGroundState.c:1563:                kpt_sendbuf[3*i+2] = pSPARC->k3_loc[i]*pSPARC->range_z/(2.0*M_PI);
electronicGroundState.c:1566:            for (i = 0; i < pSPARC->npkpt; i++) {
electronicGroundState.c:1573:                MPI_DOUBLE, 0, pSPARC->kpt_bridge_comm);
electronicGroundState.c:1579:               0, pSPARC->kpt_bridge_comm);
electronicGroundState.c:1584:                kpt_sendbuf[3*i  ] = pSPARC->k1_loc[i]*pSPARC->range_x/(2.0*M_PI);
electronicGroundState.c:1585:                kpt_sendbuf[3*i+1] = pSPARC->k2_loc[i]*pSPARC->range_y/(2.0*M_PI);
electronicGroundState.c:1586:                kpt_sendbuf[3*i+2] = pSPARC->k3_loc[i]*pSPARC->range_z/(2.0*M_PI);
electronicGroundState.c:1591:                MPI_DOUBLE, 0, pSPARC->kpt_bridge_comm);
electronicGroundState.c:1595:        sendcount = pSPARC->Nspin * Nk * Ns;
electronicGroundState.c:1598:                    MPI_DOUBLE, 0, pSPARC->kpt_bridge_comm);
electronicGroundState.c:1601:                    MPI_DOUBLE, 0, pSPARC->kpt_bridge_comm);
electronicGroundState.c:1602:        if (pSPARC->kptcomm_index == 0) {
electronicGroundState.c:1611:        if (pSPARC->BC != 1) {
electronicGroundState.c:1613:                kred_i[3*i  ] = pSPARC->k1_loc[i]*pSPARC->range_x/(2.0*M_PI);
electronicGroundState.c:1614:                kred_i[3*i+1] = pSPARC->k2_loc[i]*pSPARC->range_y/(2.0*M_PI);
electronicGroundState.c:1615:                kred_i[3*i+2] = pSPARC->k3_loc[i]*pSPARC->range_z/(2.0*M_PI);
electronicGroundState.c:1625:    if (pSPARC->spincomm_index == 0) {
electronicGroundState.c:1626:        if (pSPARC->kptcomm_index == 0) {
electronicGroundState.c:1634:            if (pSPARC->Nspin == 1) {
electronicGroundState.c:1635:                for (Kcomm_indx = 0; Kcomm_indx < pSPARC->npkpt; Kcomm_indx++) {
electronicGroundState.c:1648:                                (pSPARC->kptWts[kred_index-1]+0.0)/pSPARC->Nkpts);
electronicGroundState.c:1649:                        for (i = 0; i < pSPARC->Nstates; i++) {
electronicGroundState.c:1657:            } else if (pSPARC->Nspin == 2) {
electronicGroundState.c:1658:                for (Kcomm_indx = 0; Kcomm_indx < pSPARC->npkpt; Kcomm_indx++) {
electronicGroundState.c:1672:                                (pSPARC->kptWts[kred_index-1]+0.0)/pSPARC->Nkpts);
electronicGroundState.c:1673:                        for (i = 0; i < pSPARC->Nstates; i++) {
electronicGroundState.c:1693:    if (pSPARC->npspin > 1) {
electronicGroundState.c:1694:        if (pSPARC->spincomm_index == 0) { 
electronicGroundState.c:1700:    if (pSPARC->npkpt > 1 && pSPARC->spincomm_index == 0) {
electronicGroundState.c:1701:        if (pSPARC->kptcomm_index == 0) {
electronicGroundState.c:1714:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
electronicGroundState.c:1716:    MPI_Comm_size(pSPARC->dmcomm_phi, &nproc_dmcomm_phi);
electronicGroundState.c:1717:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank_dmcomm_phi);
electronicGroundState.c:1719:    int Nd = pSPARC->Nd;
electronicGroundState.c:1720:    DMnd = pSPARC->Nd_d;
electronicGroundState.c:1739:        gridsizes[0] = pSPARC->Nx;
electronicGroundState.c:1740:        gridsizes[1] = pSPARC->Ny;
electronicGroundState.c:1741:        gridsizes[2] = pSPARC->Nz;
electronicGroundState.c:1742:        sdims[0] = pSPARC->npNdx_phi;
electronicGroundState.c:1743:        sdims[1] = pSPARC->npNdy_phi;
electronicGroundState.c:1744:        sdims[2] = pSPARC->npNdz_phi;
electronicGroundState.c:1746:        rDMVert[0] = 0; rDMVert[1] = pSPARC->Nx-1;
electronicGroundState.c:1747:        rDMVert[2] = 0; rDMVert[3] = pSPARC->Ny-1;
electronicGroundState.c:1748:        rDMVert[4] = 0; rDMVert[5] = pSPARC->Nz-1;
electronicGroundState.c:1751:        Set_D2D_Target(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, rDMVert, pSPARC->dmcomm_phi, 
electronicGroundState.c:1752:                       sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1754:            int n_rho = pSPARC->Nspden/2*2+1;
electronicGroundState.c:1755:            rho_at = (double*)malloc(pSPARC->Nd * n_rho * sizeof(double));
electronicGroundState.c:1756:            rho    = (double*)malloc(pSPARC->Nd * n_rho * sizeof(double));
electronicGroundState.c:1757:            b_ref  = (double*)malloc(pSPARC->Nd * sizeof(double));
electronicGroundState.c:1758:            b      = (double*)malloc(pSPARC->Nd * sizeof(double));
electronicGroundState.c:1761:        D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->electronDens_at, rDMVert, 
electronicGroundState.c:1762:            rho_at, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1764:        if (pSPARC->Nspden > 1) { // send rho_at_up, rho_at_down
electronicGroundState.c:1765:            D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->electronDens_at+DMnd, rDMVert, 
electronicGroundState.c:1766:                rho_at+Nd, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1767:            D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->electronDens_at+2*DMnd, rDMVert, 
electronicGroundState.c:1768:                rho_at+2*Nd, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1771:        D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->electronDens, rDMVert, 
electronicGroundState.c:1772:            rho, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1774:        if (pSPARC->Nspden > 1) { // send rho_up, rho_down
electronicGroundState.c:1775:            D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->electronDens+DMnd, rDMVert, 
electronicGroundState.c:1776:                rho+Nd, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1777:            D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->electronDens+2*DMnd, rDMVert, 
electronicGroundState.c:1778:                rho+2*Nd, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1781:        D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->psdChrgDens_ref, rDMVert, 
electronicGroundState.c:1782:            b_ref, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1784:        D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->psdChrgDens, rDMVert, 
electronicGroundState.c:1785:            b, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1788:        Free_D2D_Target(&d2d_sender, &d2d_recvr, pSPARC->dmcomm_phi, recv_comm);
electronicGroundState.c:1792:        rho_at = pSPARC->electronDens_at;
electronicGroundState.c:1793:        rho    = pSPARC->electronDens;
electronicGroundState.c:1794:        b_ref  = pSPARC->psdChrgDens_ref;
electronicGroundState.c:1795:        b      = pSPARC->psdChrgDens;
electronicGroundState.c:1801:        strncpy(DensFilename,pSPARC->DensFilename,sizeof(DensFilename));
electronicGroundState.c:1826:        if (pSPARC->Nspden > 1) {
electronicGroundState.c:1831:        if (pSPARC->Nspden > 1) {
electronicGroundState.c:1835:        fprintf(output_fp,"%-20.15E %-20.15E %-20.15E    Lx,Ly,Lz (Bohr)\n",pSPARC->range_x, pSPARC->range_y, pSPARC->range_z);
electronicGroundState.c:1836:        fprintf(output_fp,"%-20.15E %-20.15E %-20.15E    dx,dy,dz (Bohr)\n",pSPARC->delta_x, pSPARC->delta_y, pSPARC->delta_z);
electronicGroundState.c:1837:        fprintf(output_fp,"%-20.15E %-20.15E %-20.15E    Lx,Ly,Lz (angstrom)\n",pSPARC->range_x*CONST_BOHR, pSPARC->range_y*CONST_BOHR, pSPARC->range_z*CONST_BOHR);
electronicGroundState.c:1838:        fprintf(output_fp,"%-20.15E %-20.15E %-20.15E    dx,dy,dz (angstrom)\n",pSPARC->delta_x*CONST_BOHR, pSPARC->delta_y*CONST_BOHR, pSPARC->delta_z*CONST_BOHR);
electronicGroundState.c:1839:        fprintf(output_fp,"%-5d %-5d %-5d %-20d                               Nx,Ny,Nz,Nd\n",pSPARC->Nx, pSPARC->Ny, pSPARC->Nz, pSPARC->Nd);
electronicGroundState.c:1841:        if (pSPARC->Nspden == 1) {
electronicGroundState.c:1851:        for (k = 0; k < pSPARC->Nz; k++) {
electronicGroundState.c:1852:            for (j = 0; j < pSPARC->Ny; j++) {
electronicGroundState.c:1853:                for (i = 0; i < pSPARC->Nx; i++) {
electronicGroundState.c:1854:                    index = k*pSPARC->Nx*pSPARC->Ny + j*pSPARC->Nx + i;
electronicGroundState.c:1855:                    if (pSPARC->Nspden == 1) {
electronicGroundState.c:1883:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
electronicGroundState.c:1885:    MPI_Comm_size(pSPARC->dmcomm_phi, &nproc_dmcomm_phi);
electronicGroundState.c:1886:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank_dmcomm_phi);
electronicGroundState.c:1888:    int Nd = pSPARC->Nd;
electronicGroundState.c:1889:    DMnd = pSPARC->Nd_d;
electronicGroundState.c:1906:        gridsizes[0] = pSPARC->Nx;
electronicGroundState.c:1907:        gridsizes[1] = pSPARC->Ny;
electronicGroundState.c:1908:        gridsizes[2] = pSPARC->Nz;
electronicGroundState.c:1909:        sdims[0] = pSPARC->npNdx_phi;
electronicGroundState.c:1910:        sdims[1] = pSPARC->npNdy_phi;
electronicGroundState.c:1911:        sdims[2] = pSPARC->npNdz_phi;
electronicGroundState.c:1913:        rDMVert[0] = 0; rDMVert[1] = pSPARC->Nx-1;
electronicGroundState.c:1914:        rDMVert[2] = 0; rDMVert[3] = pSPARC->Ny-1;
electronicGroundState.c:1915:        rDMVert[4] = 0; rDMVert[5] = pSPARC->Nz-1;
electronicGroundState.c:1918:        Set_D2D_Target(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, rDMVert, pSPARC->dmcomm_phi, 
electronicGroundState.c:1919:                       sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1922:            if(pSPARC->Nspin > 1) { // for spin polarized systems
electronicGroundState.c:1925:            exc = (double*)malloc(pSPARC->Nd * n_rho * sizeof(double));
electronicGroundState.c:1928:        D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->e_xc, rDMVert, 
electronicGroundState.c:1929:            exc, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
electronicGroundState.c:1932:        Free_D2D_Target(&d2d_sender, &d2d_recvr, pSPARC->dmcomm_phi, recv_comm);
electronicGroundState.c:1935:        exc = pSPARC->e_xc;
electronicGroundState.c:1949:        for (k = 0; k < pSPARC->Nz; k++) {
electronicGroundState.c:1950:            for (j = 0; j < pSPARC->Ny; j++) {
electronicGroundState.c:1951:                for (i = 0; i < pSPARC->Nx; i++) {
electronicGroundState.c:1952:                    index = k*pSPARC->Nx*pSPARC->Ny + j*pSPARC->Nx + i;
electronicGroundState.c:1971:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank); // Get the processor rank using MPI function
electronicGroundState.c:1975:            globalXCPotential = (double *) malloc(pSPARC->Nspden * pSPARC->Nd * sizeof(double));
electronicGroundState.c:1979:    int gridsizes[3] = {pSPARC->Nx, pSPARC->Ny, pSPARC->Nz};
electronicGroundState.c:1980:    if (pSPARC->spin_typ == 0){
electronicGroundState.c:1981:        gather_distributed_vector(pSPARC->XCPotential, pSPARC->DMVertices, globalXCPotential, gridsizes, pSPARC->dmcomm_phi, 1);
electronicGroundState.c:1983:    else if (pSPARC->spin_typ == 1){
electronicGroundState.c:1984:        gather_distributed_vector(pSPARC->XCPotential, pSPARC->DMVertices, globalXCPotential, gridsizes, pSPARC->dmcomm_phi, 1);
electronicGroundState.c:1985:        gather_distributed_vector(pSPARC->XCPotential + pSPARC->Nd_d, pSPARC->DMVertices, globalXCPotential + pSPARC->Nd, gridsizes, pSPARC->dmcomm_phi, 1);
electronicGroundState.c:1997:        for (int i = 0; i < pSPARC->Nspden * pSPARC->Nd; i++) {
electrostatics.c:48:#define RB_Y(y,L,typ) (typ) < 20 ? (y) : asin(y/L) + 0.5*pSPARC->twist*y //acos(1 - (y)*(y)/(2*(L)*(L))) + pSPARC->twist*y
electrostatics.c:62:    dx = pSPARC->delta_x;
electrostatics.c:63:    dy = pSPARC->delta_y;
electrostatics.c:64:    dz = pSPARC->delta_z;
electrostatics.c:67:    if (pSPARC->CyclixFlag) {
electrostatics.c:68:        pos_atm_x = pSPARC->xmax_at;
electrostatics.c:71:        Rbmax_x = pSPARC->xvac;
electrostatics.c:72:        Rbmax_y = RB_Y(Rbmax_x, pos_atm_x, pSPARC->cell_typ);
electrostatics.c:95:    FDn = pSPARC->order / 2;
electrostatics.c:97:    if (pSPARC->CyclixFlag) {
electrostatics.c:98:        w2_diag = pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_z[0];
electrostatics.c:100:        w2_diag = pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_y[0] + pSPARC->D2_stencil_coeffs_z[0];
electrostatics.c:106:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
electrostatics.c:107:        if (rchrg < pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1]) {
electrostatics.c:108:            rchrg = pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1];
electrostatics.c:114:    if(pSPARC->cell_typ == 0) { 
electrostatics.c:188:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
electrostatics.c:189:        rchrg = pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1];
electrostatics.c:199:		if (pSPARC->psd[ityp].is_r_uniform == 1) {
electrostatics.c:200:			SplineInterpUniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
electrostatics.c:201:			                    R, temp3, len_interp, pSPARC->psd[ityp].SplinerVlocD);
electrostatics.c:203:			SplineInterpNonuniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
electrostatics.c:204:			                    R, temp3, len_interp, pSPARC->psd[ityp].SplinerVlocD);
electrostatics.c:212:                V_temp[i] = pSPARC->psd[ityp].Vloc_0;
electrostatics.c:214:            	V_temp[i] = -pSPARC->Znucl[ityp] / R[i];
electrostatics.c:243:        //lloc = pSPARC->localPsd[ityp];
electrostatics.c:245:        for (i = 0; i <= pSPARC->psd[ityp].lmax; i++) {
electrostatics.c:246:            rc = max(rc,pSPARC->psd[ityp].rc[i]);
electrostatics.c:250:        rb_cur_y = RB_Y(rc,pos_atm_x, pSPARC->cell_typ);
electrostatics.c:256:        lowerbd_y = RB_Y(rc,pos_atm_x, pSPARC->cell_typ);
electrostatics.c:265:            if (error_cur < pSPARC->TOL_PSEUDOCHARGE) {
electrostatics.c:266:                if (error_prev >= pSPARC->TOL_PSEUDOCHARGE) {
electrostatics.c:331:                if (error_prev >= pSPARC->TOL_PSEUDOCHARGE) {
electrostatics.c:410:            if (pSPARC->CyclixFlag) {
electrostatics.c:424:                Bint = Bint / (-4*M_PI) * 2 * pSPARC->dV;
electrostatics.c:426:                if(pSPARC->cell_typ == 0){
electrostatics.c:439:                    Bint = Bint / (-4*M_PI) * 8.0 * pSPARC->dV;
electrostatics.c:440:                } else if (pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {    
electrostatics.c:453:                    Bint = Bint / (-4*M_PI) * 2 * pSPARC->dV; 
electrostatics.c:457:            //error_cur = fabs(Bint + pSPARC->Znucl[ityp]) / fabs(pSPARC->Znucl[ityp]); 
electrostatics.c:458:            error_cur = fabs(Bint + pSPARC->Znucl[ityp]); 
electrostatics.c:463:                        pSPARC->Znucl[ityp],rb_cur_x, rb_cur_y, rb_cur_z, error_cur, Bint); 
electrostatics.c:481:            if (pSPARC->CyclixFlag) {
electrostatics.c:495:                Bint = Bint / (-4*M_PI) * 2 * pSPARC->dV;
electrostatics.c:498:                if(pSPARC->cell_typ == 0){
electrostatics.c:511:                    Bint = Bint / (-4*M_PI) * 8.0 * pSPARC->dV;
electrostatics.c:512:                } else if (pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {    
electrostatics.c:525:                    Bint = Bint / (-4*M_PI) * 2 * pSPARC->dV; 
electrostatics.c:528:            //error_cur = fabs(Bint + pSPARC->Znucl[ityp]) / fabs(pSPARC->Znucl[ityp]);
electrostatics.c:529:            error_cur = fabs(Bint + pSPARC->Znucl[ityp]);
electrostatics.c:533:            if (rank == 0 && error_cur > pSPARC->TOL_PSEUDOCHARGE) {
electrostatics.c:534:                printf("\nerror = %.2e > TOL_PSEUDOCHARGE = %.2e\n",error_cur,pSPARC->TOL_PSEUDOCHARGE);
electrostatics.c:539:        pSPARC->CUTOFF_x[ityp] = Ncube_x * dx;
electrostatics.c:540:        pSPARC->CUTOFF_y[ityp] = Ncube_y * dy;
electrostatics.c:541:        pSPARC->CUTOFF_z[ityp] = Ncube_z * dz;
electrostatics.c:547:                    ityp, count, error_cur, pSPARC->TOL_PSEUDOCHARGE, rb_cur_x, rb_cur_y, rb_cur_z, pSPARC->CUTOFF_x[ityp], pSPARC->CUTOFF_y[ityp], pSPARC->CUTOFF_z[ityp]);
electrostatics.c:577:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) {
electrostatics.c:587:    MPI_Comm grid_comm = pSPARC->dmcomm_phi;
electrostatics.c:596:    Lx = pSPARC->range_x;
electrostatics.c:597:    Ly = pSPARC->range_y;
electrostatics.c:598:    Lz = pSPARC->range_z;
electrostatics.c:600:    DMxs = pSPARC->xin + pSPARC->DMVertices[0] * pSPARC->delta_x;
electrostatics.c:601:    DMxe = pSPARC->xin + (pSPARC->DMVertices[1]+1) * pSPARC->delta_x; // note that this is the actual edge
electrostatics.c:602:    DMys = pSPARC->DMVertices[2] * pSPARC->delta_y;
electrostatics.c:603:    DMye = (pSPARC->DMVertices[3]+1) * pSPARC->delta_y; // note that this is the actual edge
electrostatics.c:604:    DMzs = pSPARC->DMVertices[4] * pSPARC->delta_z;
electrostatics.c:605:    DMze = (pSPARC->DMVertices[5]+1) * pSPARC->delta_z; // note that this is the actual edge
electrostatics.c:607:    pSPARC->Atom_Influence_local = (ATOM_INFLUENCE_OBJ *)malloc(sizeof(ATOM_INFLUENCE_OBJ) * pSPARC->Ntypes);
electrostatics.c:611:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
electrostatics.c:612:        rbx = pSPARC->CUTOFF_x[ityp];
electrostatics.c:613:        rby = pSPARC->CUTOFF_y[ityp];
electrostatics.c:614:        rbz = pSPARC->CUTOFF_z[ityp];
electrostatics.c:618:        for (i = 0; i < pSPARC->nAtomv[ityp]; i++) {
electrostatics.c:620:            x0 = pSPARC->atom_pos[3*atmcount];
electrostatics.c:621:            y0 = pSPARC->atom_pos[3*atmcount+1];
electrostatics.c:622:            z0 = pSPARC->atom_pos[3*atmcount+2];
electrostatics.c:625:            if (pSPARC->BCx == 0) {
electrostatics.c:629:            if (pSPARC->BCy == 0) {
electrostatics.c:633:            if (pSPARC->BCz == 0) {
electrostatics.c:654:        pSPARC->Atom_Influence_local[ityp].n_atom = count_overlap_local;
electrostatics.c:658:        pSPARC->Atom_Influence_local[ityp].coords = (double *)malloc(sizeof(double) * count_overlap_local * 3);
electrostatics.c:659:        pSPARC->Atom_Influence_local[ityp].atom_index = (int *)malloc(sizeof(int) * count_overlap_local);
electrostatics.c:660:        pSPARC->Atom_Influence_local[ityp].atom_spin = (double *)malloc(sizeof(double) * count_overlap_local);
electrostatics.c:661:        pSPARC->Atom_Influence_local[ityp].xs = (int *)malloc(sizeof(int) * count_overlap_local);
electrostatics.c:662:        pSPARC->Atom_Influence_local[ityp].ys = (int *)malloc(sizeof(int) * count_overlap_local);
electrostatics.c:663:        pSPARC->Atom_Influence_local[ityp].zs = (int *)malloc(sizeof(int) * count_overlap_local);
electrostatics.c:664:        pSPARC->Atom_Influence_local[ityp].xe = (int *)malloc(sizeof(int) * count_overlap_local);
electrostatics.c:665:        pSPARC->Atom_Influence_local[ityp].ye = (int *)malloc(sizeof(int) * count_overlap_local);
electrostatics.c:666:        pSPARC->Atom_Influence_local[ityp].ze = (int *)malloc(sizeof(int) * count_overlap_local);
electrostatics.c:670:        if (pSPARC->Atom_Influence_local[ityp].n_atom == 0)
electrostatics.c:678:        for (i = 0; i < pSPARC->nAtomv[ityp]; i++) {
electrostatics.c:680:            x0 = pSPARC->atom_pos[3*atmcount2];
electrostatics.c:681:            y0 = pSPARC->atom_pos[3*atmcount2+1];
electrostatics.c:682:            z0 = pSPARC->atom_pos[3*atmcount2+2];
electrostatics.c:685:            if (pSPARC->BCx == 0) {
electrostatics.c:689:            if (pSPARC->BCy == 0) {
electrostatics.c:693:            if (pSPARC->BCz == 0) {
electrostatics.c:710:                        pSPARC->Atom_Influence_local[ityp].coords[count_overlap_local*3  ] = x0_i;
electrostatics.c:711:                        pSPARC->Atom_Influence_local[ityp].coords[count_overlap_local*3+1] = y0_i;
electrostatics.c:712:                        pSPARC->Atom_Influence_local[ityp].coords[count_overlap_local*3+2] = z0_i;
electrostatics.c:715:                        pSPARC->Atom_Influence_local[ityp].atom_index[count_overlap_local] = atmcount2-1;
electrostatics.c:718:                        pSPARC->Atom_Influence_local[ityp].atom_spin[count_overlap_local] = pSPARC->atom_spin[atmcount2-1];
electrostatics.c:723:                        rb_xl = ceil((x0_i - pSPARC->xin - rbx)/pSPARC->delta_x);
electrostatics.c:724:                        rb_xr = floor((x0_i - pSPARC->xin + rbx)/pSPARC->delta_x);
electrostatics.c:725:                        rb_yl = ceil((y0_i - rby)/pSPARC->delta_y);
electrostatics.c:726:                        rb_yr = floor((y0_i + rby)/pSPARC->delta_y);
electrostatics.c:727:                        rb_zl = ceil((z0_i - rbz)/pSPARC->delta_z);
electrostatics.c:728:                        rb_zr = floor((z0_i + rbz)/pSPARC->delta_z);
electrostatics.c:731:                        if (pSPARC->BCx == 1 && (rb_xl < 0 || rb_xr >= pSPARC->Nx))
electrostatics.c:733:                        if (pSPARC->BCy == 1 && (rb_yl < 0 || rb_yr >= pSPARC->Ny))
electrostatics.c:735:                        if (pSPARC->BCz == 1 && (rb_zl < 0 || rb_zr >= pSPARC->Nz))
electrostatics.c:739:                        pSPARC->Atom_Influence_local[ityp].xs[count_overlap_local] = max(pSPARC->DMVertices[0], rb_xl);
electrostatics.c:740:                        pSPARC->Atom_Influence_local[ityp].xe[count_overlap_local] = min(pSPARC->DMVertices[1], rb_xr);
electrostatics.c:741:                        pSPARC->Atom_Influence_local[ityp].ys[count_overlap_local] = max(pSPARC->DMVertices[2], rb_yl);
electrostatics.c:742:                        pSPARC->Atom_Influence_local[ityp].ye[count_overlap_local] = min(pSPARC->DMVertices[3], rb_yr);
electrostatics.c:743:                        pSPARC->Atom_Influence_local[ityp].zs[count_overlap_local] = max(pSPARC->DMVertices[4], rb_zl);
electrostatics.c:744:                        pSPARC->Atom_Influence_local[ityp].ze[count_overlap_local] = min(pSPARC->DMVertices[5], rb_zr);
electrostatics.c:753:    if (pSPARC->BCx == 1 || pSPARC->BCy == 1 || pSPARC->BCz == 1) {
electrostatics.c:755:            MPI_Reduce(MPI_IN_PLACE, isRbOut, 3, MPI_INT, MPI_LAND, 0, pSPARC->dmcomm_phi);
electrostatics.c:757:            MPI_Reduce(isRbOut, isRbOut, 3, MPI_INT, MPI_LAND, 0, pSPARC->dmcomm_phi);
electrostatics.c:795:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) {
electrostatics.c:799:        pSPARC->PosCharge = vt[0]; 
electrostatics.c:800:        pSPARC->NegCharge = vt[1];
electrostatics.c:802:        if (!rank) printf("rank = %d, PosCharge = %f, NegCharge = %f\n", rank, pSPARC->PosCharge, pSPARC->NegCharge);
electrostatics.c:807:    MPI_Comm_size(pSPARC->dmcomm_phi, &nproc);
electrostatics.c:808:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank);
electrostatics.c:815:    FDn = pSPARC->order / 2;
electrostatics.c:817:    if (pSPARC->CyclixFlag) {
electrostatics.c:818:        w2_diag = (pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_z[0]) * -inv_4PI;
electrostatics.c:820:        w2_diag = (pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_y[0] + pSPARC->D2_stencil_coeffs_z[0]) * -inv_4PI;
electrostatics.c:823:    if(pSPARC->cell_typ == 0){
electrostatics.c:833:    DMnx = pSPARC->Nx_d;
electrostatics.c:834:    DMny = pSPARC->Ny_d;
electrostatics.c:835:    DMnz = pSPARC->Nz_d;
electrostatics.c:836:    DMnd = pSPARC->Nd_d;
electrostatics.c:840:        pSPARC->electronDens_at[i] = pSPARC->electronDens_core[i] =
electrostatics.c:841:        pSPARC->psdChrgDens[i] = pSPARC->psdChrgDens_ref[i] = pSPARC->Vc[i] = 0.0;    
electrostatics.c:844:    assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
electrostatics.c:845:    for (den_i = 1; den_i < pSPARC->Nspden/2*2+1; den_i++) {
electrostatics.c:847:            pSPARC->electronDens_at[den_i*DMnd + i] = 0.0;
electrostatics.c:848:            pSPARC->electronDens_core[den_i*DMnd + i] = 0.0;
electrostatics.c:854:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
electrostatics.c:855:        rchrg = pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1];
electrostatics.c:856:        for (iat = 0; iat < pSPARC->Atom_Influence_local[ityp].n_atom; iat++) {      
electrostatics.c:858:            x0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3];
electrostatics.c:859:            y0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 1];
electrostatics.c:860:            z0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 2];
electrostatics.c:863:            spin = pSPARC->Atom_Influence_local[ityp].atom_spin[iat];
electrostatics.c:864:            spin_frac = spin/pSPARC->Znucl[ityp];
electrostatics.c:867:            nx = pSPARC->Atom_Influence_local[ityp].xe[iat] - pSPARC->Atom_Influence_local[ityp].xs[iat] + 1;
electrostatics.c:868:            ny = pSPARC->Atom_Influence_local[ityp].ye[iat] - pSPARC->Atom_Influence_local[ityp].ys[iat] + 1;
electrostatics.c:869:            nz = pSPARC->Atom_Influence_local[ityp].ze[iat] - pSPARC->Atom_Influence_local[ityp].zs[iat] + 1;
electrostatics.c:873:            nxp = nx + pSPARC->order;
electrostatics.c:874:            nyp = ny + pSPARC->order;
electrostatics.c:875:            nzp = nz + pSPARC->order;
electrostatics.c:886:            icor = pSPARC->Atom_Influence_local[ityp].xs[iat] - FDn;
electrostatics.c:887:            jcor = pSPARC->Atom_Influence_local[ityp].ys[iat] - FDn;
electrostatics.c:888:            kcor = pSPARC->Atom_Influence_local[ityp].zs[iat] - FDn;
electrostatics.c:891:            x0_i_shift =  x0_i - pSPARC->delta_x * icor; 
electrostatics.c:892:            y0_i_shift =  y0_i - pSPARC->delta_y * jcor;
electrostatics.c:893:            z0_i_shift =  z0_i - pSPARC->delta_z * kcor; 
electrostatics.c:898:            if (pSPARC->CyclixFlag) {
electrostatics.c:900:                    z = k * pSPARC->delta_z;
electrostatics.c:902:                        y = j * pSPARC->delta_y;
electrostatics.c:904:                            x = pSPARC->xin + i * pSPARC->delta_x;
electrostatics.c:912:                if(pSPARC->cell_typ == 0) {    
electrostatics.c:914:                        z = k * pSPARC->delta_z - z0_i_shift; 
electrostatics.c:916:                            y = j * pSPARC->delta_y - y0_i_shift;
electrostatics.c:918:                                x = i * pSPARC->delta_x - x0_i_shift;
electrostatics.c:925:                } else if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
electrostatics.c:927:                        z = k * pSPARC->delta_z - z0_i_shift; 
electrostatics.c:929:                            y = j * pSPARC->delta_y - y0_i_shift;
electrostatics.c:931:                                x = i * pSPARC->delta_x - x0_i_shift;
electrostatics.c:932:                                R[count] = sqrt(pSPARC->metricT[0] * (x*x) + pSPARC->metricT[1] * (x*y) + pSPARC->metricT[2] * (x*z) 
electrostatics.c:933:                                            + pSPARC->metricT[4] * (y*y) + pSPARC->metricT[5] * (y*z) + pSPARC->metricT[8] * (z*z) );
electrostatics.c:951:            Calculate_Pseudopot_Ref(R, nd_ex, pSPARC->REFERENCE_CUTOFF, -pSPARC->Znucl[ityp], VJ_ref);
electrostatics.c:962:            if (pSPARC->psd[ityp].is_r_uniform == 1) {
electrostatics.c:963:				SplineInterpUniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
electrostatics.c:964:				         R, VJ, len_interp, pSPARC->psd[ityp].SplinerVlocD);
electrostatics.c:966:				SplineInterpNonuniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
electrostatics.c:967:				         R, VJ, len_interp, pSPARC->psd[ityp].SplinerVlocD);
electrostatics.c:973:                    VJ[i] = pSPARC->psd[ityp].Vloc_0;
electrostatics.c:975:            		VJ[i] = -pSPARC->Znucl[ityp] / R[i];
electrostatics.c:988:			if (pSPARC->psd[ityp].is_r_uniform == 1) {
electrostatics.c:989:				SplineInterpUniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rhoIsoAtom, pSPARC->psd[ityp].size, 
electrostatics.c:990:				         R, rho_J, len_interp, pSPARC->psd[ityp].SplineFitIsoAtomDen);
electrostatics.c:992:				SplineInterpNonuniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rhoIsoAtom, pSPARC->psd[ityp].size, 
electrostatics.c:993:				         R, rho_J, len_interp, pSPARC->psd[ityp].SplineFitIsoAtomDen);
electrostatics.c:998:            SplineInterpMain(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rho_c_table, pSPARC->psd[ityp].size, 
electrostatics.c:999:                         R, rho_c_J, len_interp, pSPARC->psd[ityp].SplineRhocD,pSPARC->psd[ityp].is_r_uniform);
electrostatics.c:1010:                k_global = k + pSPARC->Atom_Influence_local[ityp].zs[iat];// global coord 
electrostatics.c:1011:                k_DM = k_global - pSPARC->DMVertices[4]; // local coord 
electrostatics.c:1015:                    j_global = j + pSPARC->Atom_Influence_local[ityp].ys[iat];
electrostatics.c:1016:                    j_DM = j_global - pSPARC->DMVertices[2]; // local coord 
electrostatics.c:1020:                        i_global = i + pSPARC->Atom_Influence_local[ityp].xs[iat];
electrostatics.c:1021:                        i_DM = i_global - pSPARC->DMVertices[0]; // local coord 
electrostatics.c:1023:                        pSPARC->electronDens_at(0,i_DM,j_DM,k_DM) += rho_J(ip,jp,kp);
electrostatics.c:1024:                        pSPARC->electronDens_core(0,i_DM,j_DM,k_DM) += rho_c_J(ip,jp,kp);
electrostatics.c:1026:                        assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
electrostatics.c:1027:                        for (den_i = 1; den_i < pSPARC->Nspden/2*2+1; den_i++) {
electrostatics.c:1028:                            pSPARC->electronDens_at(den_i*DMnd,i_DM,j_DM,k_DM) += (0.5 + (1.5 - den_i) * spin_frac) * rho_J(ip,jp,kp);
electrostatics.c:1029:                            pSPARC->electronDens_core(den_i*DMnd,i_DM,j_DM,k_DM) += 0.5 * rho_c_J(ip,jp,kp);
electrostatics.c:1042:            dK = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->DMVertices[4];
electrostatics.c:1043:            dJ = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->DMVertices[2];
electrostatics.c:1044:            dI = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->DMVertices[0];
electrostatics.c:1050:            xin = pSPARC->xin + pSPARC->Atom_Influence_local[ityp].xs[iat] * pSPARC->delta_x;
electrostatics.c:1066:                        pSPARC->psdChrgDens[ishift_DM] += bJ[ishift];
electrostatics.c:1067:                        pSPARC->psdChrgDens_ref[ishift_DM] += bJ_ref[ishift];
electrostatics.c:1068:                        pSPARC->Vc[ishift_DM] += (VJ_ref[ishift_p] -  VJ[ishift_p]);
electrostatics.c:1070:                        if (pSPARC->CyclixFlag) {
electrostatics.c:1071:                            x = xin + i*pSPARC->delta_x;
electrostatics.c:1072:                            bJvJ *= (x*pSPARC->dV);
electrostatics.c:1090:    if (pSPARC->CyclixFlag) {
electrostatics.c:1095:                    int_b += pSPARC->psdChrgDens(i,j,k) * pSPARC->Intgwt_phi[count];
electrostatics.c:1096:                    int_rho += pSPARC->electronDens_at(0,i,j,k) * pSPARC->Intgwt_phi[count];
electrostatics.c:1097:                    Esc += (pSPARC->psdChrgDens(i,j,k) + pSPARC->psdChrgDens_ref(i,j,k)) * pSPARC->Vc(i,j,k) * pSPARC->Intgwt_phi[count];
electrostatics.c:1107:                    int_b += pSPARC->psdChrgDens(i,j,k);
electrostatics.c:1108:                    int_rho += pSPARC->electronDens_at(0,i,j,k);
electrostatics.c:1109:                    Esc += (pSPARC->psdChrgDens(i,j,k) + pSPARC->psdChrgDens_ref(i,j,k)) * pSPARC->Vc(i,j,k);
electrostatics.c:1113:        int_b *= pSPARC->dV;
electrostatics.c:1114:        int_rho *= pSPARC->dV; 
electrostatics.c:1115:        Esc *= pSPARC->dV * 0.5; 
electrostatics.c:1119:    MPI_Reduce(&Esc, &pSPARC->Esc, 1, MPI_DOUBLE,
electrostatics.c:1120:               MPI_SUM , 0, pSPARC->dmcomm_phi);
electrostatics.c:1125:                  MPI_SUM, pSPARC->dmcomm_phi);
electrostatics.c:1126:    pSPARC->PosCharge = -vsum[0];
electrostatics.c:1127:    pSPARC->NegCharge = -vsum[1];
electrostatics.c:1131:    if (rank == 0) printf("the global sum of int_b = %.13f, sum_int_rho = %.13f\n", -pSPARC->PosCharge, -pSPARC->NegCharge);    
electrostatics.c:1135:    double Nelectron_check = 0.0, scal_fac = (pSPARC->NetCharge - pSPARC->PosCharge) / pSPARC->NegCharge;
electrostatics.c:1137:    if (pSPARC->CyclixFlag) {
electrostatics.c:1142:                    pSPARC->electronDens_at(0,i,j,k) *= scal_fac;
electrostatics.c:1143:                    assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
electrostatics.c:1144:                    for (den_i = 1; den_i < pSPARC->Nspden/2*2+1; den_i++) 
electrostatics.c:1145:                        pSPARC->electronDens_at(den_i*DMnd,i,j,k) *= scal_fac;
electrostatics.c:1147:                    Nelectron_check += pSPARC->electronDens_at(0,i,j,k) * pSPARC->Intgwt_phi[count];
electrostatics.c:1156:                    pSPARC->electronDens_at(0,i,j,k) *= scal_fac;
electrostatics.c:1157:                    Nelectron_check += pSPARC->electronDens_at(0,i,j,k);
electrostatics.c:1158:                    assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
electrostatics.c:1159:                    for (den_i = 1; den_i < pSPARC->Nspden/2*2+1; den_i++) 
electrostatics.c:1160:                        pSPARC->electronDens_at(den_i*DMnd,i,j,k) *= scal_fac;
electrostatics.c:1164:        Nelectron_check *= pSPARC->dV;
electrostatics.c:1170:    if(pSPARC->spin_typ == 1 && pSPARC->elecgs_Count == 0) {
electrostatics.c:1172:        if (pSPARC->CyclixFlag) {
electrostatics.c:1177:                        int_rhoup += pSPARC->electronDens_at(DMnd,i,j,k) * pSPARC->Intgwt_phi[count];
electrostatics.c:1178:                        int_rhodn += pSPARC->electronDens_at(2*DMnd,i,j,k) * pSPARC->Intgwt_phi[count];
electrostatics.c:1187:                        int_rhoup += pSPARC->electronDens_at(DMnd,i,j,k);
electrostatics.c:1188:                        int_rhodn += pSPARC->electronDens_at(2*DMnd,i,j,k);
electrostatics.c:1192:            int_rhoup *= pSPARC->dV;
electrostatics.c:1193:            int_rhodn *= pSPARC->dV;
electrostatics.c:1199:                      MPI_SUM, pSPARC->dmcomm_phi);
electrostatics.c:1200:        pSPARC->netM = spn_sum[0] - spn_sum[1];          
electrostatics.c:1203:            printf("Net magnetization and total charge are : %.15f, %.15f\n", pSPARC->netM, spn_sum[0] + spn_sum[1]);
electrostatics.c:1208:    if(pSPARC->spin_typ == 2 && pSPARC->elecgs_Count == 0) {
electrostatics.c:1209:        assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
electrostatics.c:1214:        printf("PosCharge = %.12f, NegCharge = %.12f, scal_fac = %.12f\n",pSPARC->PosCharge, pSPARC->NegCharge, scal_fac);
electrostatics.c:1217:    MPI_Reduce(&Nelectron_check, &pSPARC->NegCharge, 1, MPI_DOUBLE,
electrostatics.c:1218:               MPI_SUM , 0, pSPARC->dmcomm_phi);
electrostatics.c:1219:    pSPARC->NegCharge *= -1;
electrostatics.c:1221:    if (rank == 0) printf("After scaling, int_rho = %.13f, PosCharge + NegCharge - NetCharge = %.3e\n", -pSPARC->NegCharge, -pSPARC->NetCharge + pSPARC->PosCharge + pSPARC->NegCharge);
electrostatics.c:1231:                          -pSPARC->PosCharge, -pSPARC->PosCharge + pSPARC->Nelectron + pSPARC->NetCharge,pSPARC->Esc,(t2-t1)*1e3);
electrostatics.c:1237:        vt[0] = pSPARC->PosCharge; 
electrostatics.c:1238:        vt[1] = pSPARC->NegCharge;
electrostatics.c:1242:        pSPARC->PosCharge = vt[0]; 
electrostatics.c:1243:        pSPARC->NegCharge = vt[1];
electrostatics.c:1275:    switch(pSPARC->cell_typ) {
electrostatics.c:1276:        if (pSPARC->CyclixFlag) {
electrostatics.c:1292:                        0, nx, 0, nyp, 0, nz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
electrostatics.c:1309:                        0, nx, 0, nyp, 0, nz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
electrostatics.c:1334:                        0, nxp, 0, ny, 0, nz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_y, 0.0);
electrostatics.c:1351:                        0, nxp, 0, ny, 0, nz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
electrostatics.c:1368:                        0, nx, 0, nyp, 0, nz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
electrostatics.c:1385:                            0, nxp, 0, ny, 0, nz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
electrostatics.c:1402:                            0, nx, 0, ny, 0, nzp, FDn, FDn, 0, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
electrostatics.c:1421:                            0, nx, 0, nyp, 0, nz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
electrostatics.c:1440:                            0, nxp, 0, ny, 0, nz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
electrostatics.c:1443:                        0, nx, 0, nyp, 0, nz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
electrostatics.c:1456:        printf("cell_typ = %d is not implemented!\n", pSPARC->cell_typ); 
electrostatics.c:1460:    // if(pSPARC->cell_typ == 0){
electrostatics.c:1465:    // } else if(pSPARC->cell_typ == 11){
electrostatics.c:1473:    //            0, nxp, 0, ny, 0, nz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_y, 0.0);
electrostatics.c:1480:    // } else if(pSPARC->cell_typ == 12){
electrostatics.c:1488:    //            0, nxp, 0, ny, 0, nz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
electrostatics.c:1495:    // } else if(pSPARC->cell_typ == 13){
electrostatics.c:1503:    //            0, nx, 0, nyp, 0, nz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
electrostatics.c:1510:    // } else if(pSPARC->cell_typ == 14){
electrostatics.c:1518:    //                 0, nxp, 0, ny, 0, nz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
electrostatics.c:1525:    // } else if(pSPARC->cell_typ == 15) {
electrostatics.c:1533:    //                 0, nx, 0, ny, 0, nzp, FDn, FDn, 0, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
electrostatics.c:1541:    // } else if(pSPARC->cell_typ == 16){
electrostatics.c:1550:    //                 0, nx, 0, nyp, 0, nz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
electrostatics.c:1557:    // } else if(pSPARC->cell_typ == 17) {
electrostatics.c:1567:    //                 0, nxp, 0, ny, 0, nz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
electrostatics.c:1570:    //            0, nx, 0, nyp, 0, nz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
electrostatics.c:1620:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
electrostatics.c:1629:	int DMnd = pSPARC->Nd_d;
electrostatics.c:1632:		rhs[i] = 4.0 * M_PI * (pSPARC->psdChrgDens[i] + pSPARC->electronDens[i]);
electrostatics.c:1636:    if (fabs((double)pSPARC->NetCharge) > TEMP_TOL) {
electrostatics.c:1637:		double Lx = pSPARC->range_x;
electrostatics.c:1638:		double Ly = pSPARC->range_y;
electrostatics.c:1639:		double Lz = pSPARC->range_z;
electrostatics.c:1640:        double unif_bkgd_chrg = pSPARC->NetCharge / (Lx*Ly*Lz*pSPARC->Jacbdet);
electrostatics.c:1648:    if (pSPARC->CyclixFlag) {
electrostatics.c:1651:        n_periodic = 3 - (pSPARC->BCx + pSPARC->BCy + pSPARC->BCz);
electrostatics.c:1727:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) {
electrostatics.c:1730:    int DMnx = pSPARC->Nx_d;
electrostatics.c:1731:    int DMny = pSPARC->Ny_d;
electrostatics.c:1732:    int DMnz = pSPARC->Nz_d;
electrostatics.c:1733:    int DMnd = pSPARC->Nd_d;
electrostatics.c:1755:    if (pSPARC->CyclixFlag) {
electrostatics.c:1760:                    int_b += pSPARC->psdChrgDens(i,j,k) * pSPARC->Intgwt_phi[count];
electrostatics.c:1761:                    int_rho += pSPARC->electronDens(i,j,k) * pSPARC->Intgwt_phi[count];
electrostatics.c:1768:            int_b += pSPARC->psdChrgDens[i];
electrostatics.c:1769:            int_rho += pSPARC->electronDens[i];
electrostatics.c:1774:                    MPI_SUM, pSPARC->dmcomm_phi); 
electrostatics.c:1780:            rank,int_b*pSPARC->dV,int_rho*pSPARC->dV,(int_b+int_rho)*pSPARC->dV,(t2-t1)*1e3);
electrostatics.c:1788:    if(pSPARC->POISSON_SOLVER == 0) {
electrostatics.c:1793:        AAR(pSPARC, residule_fptr, Jacobi_fptr, 0.0, DMnd, pSPARC->elecstPotential, rhs, 
electrostatics.c:1794:        omega, beta, m, p, pSPARC->TOL_POISSON, pSPARC->MAXIT_POISSON, pSPARC->dmcomm_phi);
electrostatics.c:1798:        // CG(pSPARC, Lap_vec_mult, pSPARC->Nd, DMnd, pSPARC->elecstPotential, rhs, pSPARC->TOL_POISSON, pSPARC->MAXIT_POISSON, pSPARC->dmcomm_phi);
electrostatics.c:1807:    if (pSPARC->BC == 2 || pSPARC->BC == 0) {
electrostatics.c:1809:        VectorSum  (pSPARC->elecstPotential, DMnd, &phi_shift, pSPARC->dmcomm_phi);
electrostatics.c:1810:        phi_shift /= (double)pSPARC->Nd;
electrostatics.c:1811:        VectorShift(pSPARC->elecstPotential, DMnd, -phi_shift, pSPARC->dmcomm_phi);
electrostatics.c:1821:    if (pSPARC->CyclixFlag) {
electrostatics.c:1827:        m_inv =  pSPARC->D2_stencil_coeffs_x[0] 
electrostatics.c:1828:            + pSPARC->D2_stencil_coeffs_y[0] 
electrostatics.c:1829:            + pSPARC->D2_stencil_coeffs_z[0] + c;
electrostatics.c:1854:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
electrostatics.c:1867:    FDn = pSPARC->order / 2;
electrostatics.c:1869:    DMnx = pSPARC->Nx_d;
electrostatics.c:1870:    DMny = pSPARC->Ny_d;
electrostatics.c:1871:    DMnz = pSPARC->Nz_d;
electrostatics.c:1872:    DMnd = pSPARC->Nd_d;
electrostatics.c:1873:    Lx = pSPARC->range_x;
electrostatics.c:1874:    Ly = pSPARC->range_y;
electrostatics.c:1875:    Lz = pSPARC->range_z;
electrostatics.c:1876:    Nx = pSPARC->Nx;
electrostatics.c:1877:    Ny = pSPARC->Ny;
electrostatics.c:1878:    Nz = pSPARC->Nz;
electrostatics.c:1889:        k_global = k + pSPARC->DMVertices[4]; // global coord
electrostatics.c:1890:        z = k_global * pSPARC->delta_z - Lz/2.0; 
electrostatics.c:1893:            j_global = j + pSPARC->DMVertices[2]; // global coord
electrostatics.c:1894:            y = j_global * pSPARC->delta_y - Ly/2.0; 
electrostatics.c:1897:                i_global = i + pSPARC->DMVertices[0]; // global coord
electrostatics.c:1898:                x = i_global * pSPARC->delta_x - Lx/2.0;
electrostatics.c:1925:            Qlm[index] *= pSPARC->dV;
electrostatics.c:1932:    MPI_Allreduce(MPI_IN_PLACE, Qlm, Q_len, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi); 
electrostatics.c:1934:    MPI_Comm_rank(pSPARC->dmcomm_phi, &phi_rank);
electrostatics.c:1957:        is = max(DMCorVert[nbr_i][0], pSPARC->DMVertices[0]);
electrostatics.c:1958:        ie = min(DMCorVert[nbr_i][1], pSPARC->DMVertices[1]);
electrostatics.c:1959:        js = max(DMCorVert[nbr_i][2], pSPARC->DMVertices[2]);
electrostatics.c:1960:        je = min(DMCorVert[nbr_i][3], pSPARC->DMVertices[3]);
electrostatics.c:1961:        ks = max(DMCorVert[nbr_i][4], pSPARC->DMVertices[4]);
electrostatics.c:1962:        ke = min(DMCorVert[nbr_i][5], pSPARC->DMVertices[5]);
electrostatics.c:2004:            z = (k + ks_phi) * pSPARC->delta_z - Lz*0.5; 
electrostatics.c:2006:                y = (j + js_phi) * pSPARC->delta_y - Ly*0.5;
electrostatics.c:2008:                    x = (i + is_phi) * pSPARC->delta_x - Lx*0.5;
electrostatics.c:2035:            k_phi = k - ks_phi; k_DM = k - pSPARC->DMVertices[4];
electrostatics.c:2037:                j_phi = j - js_phi; j_DM = j - pSPARC->DMVertices[2];
electrostatics.c:2039:                    i_phi = i - is_phi; i_DM = i - pSPARC->DMVertices[0];
electrostatics.c:2044:                                    d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_x[p] * phi(i_phi-p,j_phi,k_phi);
electrostatics.c:2048:                                    d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_x[p] * phi(i_phi+p,j_phi,k_phi);
electrostatics.c:2052:                                    d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_y[p] * phi(i_phi,j_phi-p,k_phi);
electrostatics.c:2056:                                    d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_y[p] * phi(i_phi,j_phi+p,k_phi);
electrostatics.c:2060:                                    d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_z[p] * phi(i_phi,j_phi,k_phi-p);
electrostatics.c:2064:                                    d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_z[p] * phi(i_phi,j_phi,k_phi+p);
electrostatics.c:2094:	if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
electrostatics.c:2096:	int FDn = pSPARC->order / 2;
electrostatics.c:2097:	int DMnx = pSPARC->Nx_d;
electrostatics.c:2098:	int DMny = pSPARC->Ny_d;
electrostatics.c:2099:	int DMnz = pSPARC->Nz_d;
electrostatics.c:2100:	int DMnd = pSPARC->Nd_d;
electrostatics.c:2101:	int Nx = pSPARC->Nx;
electrostatics.c:2102:	int Ny = pSPARC->Ny;
electrostatics.c:2103:	int Nz = pSPARC->Nz;
electrostatics.c:2120:	gridsizes[0] = pSPARC->Nx;
electrostatics.c:2121:	gridsizes[1] = pSPARC->Ny;
electrostatics.c:2122:	gridsizes[2] = pSPARC->Nz;
electrostatics.c:2127:	cellsizes[0] = pSPARC->range_x;
electrostatics.c:2128:	cellsizes[1] = pSPARC->range_y;
electrostatics.c:2129:	cellsizes[2] = pSPARC->range_z;
electrostatics.c:2130:	meshsizes[0] = pSPARC->delta_x;
electrostatics.c:2131:	meshsizes[1] = pSPARC->delta_y;
electrostatics.c:2132:	meshsizes[2] = pSPARC->delta_z;
electrostatics.c:2135:	int dir_Z = (pSPARC->BCx == 1) ? 0 : (pSPARC->BCy == 1 ? 1 : 2);
electrostatics.c:2185:	MPI_Cart_sub(pSPARC->dmcomm_phi, remain_dims, &XY_comm);
electrostatics.c:2195:		double Z = (k + pSPARC->DMVertices[2*dir_Z]) * dZ;
electrostatics.c:2204:	MPI_Cart_sub(pSPARC->dmcomm_phi, remain_dims, &Z_comm);
electrostatics.c:2214:	nbr_BCs[0] = nbr_BCs[1] = pSPARC->BCx;
electrostatics.c:2215:	nbr_BCs[2] = nbr_BCs[3] = pSPARC->BCy;
electrostatics.c:2216:	nbr_BCs[4] = nbr_BCs[5] = pSPARC->BCz;
electrostatics.c:2223:		int is = max(DMCorVert[nbr_i][0], pSPARC->DMVertices[0]);
electrostatics.c:2224:		int ie = min(DMCorVert[nbr_i][1], pSPARC->DMVertices[1]);
electrostatics.c:2225:		int js = max(DMCorVert[nbr_i][2], pSPARC->DMVertices[2]);
electrostatics.c:2226:		int je = min(DMCorVert[nbr_i][3], pSPARC->DMVertices[3]);
electrostatics.c:2227:		int ks = max(DMCorVert[nbr_i][4], pSPARC->DMVertices[4]);
electrostatics.c:2228:		int ke = min(DMCorVert[nbr_i][5], pSPARC->DMVertices[5]);
electrostatics.c:2264:			double z = (k + ks_phi) * pSPARC->delta_z; 
electrostatics.c:2266:				double y = (j + js_phi) * pSPARC->delta_y;
electrostatics.c:2268:					double x = (i + is_phi) * pSPARC->delta_x;
electrostatics.c:2273:					double phi_av = -2.0 * M_PI * (pSPARC->NetCharge/A_XY*Z - P0);
electrostatics.c:2283:			int k_phi = k - ks_phi, k_DM = k - pSPARC->DMVertices[4];
electrostatics.c:2285:				int j_phi = j - js_phi, j_DM = j - pSPARC->DMVertices[2];
electrostatics.c:2287:					int i_phi = i - is_phi, i_DM = i - pSPARC->DMVertices[0];
electrostatics.c:2292:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_x[p] * phi(i_phi-p,j_phi,k_phi);
electrostatics.c:2296:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_x[p] * phi(i_phi+p,j_phi,k_phi);
electrostatics.c:2300:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_y[p] * phi(i_phi,j_phi-p,k_phi);
electrostatics.c:2304:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_y[p] * phi(i_phi,j_phi+p,k_phi);
electrostatics.c:2308:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_z[p] * phi(i_phi,j_phi,k_phi-p);
electrostatics.c:2312:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_z[p] * phi(i_phi,j_phi,k_phi+p);
electrostatics.c:2343:	if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
electrostatics.c:2345:	int FDn = pSPARC->order / 2;
electrostatics.c:2346:	int DMnx = pSPARC->Nx_d;
electrostatics.c:2347:	int DMny = pSPARC->Ny_d;
electrostatics.c:2348:	int DMnz = pSPARC->Nz_d;
electrostatics.c:2349:	int DMnd = pSPARC->Nd_d;
electrostatics.c:2350:	int Nx = pSPARC->Nx;
electrostatics.c:2351:	int Ny = pSPARC->Ny;
electrostatics.c:2352:	int Nz = pSPARC->Nz;
electrostatics.c:2369:	gridsizes[0] = pSPARC->Nx;
electrostatics.c:2370:	gridsizes[1] = pSPARC->Ny;
electrostatics.c:2371:	gridsizes[2] = pSPARC->Nz;
electrostatics.c:2376:	meshsizes[0] = pSPARC->delta_x;
electrostatics.c:2377:	meshsizes[1] = pSPARC->delta_y;
electrostatics.c:2378:	meshsizes[2] = pSPARC->delta_z;
electrostatics.c:2381:	int dir_Z = (pSPARC->BCx == 0) ? 0 : (pSPARC->BCy == 0 ? 1 : 2);
electrostatics.c:2386:	nbr_BCs[0] = nbr_BCs[1] = pSPARC->BCx;
electrostatics.c:2387:	nbr_BCs[2] = nbr_BCs[3] = pSPARC->BCy;
electrostatics.c:2388:	nbr_BCs[4] = nbr_BCs[5] = pSPARC->BCz;
electrostatics.c:2437:	MPI_Cart_sub(pSPARC->dmcomm_phi, remain_dims, &XY_comm);
electrostatics.c:2444:	MPI_Cart_sub(pSPARC->dmcomm_phi, remain_dims, &Z_comm);
electrostatics.c:2484:		double Yp = (jp + pSPARC->DMVertices[2*dir_Y]) * dY;
electrostatics.c:2486:			double Xp = (ip + pSPARC->DMVertices[2*dir_X]) * dX;
electrostatics.c:2521:		int is = max(DMCorVert[nbr_i][0], pSPARC->DMVertices[0]);
electrostatics.c:2522:		int ie = min(DMCorVert[nbr_i][1], pSPARC->DMVertices[1]);
electrostatics.c:2523:		int js = max(DMCorVert[nbr_i][2], pSPARC->DMVertices[2]);
electrostatics.c:2524:		int je = min(DMCorVert[nbr_i][3], pSPARC->DMVertices[3]);
electrostatics.c:2525:		int ks = max(DMCorVert[nbr_i][4], pSPARC->DMVertices[4]);
electrostatics.c:2526:		int ke = min(DMCorVert[nbr_i][5], pSPARC->DMVertices[5]);
electrostatics.c:2576:			int k_phi = k - ks_phi, k_DM = k - pSPARC->DMVertices[4];
electrostatics.c:2578:				int j_phi = j - js_phi, j_DM = j - pSPARC->DMVertices[2];
electrostatics.c:2580:					int i_phi = i - is_phi, i_DM = i - pSPARC->DMVertices[0];
electrostatics.c:2585:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_x[p] * phi(i_phi-p,j_phi,k_phi);
electrostatics.c:2589:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_x[p] * phi(i_phi+p,j_phi,k_phi);
electrostatics.c:2593:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_y[p] * phi(i_phi,j_phi-p,k_phi);
electrostatics.c:2597:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_y[p] * phi(i_phi,j_phi+p,k_phi);
electrostatics.c:2601:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_z[p] * phi(i_phi,j_phi,k_phi-p);
electrostatics.c:2605:									d_cor(i_DM,j_DM,k_DM) -= pSPARC->D2_stencil_coeffs_z[p] * phi(i_phi,j_phi,k_phi+p);
energy.c:35:    //if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
energy.c:44:    Ns = pSPARC->Nstates;
energy.c:45:    Nk = pSPARC->Nkpts_kptcomm;
energy.c:47:    occfac = pSPARC->occfac;
energy.c:53:    if (pSPARC->CS_Flag == 1) {
energy.c:55:    } else if (pSPARC->SQ3Flag == 1) {
energy.c:56:        Eband = Calculate_Eband_SQ3(pSPARC, pSPARC->ChebComp);
energy.c:57:    } else if (pSPARC->SQFlag == 1) {
energy.c:64:    if (pSPARC->ext_FPMD_Flag != 0) {
energy.c:65:        double highE_Tk = calculate_highE_Tk_extFPMD(pSPARC, pSPARC->Efermi);
energy.c:66:        pSPARC->ext_FPMD_highETk = highE_Tk;
energy.c:74:    dEband = fabs(Eband - pSPARC->Eband) / pSPARC->n_atom;
energy.c:75:    pSPARC->Eband = Eband;
energy.c:78:    if (pSPARC->SQ3Flag == 1) {
energy.c:79:        pSPARC->Entropy = Calculate_electronicEntropy_SQ3(pSPARC, pSPARC->ChebComp);
energy.c:80:    } else if (pSPARC->SQFlag == 1) {
energy.c:81:        pSPARC->Entropy = Calculate_electronicEntropy_SQ(pSPARC);
energy.c:83:        pSPARC->Entropy = Calculate_electronicEntropy(pSPARC);
energy.c:86:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
energy.c:87:        if (pSPARC->CyclixFlag) {
energy.c:89:            VectorDotProduct_wt(pSPARC->psdChrgDens, pSPARC->elecstPotential, pSPARC->Intgwt_phi, pSPARC->Nd_d, &E1, pSPARC->dmcomm_phi);
energy.c:90:            VectorDotProduct_wt(electronDens, pSPARC->elecstPotential, pSPARC->Intgwt_phi, pSPARC->Nd_d, &E2, pSPARC->dmcomm_phi);
energy.c:91:            if (pSPARC->spin_typ == 0)
energy.c:92:                VectorDotProduct_wt(electronDens, pSPARC->XCPotential, pSPARC->Intgwt_phi, pSPARC->Nd_d, &E3, pSPARC->dmcomm_phi);
energy.c:94:                VectorDotProduct_wt(electronDens + pSPARC->Nd_d, pSPARC->XCPotential, pSPARC->Intgwt_phi,  pSPARC->Nd_d, &E30, pSPARC->dmcomm_phi);
energy.c:95:                VectorDotProduct_wt(electronDens + 2*pSPARC->Nd_d, pSPARC->XCPotential + pSPARC->Nd_d, pSPARC->Intgwt_phi,  pSPARC->Nd_d, &E31, pSPARC->dmcomm_phi);         
energy.c:101:            VectorDotProduct(pSPARC->psdChrgDens, pSPARC->elecstPotential, pSPARC->Nd_d, &E1, pSPARC->dmcomm_phi);
energy.c:102:            VectorDotProduct(electronDens, pSPARC->elecstPotential, pSPARC->Nd_d, &E2, pSPARC->dmcomm_phi);
energy.c:103:            if (pSPARC->spin_typ == 0)
energy.c:104:                VectorDotProduct(electronDens, pSPARC->XCPotential, pSPARC->Nd_d, &E3, pSPARC->dmcomm_phi);
energy.c:105:            else if (pSPARC->spin_typ == 1)
energy.c:106:                VectorDotProduct(electronDens + pSPARC->Nd_d, pSPARC->XCPotential, 2*pSPARC->Nd_d, &E3, pSPARC->dmcomm_phi);
energy.c:107:            else if (pSPARC->spin_typ == 2)
energy.c:108:                assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
energy.c:110:            E1 *= 0.5 * pSPARC->dV;
energy.c:111:            E2 *= 0.5 * pSPARC->dV;
energy.c:112:            E3 *= pSPARC->dV;
energy.c:114:            if (pSPARC->mGGAflag == 1) {
energy.c:116:                if (pSPARC->spin_typ == 0)
energy.c:117:                    VectorDotProduct(pSPARC->KineticTauPhiDomain, pSPARC->vxcMGGA3, pSPARC->Nd_d, &Emgga, pSPARC->dmcomm_phi);
energy.c:119:                    VectorDotProduct(pSPARC->KineticTauPhiDomain + pSPARC->Nd_d, pSPARC->vxcMGGA3, 2*pSPARC->Nd_d, &Emgga, pSPARC->dmcomm_phi);
energy.c:120:                Emgga *= pSPARC->dV;
energy.c:126:    if (pSPARC->usefock <= 1) {
energy.c:128:        Etot = Eband + E1 - E2 - E3 + pSPARC->Exc + pSPARC->Esc + pSPARC->Entropy;
energy.c:129:        pSPARC->Exc_corr = E3;
energy.c:131:        dEtot = fabs(Etot - pSPARC->Etot) / pSPARC->n_atom;
energy.c:132:        pSPARC->Etot = Etot;
energy.c:133:        MPI_Bcast(&pSPARC->Etot, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
energy.c:138:                Etot, Eband, E1, E2, E3, pSPARC->Exc, pSPARC->Esc, pSPARC->Entropy, dEtot, dEband); 
energy.c:142:        pSPARC->Exc += pSPARC->Eexx;
energy.c:144:        Etot = Eband + E1 - E2 - E3 + pSPARC->Exc + pSPARC->Esc + pSPARC->Entropy - 2*pSPARC->Eexx;
energy.c:145:        pSPARC->Exc_corr = E3;
energy.c:147:        dEtot = fabs(Etot - pSPARC->Etot) / pSPARC->n_atom;
energy.c:148:        pSPARC->Etot = Etot;
energy.c:149:        MPI_Bcast(&pSPARC->Etot, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
energy.c:154:                Etot, Eband, E1, E2, E3, pSPARC->Exc, pSPARC->Esc, pSPARC->Entropy, pSPARC->Eexx, dEtot, dEband); 
energy.c:172:    Ns = pSPARC->Nstates;
energy.c:173:    Nk = pSPARC->Nkpts_kptcomm;
energy.c:174:    occfac = pSPARC->occfac;
energy.c:176:    if (pSPARC->isGammaPoint) { // for gamma-point systems
energy.c:177:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
energy.c:179:                // Eband += 2.0 * smearing_FermiDirac(pSPARC->Beta, pSPARC->lambda[n], pSPARC->Efermi) * pSPARC->lambda[n];
energy.c:180:                Eband += occfac * pSPARC->occ[n+spn_i*Ns] * pSPARC->lambda[n+spn_i*Ns];
energy.c:183:        if (pSPARC->npspin != 1) { // sum over processes with the same rank in spincomm to find Eband
energy.c:184:            MPI_Allreduce(MPI_IN_PLACE, &Eband, 1, MPI_DOUBLE, MPI_SUM, pSPARC->spin_bridge_comm);
energy.c:187:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
energy.c:190:                    //Eband += 2.0 * pSPARC->kptWts_loc[k] * smearing_FermiDirac(pSPARC->Beta, pSPARC->lambda[n+k*Ns], pSPARC->Efermi)
energy.c:191:                    //         * pSPARC->lambda[n+k*Ns];
energy.c:192:                    Eband += occfac * pSPARC->kptWts_loc[k] * pSPARC->occ[n+k*Ns+spn_i*Nk*Ns] * pSPARC->lambda[n+k*Ns+spn_i*Nk*Ns];
energy.c:196:        Eband /= pSPARC->Nkpts;
energy.c:197:        if (pSPARC->npspin != 1) { // sum over processes with the same rank in spincomm to find Eband
energy.c:198:            MPI_Allreduce(MPI_IN_PLACE, &Eband, 1, MPI_DOUBLE, MPI_SUM, pSPARC->spin_bridge_comm);
energy.c:200:        if (pSPARC->npkpt != 1) { // sum over processes with the same rank in kptcomm to find Eband
energy.c:201:            MPI_Allreduce(MPI_IN_PLACE, &Eband, 1, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
energy.c:215:    if (pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0) return 0.0;
energy.c:216:    int k, Ns = pSPARC->Nstates, Nk = pSPARC->Nkpts_kptcomm, spn_i;
energy.c:217:    int Nt = (pSPARC->CS_Flag == 1) ? pSPARC->CS_Nt : 0;
energy.c:219:    n_start = (pSPARC->CS_Flag == 1) ? Ns-Nt : 0;
energy.c:221:    double occfac = pSPARC->occfac;
energy.c:224:    if (pSPARC->isGammaPoint) { // for gamma-point systems
energy.c:225:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
energy.c:227:                pSPARC->lambda+spn_i*Ns, pSPARC->occ+spn_i*Ns, pSPARC->Efermi, n_start, n_end, 
energy.c:228:                pSPARC->Beta, pSPARC->elec_T_type
energy.c:230:            if (pSPARC->ext_FPMD_Flag) {
energy.c:231:                double highE_Entropy = calculate_highE_Entropy_extFPMD(pSPARC, pSPARC->Efermi);
energy.c:235:        Entropy *= -occfac / pSPARC->Beta;
energy.c:236:        if (pSPARC->npspin != 1) { // sum over processes with the same rank in spincomm to find Eband
energy.c:237:            MPI_Allreduce(MPI_IN_PLACE, &Entropy, 1, MPI_DOUBLE, MPI_SUM, pSPARC->spin_bridge_comm);
energy.c:240:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
energy.c:241:            for (k = 0; k < pSPARC->Nkpts_kptcomm; k++) {
energy.c:243:                    pSPARC->lambda+k*Ns+spn_i*Nk*Ns, pSPARC->occ+k*Ns+spn_i*Nk*Ns, pSPARC->Efermi, n_start, n_end, 
energy.c:244:                    pSPARC->Beta, pSPARC->elec_T_type
energy.c:246:                if (pSPARC->ext_FPMD_Flag) {
energy.c:248:                    double highE_Entropy = calculate_highE_Entropy_extFPMD(pSPARC, pSPARC->Efermi);
energy.c:251:                Entropy += Entropy_k * pSPARC->kptWts_loc[k]; // multiply by the kpoint weights
energy.c:254:        Entropy *= -occfac / (pSPARC->Nkpts * pSPARC->Beta);
energy.c:256:        if (pSPARC->npspin != 1) { // sum over processes with the same rank in spincomm to find Eband
energy.c:257:            MPI_Allreduce(MPI_IN_PLACE, &Entropy, 1, MPI_DOUBLE, MPI_SUM, pSPARC->spin_bridge_comm);
energy.c:260:        if (pSPARC->npkpt != 1) { // sum over processes with the same rank in kptcomm to find Eband
energy.c:261:            MPI_Allreduce(MPI_IN_PLACE, &Entropy, 1, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
energy.c:345:        if (pSPARC->CyclixFlag) {
energy.c:348:            if (pSPARC->spin_typ == 0){
energy.c:349:                VectorDotProduct_wt(rho_out, Veff_out, pSPARC->Intgwt_phi, DMnd, &Escc_out, comm);
energy.c:350:                VectorDotProduct_wt(rho_out, Veff_in,  pSPARC->Intgwt_phi, DMnd, &Escc_in , comm);
energy.c:352:                VectorDotProduct_wt(rho_out, Veff_out, pSPARC->Intgwt_phi, pSPARC->Nd_d, &Escc0_out, comm);
energy.c:353:                VectorDotProduct_wt(rho_out, Veff_in,  pSPARC->Intgwt_phi, pSPARC->Nd_d, &Escc0_in , comm);
energy.c:355:                VectorDotProduct_wt(rho_out+pSPARC->Nd_d, Veff_out+pSPARC->Nd_d, pSPARC->Intgwt_phi, pSPARC->Nd_d, &Escc1_out, comm);
energy.c:356:                VectorDotProduct_wt(rho_out+pSPARC->Nd_d, Veff_in+pSPARC->Nd_d,  pSPARC->Intgwt_phi, pSPARC->Nd_d, &Escc1_in , comm);
energy.c:367:            Escc = (Escc_out - Escc_in) * pSPARC->dV;
energy.c:385:    int Ns = pSPARC->Nstates;
energy.c:386:    int Nk = pSPARC->Nkpts_kptcomm;
energy.c:388:    int CS_Flag = pSPARC->CS_Flag;
energy.c:390:        Nt = pSPARC->CS_Nt;
energy.c:392:    double occfac = pSPARC->occfac;
energy.c:395:    if (pSPARC->isGammaPoint) { // for gamma-point systems
energy.c:396:        for (int spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
energy.c:397:            tr_Hp_k = pSPARC->tr_Hp_k[spn_i*pSPARC->Nkpts_kptcomm];
energy.c:400:                Eband -= occfac * (1-pSPARC->occ[n+spn_i*Ns]) * pSPARC->lambda[n+spn_i*Ns];
energy.c:404:        for (int spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
energy.c:406:                tr_Hp_k = pSPARC->tr_Hp_k[spn_i*pSPARC->Nkpts_kptcomm + k];
energy.c:407:                Eband += occfac * pSPARC->kptWts_loc[k] * tr_Hp_k;
energy.c:409:                    Eband -= occfac * pSPARC->kptWts_loc[k] * 
energy.c:410:                        (1-pSPARC->occ[n+k*Ns+spn_i*Nk*Ns]) * pSPARC->lambda[n+k*Ns+spn_i*Nk*Ns];
energy.c:414:        Eband /= pSPARC->Nkpts;
energy.c:417:    if (pSPARC->npspin != 1) { // sum over processes with the same rank in spincomm to find Eband
energy.c:418:        MPI_Allreduce(MPI_IN_PLACE, &Eband, 1, MPI_DOUBLE, MPI_SUM, pSPARC->spin_bridge_comm);
energy.c:420:    if (pSPARC->npkpt != 1) { // sum over processes with the same rank in kptcomm to find Eband
energy.c:421:        MPI_Allreduce(MPI_IN_PLACE, &Eband, 1, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
energyDensity.c:34:    assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
energyDensity.c:44:    DMnd = pSPARC->Nd_d_dmcomm;
energyDensity.c:45:    Nband = pSPARC->Nband_bandcomm;
energyDensity.c:46:    Ns = pSPARC->Nstates;
energyDensity.c:47:    Nk = pSPARC->Nkpts_kptcomm;
energyDensity.c:48:    nstart = pSPARC->band_start_indx;
energyDensity.c:49:    nend = pSPARC->band_end_indx;
energyDensity.c:50:    spinDMnd = (pSPARC->spin_typ == 0) ? DMnd : 2*DMnd;
energyDensity.c:52:    if (pSPARC->isGammaPoint == 1) {
energyDensity.c:61:        lapcT[0] = pSPARC->lapcT[0]; lapcT[1] = 2 * pSPARC->lapcT[1]; lapcT[2] = 2 * pSPARC->lapcT[2];
energyDensity.c:62:        lapcT[3] = pSPARC->lapcT[4]; lapcT[4] = 2 * pSPARC->lapcT[5]; lapcT[5] = pSPARC->lapcT[8]; 
energyDensity.c:63:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
energyDensity.c:64:            sg  = pSPARC->spin_start_indx + spn_i;
energyDensity.c:65:            X = pSPARC->Xorb + spn_i*size_s;
energyDensity.c:66:            Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, Nband, 0.0, X, Dx, 0, pSPARC->dmcomm);
energyDensity.c:67:            Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, Nband, 0.0, X, Dy, 1, pSPARC->dmcomm);
energyDensity.c:68:            Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, Nband, 0.0, X, Dz, 2, pSPARC->dmcomm);
energyDensity.c:71:                g_nk = pSPARC->occ[n+spn_i*Ns];
energyDensity.c:76:                    if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20){
energyDensity.c:79:                        matrixTimesVec_3d(pSPARC->lapcT, Dxyz, LapD);
energyDensity.c:101:        lapcT[0] = pSPARC->lapcT[0]; lapcT[1] = 2 * pSPARC->lapcT[1]; lapcT[2] = 2 * pSPARC->lapcT[2];
energyDensity.c:102:        lapcT[3] = pSPARC->lapcT[4]; lapcT[4] = 2 * pSPARC->lapcT[5]; lapcT[5] = pSPARC->lapcT[8]; 
energyDensity.c:103:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
energyDensity.c:104:            sg  = pSPARC->spin_start_indx + spn_i;
energyDensity.c:106:                X_kpt = pSPARC->Xorb_kpt + kpt*size_k + spn_i*size_s;
energyDensity.c:107:                Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, Nband, 0.0, X_kpt, Dx_kpt, 0, &pSPARC->k1_loc[kpt], pSPARC->dmcomm);
energyDensity.c:108:                Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, Nband, 0.0, X_kpt, Dy_kpt, 1, &pSPARC->k2_loc[kpt], pSPARC->dmcomm);
energyDensity.c:109:                Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, Nband, 0.0, X_kpt, Dz_kpt, 2, &pSPARC->k3_loc[kpt], pSPARC->dmcomm);
energyDensity.c:113:                    g_nk = (pSPARC->kptWts_loc[kpt] / pSPARC->Nkpts) * pSPARC->occ[spn_i*Nk*Ns+kpt*Ns+n];
energyDensity.c:118:                        if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20){
energyDensity.c:121:                            matrixTimesVec_3d_complex(pSPARC->lapcT, Dxyz, LapD);
energyDensity.c:138:    if(pSPARC->npspin > 1) {
energyDensity.c:140:        if (pSPARC->spincomm_index == 0)
energyDensity.c:141:            MPI_Reduce(MPI_IN_PLACE, Krho, spinDMnd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
energyDensity.c:143:            MPI_Reduce(Krho, Krho, spinDMnd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
energyDensity.c:152:    if (pSPARC->npkpt > 1 && pSPARC->spincomm_index == 0) {    
energyDensity.c:154:        if (pSPARC->kptcomm_index == 0)
energyDensity.c:155:            MPI_Reduce(MPI_IN_PLACE, Krho, spinDMnd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
energyDensity.c:157:            MPI_Reduce(Krho, Krho, spinDMnd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
energyDensity.c:166:    if (pSPARC->npband > 1 && pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0) {
energyDensity.c:168:        if (pSPARC->bandcomm_index == 0)
energyDensity.c:169:            MPI_Reduce(MPI_IN_PLACE, Krho, spinDMnd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
energyDensity.c:171:            MPI_Reduce(Krho, Krho, spinDMnd, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
energyDensity.c:179:    double vscal = 1.0 / pSPARC->dV;
energyDensity.c:180:    if (pSPARC->spin_typ == 0) {
energyDensity.c:198:        if (pSPARC->spin_typ == 0) {
energyDensity.c:205:    if (pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0 && pSPARC->bandcomm_index == 0) {
energyDensity.c:206:        MPI_Allreduce(MPI_IN_PLACE, &KE, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
energyDensity.c:208:    KE *= pSPARC->dV;
energyDensity.c:219:    assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
energyDensity.c:225:    Nd = pSPARC->Nd;
energyDensity.c:226:    DMnd = pSPARC->Nd_d_dmcomm;
energyDensity.c:229:    if(pSPARC->Nspin > 1) { // for spin polarized systems
energyDensity.c:233:    if (pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0 
energyDensity.c:234:        && pSPARC->bandcomm_index == 0 && rank_dmcomm == 0) {
energyDensity.c:242:    if (pSPARC->dmcomm != MPI_COMM_NULL) {
energyDensity.c:243:        MPI_Comm_size(pSPARC->dmcomm, &nproc_dmcomm);
energyDensity.c:244:        MPI_Comm_rank(pSPARC->dmcomm, &rank_dmcomm);
energyDensity.c:250:    if ((pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0 
energyDensity.c:251:        && pSPARC->bandcomm_index == 0 && rank_dmcomm == 0) || rank == 0) {
energyDensity.c:252:        Krho = (double*)malloc(pSPARC->Nd * n_rho * sizeof(double));
energyDensity.c:253:        if (pSPARC->usefock > 0) {
energyDensity.c:254:            Exxrho_approx = (double*)malloc(pSPARC->Nd * n_rho * sizeof(double));
energyDensity.c:255:            Exxrho = (double*)malloc(pSPARC->Nd * n_rho * sizeof(double));
energyDensity.c:262:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
energyDensity.c:263:        MPI_Comm_size(pSPARC->dmcomm_phi, &nproc_dmcomm_phi);
energyDensity.c:264:        MPI_Comm_rank(pSPARC->dmcomm_phi, &rank_dmcomm_phi);
energyDensity.c:271:        Excrho = (double*)malloc(pSPARC->Nd * sizeof(double));
energyDensity.c:280:        strncpy(EnergyDensFilename,pSPARC->EnergyDensFilename,sizeof(EnergyDensFilename));
energyDensity.c:299:        if (pSPARC->Nspin > 1) {
energyDensity.c:305:        if (pSPARC->usefock > 0) {
energyDensity.c:306:            if (pSPARC->Nspin > 1) {
energyDensity.c:312:            if (pSPARC->Nspin > 1) {
energyDensity.c:318:        fprintf(output_fp,"%-20.15E %-20.15E %-20.15E    Lx,Ly,Lz (Bohr)\n",pSPARC->range_x, pSPARC->range_y, pSPARC->range_z);
energyDensity.c:319:        fprintf(output_fp,"%-20.15E %-20.15E %-20.15E    dx,dy,dz (Bohr)\n",pSPARC->delta_x, pSPARC->delta_y, pSPARC->delta_z);
energyDensity.c:320:        fprintf(output_fp,"%-20.15E %-20.15E %-20.15E    Lx,Ly,Lz (angstrom)\n",pSPARC->range_x*CONST_BOHR, pSPARC->range_y*CONST_BOHR, pSPARC->range_z*CONST_BOHR);
energyDensity.c:321:        fprintf(output_fp,"%-20.15E %-20.15E %-20.15E    dx,dy,dz (angstrom)\n",pSPARC->delta_x*CONST_BOHR, pSPARC->delta_y*CONST_BOHR, pSPARC->delta_z*CONST_BOHR);
energyDensity.c:322:        fprintf(output_fp,"%-5d %-5d %-5d %-20d                               Nx,Ny,Nz,Nd\n",pSPARC->Nx, pSPARC->Ny, pSPARC->Nz, pSPARC->Nd);
energyDensity.c:325:        if (pSPARC->usefock > 0) {
energyDensity.c:326:            if (pSPARC->Nspin == 1) {
energyDensity.c:336:            for (k = 0; k < pSPARC->Nz; k++) {
energyDensity.c:337:                for (j = 0; j < pSPARC->Ny; j++) {
energyDensity.c:338:                    for (i = 0; i < pSPARC->Nx; i++) {
energyDensity.c:339:                        index = k*pSPARC->Nx*pSPARC->Ny + j*pSPARC->Nx + i;
energyDensity.c:340:                        if (pSPARC->Nspin == 1) {
energyDensity.c:350:            if (pSPARC->Nspin == 1) {
energyDensity.c:360:            for (k = 0; k < pSPARC->Nz; k++) {
energyDensity.c:361:                for (j = 0; j < pSPARC->Ny; j++) {
energyDensity.c:362:                    for (i = 0; i < pSPARC->Nx; i++) {
energyDensity.c:363:                        index = k*pSPARC->Nx*pSPARC->Ny + j*pSPARC->Nx + i;
energyDensity.c:364:                        if (pSPARC->Nspin == 1) {
energyDensity.c:377:    if ((pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0 
energyDensity.c:378:        && pSPARC->bandcomm_index == 0 && rank_dmcomm == 0) || rank == 0) {
energyDensity.c:380:        if (pSPARC->usefock > 0) {
energyDensity.c:397:    assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
energyDensity.c:398:    if (!(pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0 && pSPARC->bandcomm_index == 0 && pSPARC->dmcomm != MPI_COMM_NULL)) {
energyDensity.c:404:    MPI_Comm_size(pSPARC->dmcomm, &nproc_dmcomm);
energyDensity.c:405:    MPI_Comm_rank(pSPARC->dmcomm, &rank_dmcomm);
energyDensity.c:407:    int Nd = pSPARC->Nd;
energyDensity.c:408:    DMnd = pSPARC->Nd_d_dmcomm;
energyDensity.c:421:        gridsizes[0] = pSPARC->Nx;
energyDensity.c:422:        gridsizes[1] = pSPARC->Ny;
energyDensity.c:423:        gridsizes[2] = pSPARC->Nz;
energyDensity.c:424:        sdims[0] = pSPARC->npNdx;
energyDensity.c:425:        sdims[1] = pSPARC->npNdy;
energyDensity.c:426:        sdims[2] = pSPARC->npNdz;
energyDensity.c:428:        rDMVert[0] = 0; rDMVert[1] = pSPARC->Nx-1;
energyDensity.c:429:        rDMVert[2] = 0; rDMVert[3] = pSPARC->Ny-1;
energyDensity.c:430:        rDMVert[4] = 0; rDMVert[5] = pSPARC->Nz-1;
energyDensity.c:433:        Set_D2D_Target(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, rDMVert, pSPARC->dmcomm, 
energyDensity.c:434:                       sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:437:        D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->KineticRho, rDMVert, 
energyDensity.c:438:            Krho, pSPARC->dmcomm, sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:440:        if (pSPARC->Nspin > 1) { // send Krho_down, Krho_sum
energyDensity.c:441:            D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->KineticRho+DMnd, rDMVert, 
energyDensity.c:442:            Krho+Nd, pSPARC->dmcomm, sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:443:            D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->KineticRho+2*DMnd, rDMVert, 
energyDensity.c:444:            Krho+2*Nd, pSPARC->dmcomm, sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:447:        if (pSPARC->usefock > 0) {
energyDensity.c:449:            D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->ExxRho_approx, rDMVert, 
energyDensity.c:450:                Exxrho_approx, pSPARC->dmcomm, sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:453:            D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->ExxRho, rDMVert, 
energyDensity.c:454:                Exxrho, pSPARC->dmcomm, sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:456:            if (pSPARC->Nspin > 1) { 
energyDensity.c:458:                D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->ExxRho_approx+DMnd, rDMVert, 
energyDensity.c:459:                    Exxrho_approx+Nd, pSPARC->dmcomm, sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:460:                D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->ExxRho_approx+2*DMnd, rDMVert, 
energyDensity.c:461:                    Exxrho_approx+2*Nd, pSPARC->dmcomm, sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:464:                D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->ExxRho+DMnd, rDMVert, 
energyDensity.c:465:                    Exxrho+Nd, pSPARC->dmcomm, sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:466:                D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->ExxRho+2*DMnd, rDMVert, 
energyDensity.c:467:                    Exxrho+2*Nd, pSPARC->dmcomm, sdims, recv_comm, rdims, pSPARC->dmcomm);
energyDensity.c:472:        Free_D2D_Target(&d2d_sender, &d2d_recvr, pSPARC->dmcomm, recv_comm);
energyDensity.c:477:        if(pSPARC->Nspin > 1) { // for spin polarized systems
energyDensity.c:480:        for (i = 0; i < n_rho * pSPARC->Nd; i++) {
energyDensity.c:481:            Krho[i] = pSPARC->KineticRho[i];
energyDensity.c:482:            if (pSPARC->usefock > 0) {
energyDensity.c:483:                Exxrho_approx[i] = pSPARC->ExxRho_approx[i];
energyDensity.c:484:                Exxrho[i] = pSPARC->ExxRho[i];
energyDensity.c:496:    assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
energyDensity.c:497:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
energyDensity.c:501:    MPI_Comm_size(pSPARC->dmcomm_phi, &nproc_dmcomm_phi);
energyDensity.c:502:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank_dmcomm_phi);
energyDensity.c:504:    int Nd = pSPARC->Nd;
energyDensity.c:505:    DMnd = pSPARC->Nd_d;
energyDensity.c:518:        gridsizes[0] = pSPARC->Nx;
energyDensity.c:519:        gridsizes[1] = pSPARC->Ny;
energyDensity.c:520:        gridsizes[2] = pSPARC->Nz;
energyDensity.c:521:        sdims[0] = pSPARC->npNdx_phi;
energyDensity.c:522:        sdims[1] = pSPARC->npNdy_phi;
energyDensity.c:523:        sdims[2] = pSPARC->npNdz_phi;
energyDensity.c:525:        rDMVert[0] = 0; rDMVert[1] = pSPARC->Nx-1;
energyDensity.c:526:        rDMVert[2] = 0; rDMVert[3] = pSPARC->Ny-1;
energyDensity.c:527:        rDMVert[4] = 0; rDMVert[5] = pSPARC->Nz-1;
energyDensity.c:530:        Set_D2D_Target(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, rDMVert, pSPARC->dmcomm_phi, 
energyDensity.c:531:                       sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
energyDensity.c:534:        D2D(&d2d_sender, &d2d_recvr, gridsizes, pSPARC->DMVertices, pSPARC->ExcRho, rDMVert, 
energyDensity.c:535:            Excrho, pSPARC->dmcomm_phi, sdims, recv_comm, rdims, pSPARC->dmcomm_phi);
energyDensity.c:538:        Free_D2D_Target(&d2d_sender, &d2d_recvr, pSPARC->dmcomm_phi, recv_comm);
energyDensity.c:543:        for (i = 0; i < n_rho * pSPARC->Nd; i++) {
energyDensity.c:544:            Excrho[i] = pSPARC->ExcRho[i];
exchangeCorrelation.c:36:    if(strcmpi(pSPARC->XC,"GGA_PBEsol") == 0) {
exchangeCorrelation.c:87:    sz_rho = pSPARC->Nd_d * (pSPARC->Nspden/2*2+1);
exchangeCorrelation.c:90:        rho[i] = pSPARC->electronDens[i];
exchangeCorrelation.c:92:        if (pSPARC->NLCC_flag)
exchangeCorrelation.c:93:            rho[i] += pSPARC->electronDens_core[i];
exchangeCorrelation.c:94:        if(rho[i] < pSPARC->xc_rhotol)
exchangeCorrelation.c:95:            rho[i] = pSPARC->xc_rhotol;
exchangeCorrelation.c:98:    if (pSPARC->spin_typ == 1) {
exchangeCorrelation.c:99:        for(i = 0; i < pSPARC->Nd_d; i++)
exchangeCorrelation.c:100:            rho[i] = rho[pSPARC->Nd_d + i] + rho[2*pSPARC->Nd_d + i];
exchangeCorrelation.c:103:    if(strcmpi(pSPARC->XC,"LDA_PW") == 0 || strcmpi(pSPARC->XC,"LDA_PZ") == 0)
exchangeCorrelation.c:105:    else if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0 || 
exchangeCorrelation.c:106:            strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HSE") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0)
exchangeCorrelation.c:108:    else if(strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0)
exchangeCorrelation.c:110:    else if(strcmpi(pSPARC->XC,"HF") == 0) {
exchangeCorrelation.c:111:        if (pSPARC->usefock == 1)
exchangeCorrelation.c:114:            for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:115:                pSPARC->e_xc[i] = 0.0;
exchangeCorrelation.c:116:                pSPARC->Dxcdgrho[i] = 0.0;
exchangeCorrelation.c:117:                pSPARC->XCPotential[i] = 0.0;
exchangeCorrelation.c:120:    } else if(pSPARC->mGGAflag == 1) {
exchangeCorrelation.c:138:    if (pSPARC->spin_typ == 0){ // spin unpolarized
exchangeCorrelation.c:139:        if(strcmpi(pSPARC->XC,"LDA_PW") == 0) {
exchangeCorrelation.c:142:        } else if (strcmpi(pSPARC->XC,"LDA_PZ") == 0) {
exchangeCorrelation.c:149:    } else if (pSPARC->spin_typ == 1){
exchangeCorrelation.c:150:        if(strcmpi(pSPARC->XC,"LDA_PW") == 0) {
exchangeCorrelation.c:156:        } else if (strcmpi(pSPARC->XC,"LDA_PZ") == 0) {
exchangeCorrelation.c:165:    } else if (pSPARC->spin_typ == 2){
exchangeCorrelation.c:166:        assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
exchangeCorrelation.c:185:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) {
exchangeCorrelation.c:206:    for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:216:        pSPARC->XCPotential[i] = -2.0*A*(1.0+alpha1*rs) * G1 
exchangeCorrelation.c:218:        pSPARC->XCPotential[i] -= C3 * rho_cbrt; // add exchange potential 
exchangeCorrelation.c:236:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) {
exchangeCorrelation.c:247:    DMnd = pSPARC->Nd_d;
exchangeCorrelation.c:249:        //pSPARC->electronDens[i] += 1e-50;
exchangeCorrelation.c:250:        //pSPARC->electronDens[DMnd+i] += 1e-50;
exchangeCorrelation.c:251:        //pSPARC->electronDens[2*DMnd+i] += 1e-50;
exchangeCorrelation.c:270:            pSPARC->XCPotential[spn_i*DMnd + i] = (4.0/3.0) * ex_lsd;
exchangeCorrelation.c:273:        pSPARC->e_xc[i] = exc * rhotot_inv;
exchangeCorrelation.c:323:        pSPARC->e_xc[i] += ecrs;
exchangeCorrelation.c:325:        pSPARC->XCPotential[i] += vxcadd + decrs_dzeta;
exchangeCorrelation.c:326:        pSPARC->XCPotential[DMnd+i] += vxcadd - decrs_dzeta;
exchangeCorrelation.c:339:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
exchangeCorrelation.c:355:    for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:368:        pSPARC->XCPotential[i] = Vxci;        
exchangeCorrelation.c:385:    if (pSPARC->spin_typ == 0) { // spin-paired calculation
exchangeCorrelation.c:386:        if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0 
exchangeCorrelation.c:387:            || strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0) {
exchangeCorrelation.c:391:        else if(strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0) {
exchangeCorrelation.c:395:        else if (strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0) {
exchangeCorrelation.c:399:        else if (strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0) { // it can also be replaced by pSPARC->vdWDFFlag != 0
exchangeCorrelation.c:407:    } else if (pSPARC->spin_typ == 1) { // collinear spin
exchangeCorrelation.c:408:        if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0
exchangeCorrelation.c:409:            || strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0)
exchangeCorrelation.c:412:        else if (strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0){
exchangeCorrelation.c:415:        else if (strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0) {
exchangeCorrelation.c:418:        else if (strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0) {
exchangeCorrelation.c:426:    } else if (pSPARC->spin_typ == 2) { // non-collinear spin
exchangeCorrelation.c:427:        assert(pSPARC->Nspden <= 2 && pSPARC->spin_typ <= 1);
exchangeCorrelation.c:444:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) {
exchangeCorrelation.c:460:    DMnd = pSPARC->Nd_d;
exchangeCorrelation.c:470:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, rho, Drho_x, 0, pSPARC->dmcomm_phi);
exchangeCorrelation.c:471:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, rho, Drho_y, 1, pSPARC->dmcomm_phi);
exchangeCorrelation.c:472:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, rho, Drho_z, 2, pSPARC->dmcomm_phi);
exchangeCorrelation.c:474:    if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20){
exchangeCorrelation.c:476:        lapcT[0] = pSPARC->lapcT[0]; lapcT[1] = 2 * pSPARC->lapcT[1]; lapcT[2] = 2 * pSPARC->lapcT[2];
exchangeCorrelation.c:477:        lapcT[3] = pSPARC->lapcT[4]; lapcT[4] = 2 * pSPARC->lapcT[5]; lapcT[5] = pSPARC->lapcT[8]; 
exchangeCorrelation.c:515:        if (strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0 || 
exchangeCorrelation.c:516:            strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0 || strcmpi(pSPARC->XC,"SCAN") == 0) { // || strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0) { // vdWDF1 and vdWDF2 will be removed from here later
exchangeCorrelation.c:520:        } else if (strcmpi(pSPARC->XC,"GGA_RPBE") == 0) {
exchangeCorrelation.c:525:            printf("Unrecognized GGA functional: %s\n",pSPARC->XC);
exchangeCorrelation.c:534:        pSPARC->XCPotential[i] = ex_lsd * ((4.0/3.0) * fx + rho_updn * dfxdn);
exchangeCorrelation.c:538:        pSPARC->Dxcdgrho[i] = 0.5 * ex_lsd * rho_updn * dfxdg;
exchangeCorrelation.c:543:        pSPARC->e_xc[i] = exc * rhotot_inv;
exchangeCorrelation.c:545:        if (pSPARC->usefock > 1 && strcmpi(pSPARC->XC,"PBE0") == 0) {
exchangeCorrelation.c:546:            pSPARC->e_xc[i] *=  (1.0 - pSPARC->hyb_mixing);
exchangeCorrelation.c:547:            pSPARC->Dxcdgrho[i] *= (1.0 - pSPARC->hyb_mixing);
exchangeCorrelation.c:548:            pSPARC->XCPotential[i] *= (1.0 - pSPARC->hyb_mixing);
exchangeCorrelation.c:551:        if (pSPARC->usefock > 1 && strcmpi(pSPARC->XC,"HSE") == 0) {
exchangeCorrelation.c:556:            pbexsr(rho[i], sigma[i], pSPARC->hyb_range_pbe, &e_xc_sr, &XCPotential_sr, &Dxcdgrho_sr);
exchangeCorrelation.c:557:            pSPARC->e_xc[i] -=  pSPARC->hyb_mixing * e_xc_sr / rho[i];
exchangeCorrelation.c:558:            pSPARC->XCPotential[i] -= pSPARC->hyb_mixing * XCPotential_sr;
exchangeCorrelation.c:559:            pSPARC->Dxcdgrho[i] -= pSPARC->hyb_mixing * Dxcdgrho_sr;
exchangeCorrelation.c:583:        pSPARC->e_xc[i] += ecrs;
exchangeCorrelation.c:584:        pSPARC->XCPotential[i] += ecrs - (rs/3.0) * decrs_drs;
exchangeCorrelation.c:651:        pSPARC->e_xc[i] += hh;
exchangeCorrelation.c:655:        pSPARC->XCPotential[i] += drhohh_drho;
exchangeCorrelation.c:660:        pSPARC->Dxcdgrho[i] += (rho[i] * dtt_dg * dhh_dtt);    
exchangeCorrelation.c:664:    //     if(pSPARC->electronDens[i] == 0.0){
exchangeCorrelation.c:665:    //         pSPARC->XCPotential[i] = 0.0;
exchangeCorrelation.c:666:    //         pSPARC->e_xc[i] = 0.0;
exchangeCorrelation.c:667:    //         pSPARC->Dxcdgrho[i] = 0.0;
exchangeCorrelation.c:671:    if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20){
exchangeCorrelation.c:673:            temp1 = (Drho_x[i] * pSPARC->lapcT[0] + Drho_y[i] * pSPARC->lapcT[1] + Drho_z[i] * pSPARC->lapcT[2]) * pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:674:            temp2 = (Drho_x[i] * pSPARC->lapcT[3] + Drho_y[i] * pSPARC->lapcT[4] + Drho_z[i] * pSPARC->lapcT[5]) * pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:675:            temp3 = (Drho_x[i] * pSPARC->lapcT[6] + Drho_y[i] * pSPARC->lapcT[7] + Drho_z[i] * pSPARC->lapcT[8]) * pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:682:            Drho_x[i] *= pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:683:            Drho_y[i] *= pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:684:            Drho_z[i] *= pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:688:    if (pSPARC->CyclixFlag) {
exchangeCorrelation.c:695:        Gradient_vectors_dir(pSPARC, 2*DMnd, pSPARC->DMVertices, 1, 0.0, Drho_xy, DDrho_x, 0, pSPARC->dmcomm_phi);
exchangeCorrelation.c:701:        Gradient_vectors_dir(pSPARC, 2*DMnd, pSPARC->DMVertices, 1, 0.0, Drho_xy, DDrho_y, 1, pSPARC->dmcomm_phi);
exchangeCorrelation.c:703:        Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, Drho_z, DDrho_z, 2, pSPARC->dmcomm_phi);
exchangeCorrelation.c:707:        Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, Drho_x, DDrho_x, 0, pSPARC->dmcomm_phi);
exchangeCorrelation.c:708:        Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, Drho_y, DDrho_y, 1, pSPARC->dmcomm_phi);
exchangeCorrelation.c:709:        Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, Drho_z, DDrho_z, 2, pSPARC->dmcomm_phi);
exchangeCorrelation.c:713:        //if(pSPARC->electronDens[i] != 0.0)
exchangeCorrelation.c:714:        pSPARC->XCPotential[i] += -DDrho_x[i] - DDrho_y[i] - DDrho_z[i];
exchangeCorrelation.c:735:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) {
exchangeCorrelation.c:753:    DMnd = pSPARC->Nd_d;
exchangeCorrelation.c:766:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 3, 0.0, rho, Drho_x, 0, pSPARC->dmcomm_phi);
exchangeCorrelation.c:767:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 3, 0.0, rho, Drho_y, 1, pSPARC->dmcomm_phi);
exchangeCorrelation.c:768:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 3, 0.0, rho, Drho_z, 2, pSPARC->dmcomm_phi);
exchangeCorrelation.c:770:    if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20){
exchangeCorrelation.c:772:        lapcT[0] = pSPARC->lapcT[0]; lapcT[1] = 2 * pSPARC->lapcT[1]; lapcT[2] = 2 * pSPARC->lapcT[2];
exchangeCorrelation.c:773:        lapcT[3] = pSPARC->lapcT[4]; lapcT[4] = 2 * pSPARC->lapcT[5]; lapcT[5] = pSPARC->lapcT[8]; 
exchangeCorrelation.c:786:        // pSPARC->electronDens[i] += 1e-50;
exchangeCorrelation.c:787:        // pSPARC->electronDens[DMnd + i] += 1e-50;
exchangeCorrelation.c:788:        // pSPARC->electronDens[2*DMnd + i] += 1e-50;
exchangeCorrelation.c:810:			if (strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0 ||
exchangeCorrelation.c:811:                strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0 || strcmpi(pSPARC->XC,"SCAN") == 0) {
exchangeCorrelation.c:815:        	} else if (strcmpi(pSPARC->XC,"GGA_RPBE") == 0) {
exchangeCorrelation.c:820:                printf("Unrecognized XC functional: %s\n", pSPARC->XC);
exchangeCorrelation.c:830:            pSPARC->XCPotential[spn_i*DMnd + i] = ex_lsd * ((4.0/3.0) * fx + rho_updn * dfxdn);
exchangeCorrelation.c:834:            pSPARC->Dxcdgrho[DMnd + spn_i*DMnd + i] = ex_lsd * rho_updn * dfxdg; // spin up and spin down
exchangeCorrelation.c:838:            if (pSPARC->usefock > 1 && strcmpi(pSPARC->XC,"PBE0") == 0) {
exchangeCorrelation.c:839:                exc -= pSPARC->hyb_mixing * ex_gga * rho_updn;
exchangeCorrelation.c:840:                pSPARC->Dxcdgrho[DMnd + spn_i*DMnd + i] *= (1.0 - pSPARC->hyb_mixing);
exchangeCorrelation.c:841:                pSPARC->XCPotential[spn_i*DMnd + i] *= (1.0 - pSPARC->hyb_mixing);
exchangeCorrelation.c:844:            if (pSPARC->usefock > 1 && strcmpi(pSPARC->XC,"HSE") == 0) {
exchangeCorrelation.c:849:                pbexsr(rho[DMnd + spn_i*DMnd + i] * 2.0, sigma[DMnd + spn_i*DMnd + i] * 4.0, pSPARC->hyb_range_pbe, &e_xc_sr, &XCPotential_sr, &Dxcdgrho_sr);
exchangeCorrelation.c:850:                exc -=  pSPARC->hyb_mixing * e_xc_sr / 2.0;
exchangeCorrelation.c:851:                pSPARC->XCPotential[spn_i*DMnd + i] -= pSPARC->hyb_mixing * XCPotential_sr;
exchangeCorrelation.c:852:                pSPARC->Dxcdgrho[DMnd + spn_i*DMnd + i] -= pSPARC->hyb_mixing * Dxcdgrho_sr * 2.0;
exchangeCorrelation.c:855:        pSPARC->e_xc[i] = exc * rhotot_inv;
exchangeCorrelation.c:903:        pSPARC->e_xc[i] += ecrs;
exchangeCorrelation.c:905:        pSPARC->XCPotential[i] += vxcadd + decrs_dzeta;
exchangeCorrelation.c:906:        pSPARC->XCPotential[DMnd+i] += vxcadd - decrs_dzeta;
exchangeCorrelation.c:980:        pSPARC->e_xc[i] += hh;
exchangeCorrelation.c:984:        pSPARC->XCPotential[i] += drhohh_drho + dhh_dzeta;
exchangeCorrelation.c:985:        pSPARC->XCPotential[DMnd + i] += drhohh_drho - dhh_dzeta;
exchangeCorrelation.c:990:        pSPARC->Dxcdgrho[i] = (rho[i] * dtt_dg * dhh_dtt);// correlation part
exchangeCorrelation.c:993:    if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20){
exchangeCorrelation.c:995:            temp1 = (Drho_x[i] * pSPARC->lapcT[0] + Drho_y[i] * pSPARC->lapcT[1] + Drho_z[i] * pSPARC->lapcT[2]) * pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:996:            temp2 = (Drho_x[i] * pSPARC->lapcT[3] + Drho_y[i] * pSPARC->lapcT[4] + Drho_z[i] * pSPARC->lapcT[5]) * pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:997:            temp3 = (Drho_x[i] * pSPARC->lapcT[6] + Drho_y[i] * pSPARC->lapcT[7] + Drho_z[i] * pSPARC->lapcT[8]) * pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:1004:            Drho_x[i] *= pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:1005:            Drho_y[i] *= pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:1006:            Drho_z[i] *= pSPARC->Dxcdgrho[i];
exchangeCorrelation.c:1010:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 3, 0.0, Drho_x, DDrho_x, 0, pSPARC->dmcomm_phi);
exchangeCorrelation.c:1011:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 3, 0.0, Drho_y, DDrho_y, 1, pSPARC->dmcomm_phi);
exchangeCorrelation.c:1012:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 3, 0.0, Drho_z, DDrho_z, 2, pSPARC->dmcomm_phi);
exchangeCorrelation.c:1015:        pSPARC->XCPotential[i] += -DDrho_x[i] - DDrho_y[i] - DDrho_z[i] - DDrho_x[DMnd + i] - DDrho_y[DMnd + i] - DDrho_z[DMnd + i];// correlation and spin up exchange potential
exchangeCorrelation.c:1016:        pSPARC->XCPotential[DMnd + i] += -DDrho_x[i] - DDrho_y[i] - DDrho_z[i] - DDrho_x[2*DMnd + i] - DDrho_y[2*DMnd + i] - DDrho_z[2*DMnd + i];// correlation and spin down exchange potential
exchangeCorrelation.c:1032:    sz_rho = pSPARC->Nd_d * (pSPARC->Nspden/2*2+1);
exchangeCorrelation.c:1035:        rho[i] = pSPARC->electronDens[i];
exchangeCorrelation.c:1037:        if (pSPARC->NLCC_flag)
exchangeCorrelation.c:1038:            rho[i] += pSPARC->electronDens_core[i];
exchangeCorrelation.c:1039:        if(rho[i] < pSPARC->xc_rhotol)
exchangeCorrelation.c:1040:            rho[i] = pSPARC->xc_rhotol;
exchangeCorrelation.c:1043:    if(strcmpi(pSPARC->XC,"LDA_PW") == 0 || strcmpi(pSPARC->XC,"LDA_PZ") == 0)
exchangeCorrelation.c:1045:    else if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0 
exchangeCorrelation.c:1046:        || strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0
exchangeCorrelation.c:1047:        || strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0)
exchangeCorrelation.c:1049:    else if(pSPARC->mGGAflag == 1) {
exchangeCorrelation.c:1068:    if(pSPARC->spin_typ == 0) { // spin unpolarized
exchangeCorrelation.c:1069:        if(strcmpi(pSPARC->XC,"LDA_PW") == 0) {
exchangeCorrelation.c:1072:        } else if (strcmpi(pSPARC->XC,"LDA_PZ") == 0) {
exchangeCorrelation.c:1080:        if(strcmpi(pSPARC->XC,"LDA_PW") == 0) {
exchangeCorrelation.c:1083:        } else if (strcmpi(pSPARC->XC,"LDA_PZ") == 0) {
exchangeCorrelation.c:1105:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
exchangeCorrelation.c:1134:    if (pSPARC->CyclixFlag) {
exchangeCorrelation.c:1135:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1145:            Exc += ec * electronDens[i] * pSPARC->Intgwt_phi[i];
exchangeCorrelation.c:1148:            Exc -= C2 * rho_cbrt * electronDens[i] * pSPARC->Intgwt_phi[i]; // Ex = -C2 * integral(rho^(4/3))
exchangeCorrelation.c:1151:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1165:            pSPARC->e_xc[i] = ec - C2 * rho_cbrt;
exchangeCorrelation.c:1167:        Exc *= pSPARC->dV;
exchangeCorrelation.c:1172:    MPI_Allreduce(MPI_IN_PLACE, &Exc, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
exchangeCorrelation.c:1173:    pSPARC->Exc = Exc;
exchangeCorrelation.c:1190:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
exchangeCorrelation.c:1195:    if (pSPARC->CyclixFlag) {
exchangeCorrelation.c:1196:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1197:            Exc += electronDens[i] * pSPARC->e_xc[i] * pSPARC->Intgwt_phi[i]; 
exchangeCorrelation.c:1200:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1201:            Exc += electronDens[i] * pSPARC->e_xc[i]; 
exchangeCorrelation.c:1204:        Exc *= pSPARC->dV;
exchangeCorrelation.c:1206:    MPI_Allreduce(MPI_IN_PLACE, &Exc, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
exchangeCorrelation.c:1207:    pSPARC->Exc = Exc;
exchangeCorrelation.c:1221:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
exchangeCorrelation.c:1236:    if (pSPARC->CyclixFlag) {
exchangeCorrelation.c:1237:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1250:            Exc += (ex+ec)*rhoi * pSPARC->Intgwt_phi[i]; 
exchangeCorrelation.c:1253:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1267:            pSPARC->e_xc[i] = ex+ec;
exchangeCorrelation.c:1270:        Exc *= pSPARC->dV;
exchangeCorrelation.c:1272:    MPI_Allreduce(MPI_IN_PLACE, &Exc, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
exchangeCorrelation.c:1273:    pSPARC->Exc = Exc;
exchangeCorrelation.c:1284:    if(pSPARC->spin_typ == 0) { // spin unpolarized
exchangeCorrelation.c:1285:        if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0
exchangeCorrelation.c:1286:            || strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0) {
exchangeCorrelation.c:1289:        } else if (strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0) {
exchangeCorrelation.c:1297:        if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0
exchangeCorrelation.c:1298:            || strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0) {
exchangeCorrelation.c:1301:        } else if (strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0) {
exchangeCorrelation.c:1316:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
exchangeCorrelation.c:1320:    if (pSPARC->CyclixFlag) {
exchangeCorrelation.c:1321:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1322:            Exc += electronDens[i] * pSPARC->e_xc[i] * pSPARC->Intgwt_phi[i]; 
exchangeCorrelation.c:1325:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1327:            Exc += electronDens[i] * pSPARC->e_xc[i]; 
exchangeCorrelation.c:1330:        Exc *= pSPARC->dV;
exchangeCorrelation.c:1332:    MPI_Allreduce(MPI_IN_PLACE, &Exc, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
exchangeCorrelation.c:1333:    pSPARC->Exc = Exc;
exchangeCorrelation.c:1342:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
exchangeCorrelation.c:1347:    if (pSPARC->CyclixFlag) {
exchangeCorrelation.c:1348:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1349:            Exc += electronDens[i] * pSPARC->e_xc[i] * pSPARC->Intgwt_phi[i]; 
exchangeCorrelation.c:1352:        for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1354:            Exc += electronDens[i] * pSPARC->e_xc[i]; 
exchangeCorrelation.c:1357:        Exc *= pSPARC->dV;
exchangeCorrelation.c:1360:    MPI_Allreduce(MPI_IN_PLACE, &Exc, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
exchangeCorrelation.c:1361:    pSPARC->Exc = Exc;
exchangeCorrelation.c:1802:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
exchangeCorrelation.c:1808:    sz_rho = pSPARC->Nd_d * (pSPARC->Nspden/2*2+1);
exchangeCorrelation.c:1811:        rho[i] = pSPARC->electronDens[i];
exchangeCorrelation.c:1813:        if (pSPARC->NLCC_flag)
exchangeCorrelation.c:1814:            rho[i] += pSPARC->electronDens_core[i];
exchangeCorrelation.c:1815:        if(rho[i] < pSPARC->xc_rhotol)
exchangeCorrelation.c:1816:            rho[i] = pSPARC->xc_rhotol;
exchangeCorrelation.c:1819:    for (i = 0; i < pSPARC->Nd_d; i++) {
exchangeCorrelation.c:1820:        pSPARC->ExcRho[i] = pSPARC->e_xc[i] * rho[i];
exchangeCorrelation.c:1826:    for (i = 0; i < pSPARC->Nd_d; i++)
exchangeCorrelation.c:1827:        Exc += pSPARC->ExcRho[i];
exchangeCorrelation.c:1828:    MPI_Allreduce(MPI_IN_PLACE, &Exc, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
exchangeCorrelation.c:1829:    Exc *= pSPARC->dV;
finalization.c:52:    if (pSPARC->SQFlag == 1) {
finalization.c:54:    } else if (pSPARC->OFDFTFlag == 1) {
finalization.c:64:        output_fp = fopen(pSPARC->OutFilename,"a");
finalization.c:66:            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
finalization.c:72:        t_wall = t_end - pSPARC->time_start;
finalization.c:102:    if (pSPARC->isGammaPoint && pSPARC->kptcomm_topo != MPI_COMM_NULL) 
finalization.c:103:        free(pSPARC->Lanczos_x0);
finalization.c:105:    if (pSPARC->isGammaPoint != 1 && pSPARC->kptcomm_topo != MPI_COMM_NULL) 
finalization.c:106:        free(pSPARC->Lanczos_x0_complex);    
finalization.c:108:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
finalization.c:109:        free(pSPARC->electronDens_at);
finalization.c:110:        free(pSPARC->electronDens_core);
finalization.c:111:        free(pSPARC->electronDens);
finalization.c:112:        free(pSPARC->psdChrgDens);
finalization.c:113:        free(pSPARC->psdChrgDens_ref);
finalization.c:114:        free(pSPARC->Vc);
finalization.c:115:        free(pSPARC->XCPotential);
finalization.c:116:        free(pSPARC->e_xc);
finalization.c:117:        if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0|| strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0
finalization.c:118:            || strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0 || strcmp(pSPARC->XC,"SCAN") == 0
finalization.c:119:            || strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0){
finalization.c:120:            free(pSPARC->Dxcdgrho);
finalization.c:122:        free(pSPARC->elecstPotential);
finalization.c:123:        free(pSPARC->Veff_loc_dmcomm_phi);
finalization.c:124:        free(pSPARC->mixing_hist_xk);
finalization.c:125:        free(pSPARC->mixing_hist_fk);
finalization.c:126:        free(pSPARC->mixing_hist_fkm1);
finalization.c:127:        free(pSPARC->mixing_hist_xkm1);
finalization.c:128:        free(pSPARC->mixing_hist_Xk);
finalization.c:129:        free(pSPARC->mixing_hist_Fk);
finalization.c:132:        if (pSPARC->scf_err_type == 1) {
finalization.c:133:            free(pSPARC->rho_dmcomm_phi_in);
finalization.c:134:            free(pSPARC->phi_dmcomm_phi_in);
finalization.c:138:        if (pSPARC->MixingVariable == 0) { 
finalization.c:139:            free(pSPARC->Veff_loc_dmcomm_phi_in);
finalization.c:141:        free(pSPARC->mixing_hist_Pfk);
finalization.c:142:        //free(pSPARC->forces);
finalization.c:144:        if(pSPARC->MDFlag == 1 || pSPARC->RelaxFlag == 1 || pSPARC->RelaxFlag == 3){
finalization.c:145:            free(pSPARC->delectronDens);
finalization.c:146:            free(pSPARC->delectronDens_0dt);
finalization.c:147:            free(pSPARC->delectronDens_1dt);
finalization.c:148:            free(pSPARC->delectronDens_2dt);
finalization.c:149:            free(pSPARC->atom_pos_nm);
finalization.c:150:            free(pSPARC->atom_pos_0dt);
finalization.c:151:            free(pSPARC->atom_pos_1dt);
finalization.c:152:            free(pSPARC->atom_pos_2dt);
finalization.c:156:    if (pSPARC->isGammaPoint){
finalization.c:157:        if (pSPARC->dmcomm != MPI_COMM_NULL) {
finalization.c:158:            free(pSPARC->Xorb);
finalization.c:159:            free(pSPARC->Yorb);
finalization.c:162:        if (pSPARC->dmcomm != MPI_COMM_NULL) {
finalization.c:163:            free(pSPARC->Xorb_kpt);
finalization.c:164:            free(pSPARC->Yorb_kpt);
finalization.c:168:    if (pSPARC->PrintEnergyDensFlag == 1) {
finalization.c:169:        free(pSPARC->ExcRho);
finalization.c:170:        free(pSPARC->KineticRho);
finalization.c:171:        if (pSPARC->usefock > 0) {
finalization.c:172:            free(pSPARC->ExxRho);
finalization.c:173:            free(pSPARC->ExxRho_approx);
finalization.c:178:    if (pSPARC->isGammaPoint) {
finalization.c:179:        free(pSPARC->Xorb_BLCYC);
finalization.c:180:        free(pSPARC->Yorb_BLCYC);
finalization.c:181:        free(pSPARC->Hp);
finalization.c:182:        free(pSPARC->Mp);
finalization.c:183:        free(pSPARC->Q);
finalization.c:184:        if (pSPARC->CyclixFlag) {
finalization.c:185:            free(pSPARC->lambda_temp1);
finalization.c:186:            free(pSPARC->lambda_temp2);
finalization.c:187:            free(pSPARC->lambda_temp3);
finalization.c:188:            free(pSPARC->vl);
finalization.c:189:            free(pSPARC->vr);
finalization.c:192:        free(pSPARC->Xorb_BLCYC_kpt);
finalization.c:193:        free(pSPARC->Yorb_BLCYC_kpt);
finalization.c:194:        free(pSPARC->Hp_kpt);
finalization.c:195:        free(pSPARC->Mp_kpt);
finalization.c:196:        free(pSPARC->Q_kpt);
finalization.c:197:        if (pSPARC->CyclixFlag) {
finalization.c:198:            free(pSPARC->lambda_temp1_kpt);
finalization.c:199:            free(pSPARC->lambda_temp2_kpt);
finalization.c:200:            free(pSPARC->vl_kpt);
finalization.c:201:            free(pSPARC->vr_kpt);
finalization.c:206:    free(pSPARC->forces);
finalization.c:207:    free(pSPARC->lambda);
finalization.c:208:    free(pSPARC->tr_Hp_k);
finalization.c:209:    free(pSPARC->occ);
finalization.c:210:    if (pSPARC->CyclixFlag) {
finalization.c:211:        free (pSPARC->lambda_sorted);
finalization.c:212:        free (pSPARC->occ_sorted);
finalization.c:214:    if(pSPARC->spincomm_index != -1 && pSPARC->kptcomm_index != -1){
finalization.c:215:        free(pSPARC->eigmin);
finalization.c:216:        free(pSPARC->eigmax);
finalization.c:218:    free(pSPARC->FDweights_D1);
finalization.c:219:    free(pSPARC->FDweights_D2);
finalization.c:220:    free(pSPARC->localPsd);
finalization.c:221:    free(pSPARC->Mass);
finalization.c:222:    free(pSPARC->atomType);
finalization.c:223:    free(pSPARC->Znucl);
finalization.c:224:    free(pSPARC->nAtomv);
finalization.c:225:    free(pSPARC->psdName);
finalization.c:226:    free(pSPARC->atom_pos);
finalization.c:227:    free(pSPARC->IsFrac);
finalization.c:228:    free(pSPARC->IsSpin);
finalization.c:229:    free(pSPARC->mvAtmConstraint);
finalization.c:230:    free(pSPARC->atom_spin);
finalization.c:231:    free(pSPARC->D1_stencil_coeffs_x);
finalization.c:232:    free(pSPARC->D1_stencil_coeffs_y);
finalization.c:233:    free(pSPARC->D1_stencil_coeffs_z);
finalization.c:234:    free(pSPARC->D2_stencil_coeffs_x);
finalization.c:235:    free(pSPARC->D2_stencil_coeffs_y);
finalization.c:236:    free(pSPARC->D2_stencil_coeffs_z);
finalization.c:237:    if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20){
finalization.c:238:        free(pSPARC->D2_stencil_coeffs_xy);
finalization.c:239:        free(pSPARC->D2_stencil_coeffs_yz);
finalization.c:240:        free(pSPARC->D2_stencil_coeffs_xz);
finalization.c:241:        free(pSPARC->D1_stencil_coeffs_xy);
finalization.c:242:        free(pSPARC->D1_stencil_coeffs_yx);
finalization.c:243:        free(pSPARC->D1_stencil_coeffs_xz);
finalization.c:244:        free(pSPARC->D1_stencil_coeffs_zx);
finalization.c:245:        free(pSPARC->D1_stencil_coeffs_yz);
finalization.c:246:        free(pSPARC->D1_stencil_coeffs_zy);
finalization.c:249:    if (pSPARC->CyclixFlag) {
finalization.c:250:        free(pSPARC->D2_stencil_coeffs_yz); 
finalization.c:252:    free(pSPARC->CUTOFF_x);
finalization.c:253:    free(pSPARC->CUTOFF_y);
finalization.c:254:    free(pSPARC->CUTOFF_z); 
finalization.c:255:    free(pSPARC->IP_displ); 
finalization.c:256:    if (pSPARC->SOC_Flag) 
finalization.c:257:        free(pSPARC->IP_displ_SOC); 
finalization.c:260:    if (pSPARC->MixingPrecond == 2 || pSPARC->MixingPrecond == 3) {
finalization.c:261:        free(pSPARC->precondcoeff_a);
finalization.c:262:        free(pSPARC->precondcoeff_lambda_sqr);
finalization.c:266:    //if (pSPARC->Nkpts >= 1) {
finalization.c:267:        // if (pSPARC->BC != 1) {
finalization.c:268:            free(pSPARC->kptWts); 
finalization.c:269:            free(pSPARC->k1); 
finalization.c:270:            free(pSPARC->k2); 
finalization.c:271:            free(pSPARC->k3);
finalization.c:274:    if (pSPARC->usefock > 0) {
finalization.c:275:        free(pSPARC->k1_hf);
finalization.c:276:        free(pSPARC->k2_hf);
finalization.c:277:        free(pSPARC->k3_hf);
finalization.c:278:        free(pSPARC->kpthf_ind);
finalization.c:279:        free(pSPARC->kpthf_ind_red);
finalization.c:280:        free(pSPARC->kpthfred2kpthf);
finalization.c:281:        free(pSPARC->kpthf_pn);
finalization.c:282:        free(pSPARC->kpts_hf_red_list);
finalization.c:283:        free(pSPARC->k1_shift);
finalization.c:284:        free(pSPARC->k2_shift);
finalization.c:285:        free(pSPARC->k3_shift);
finalization.c:286:        free(pSPARC->Kptshift_map);
finalization.c:290:    if (pSPARC->Nkpts >= 1 && pSPARC->kptcomm_index != -1) {
finalization.c:291:        //if (pSPARC->BC != 1) {
finalization.c:292:            free(pSPARC->kptWts_loc); 
finalization.c:293:            free(pSPARC->k1_loc); 
finalization.c:294:            free(pSPARC->k2_loc); 
finalization.c:295:            free(pSPARC->k3_loc);
finalization.c:296:            //free(pSPARC->lambdakpt);
finalization.c:300:    for (i = 0; i < pSPARC->Ntypes; i++) {
finalization.c:301:        free(pSPARC->psd[i].rVloc);
finalization.c:302:        free(pSPARC->psd[i].UdV);
finalization.c:303:        free(pSPARC->psd[i].rhoIsoAtom);
finalization.c:304:        free(pSPARC->psd[i].RadialGrid);
finalization.c:305:        free(pSPARC->psd[i].SplinerVlocD);
finalization.c:306:        free(pSPARC->psd[i].SplineFitUdV);
finalization.c:307:        free(pSPARC->psd[i].SplineFitIsoAtomDen);
finalization.c:308:        free(pSPARC->psd[i].SplineRhocD);
finalization.c:309:        free(pSPARC->psd[i].rc);
finalization.c:310:        free(pSPARC->psd[i].Gamma);
finalization.c:311:        free(pSPARC->psd[i].rho_c_table);
finalization.c:312:        free(pSPARC->psd[i].ppl);
finalization.c:313:        if (pSPARC->psd[i].pspsoc == 1) {
finalization.c:314:            free(pSPARC->psd[i].ppl_soc);
finalization.c:315:            free(pSPARC->psd[i].Gamma_soc);
finalization.c:316:            free(pSPARC->psd[i].UdV_soc);
finalization.c:317:            free(pSPARC->psd[i].SplineFitUdV_soc);
finalization.c:321:    free(pSPARC->psd);
finalization.c:322:    if (pSPARC->dmcomm != MPI_COMM_NULL && pSPARC->bandcomm_index >= 0) {
finalization.c:323:        free(pSPARC->Veff_loc_dmcomm);
finalization.c:326:    //if (pSPARC->npkpt > 1 && pSPARC->kptcomm_topo != MPI_COMM_NULL) {
finalization.c:327:    free(pSPARC->Veff_loc_kptcomm_topo);
finalization.c:331:    if(pSPARC->MDFlag == 1) {
finalization.c:332:      free(pSPARC->ion_vel);
finalization.c:333:      free(pSPARC->ion_accel);
finalization.c:336:    if (pSPARC->CyclixFlag) {        
finalization.c:337:        free(pSPARC->Intgwt_kpttopo);    
finalization.c:338:        free(pSPARC->Intgwt_psi);
finalization.c:339:        free(pSPARC->Intgwt_phi);    
finalization.c:343:    Free_D2D_Target(&pSPARC->d2d_dmcomm_phi, &pSPARC->d2d_dmcomm, pSPARC->dmcomm_phi, 
finalization.c:344:                   (pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0 && pSPARC->bandcomm_index == 0) ? 
finalization.c:345:                   pSPARC->dmcomm : MPI_COMM_NULL);
finalization.c:348:    if (((pSPARC->chefsibound_flag == 0 || pSPARC->chefsibound_flag == 1) &&
finalization.c:349:            pSPARC->spincomm_index >=0 && pSPARC->kptcomm_index >= 0
finalization.c:350:            && (pSPARC->spin_typ != 0 || !pSPARC->is_phi_eq_kpt_topo || !pSPARC->isGammaPoint))
finalization.c:351:            || (pSPARC->usefock != 0) )
finalization.c:353:        Free_D2D_Target(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo,
finalization.c:354:                       pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL, pSPARC->kptcomm_topo);
finalization.c:357:    if (pSPARC->SQ3Flag == 1){
finalization.c:361:    if (pSPARC->d3Flag == 1) {
finalization.c:365:    if (pSPARC->vdWDFFlag != 0){
finalization.c:369:    if(pSPARC->mGGAflag == 1) {
finalization.c:373:    if (pSPARC->DDBP_Flag == 1) {
finalization.c:378:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
finalization.c:379:        if (pSPARC->cell_typ != 0) {
finalization.c:380:            MPI_Comm_free(&pSPARC->comm_dist_graph_phi);
finalization.c:382:        MPI_Comm_free(&pSPARC->dmcomm_phi);
finalization.c:384:    if (pSPARC->blacscomm != MPI_COMM_NULL) {
finalization.c:385:        MPI_Comm_free(&pSPARC->blacscomm);
finalization.c:388:    if (pSPARC->dmcomm != MPI_COMM_NULL) {
finalization.c:389:        if (pSPARC->cell_typ != 0) {
finalization.c:390:            MPI_Comm_free(&pSPARC->comm_dist_graph_psi);
finalization.c:392:        MPI_Comm_free(&pSPARC->dmcomm);
finalization.c:394:    if (pSPARC->bandcomm != MPI_COMM_NULL)
finalization.c:395:        MPI_Comm_free(&pSPARC->bandcomm);
finalization.c:396:    if (pSPARC->kptcomm_inter != MPI_COMM_NULL)
finalization.c:397:        MPI_Comm_free(&pSPARC->kptcomm_inter);
finalization.c:398:    if (pSPARC->kptcomm_topo != MPI_COMM_NULL) {
finalization.c:399:        if (pSPARC->cell_typ != 0) {
finalization.c:400:            MPI_Comm_free(&pSPARC->kptcomm_topo_dist_graph);
finalization.c:402:        MPI_Comm_free(&pSPARC->kptcomm_topo);
finalization.c:404:    if (pSPARC->kptcomm_topo_excl != MPI_COMM_NULL)
finalization.c:405:        MPI_Comm_free(&pSPARC->kptcomm_topo_excl);
finalization.c:406:    if (pSPARC->kptcomm_active != MPI_COMM_NULL)
finalization.c:407:        MPI_Comm_free(&pSPARC->kptcomm_active);
finalization.c:408:    if (pSPARC->kptcomm != MPI_COMM_NULL)
finalization.c:409:        MPI_Comm_free(&pSPARC->kptcomm);
finalization.c:410:    if (pSPARC->kpt_bridge_comm != MPI_COMM_NULL)
finalization.c:411:        MPI_Comm_free(&pSPARC->kpt_bridge_comm);
finalization.c:412:    if (pSPARC->spincomm != MPI_COMM_NULL)
finalization.c:413:        MPI_Comm_free(&pSPARC->spincomm);
finalization.c:414:    if (pSPARC->spin_bridge_comm != MPI_COMM_NULL)
finalization.c:415:        MPI_Comm_free(&pSPARC->spin_bridge_comm);     
finalization.c:418:    Cblacs_gridexit(pSPARC->ictxt_blacs);
finalization.c:419:    Cblacs_gridexit(pSPARC->ictxt_blacs_topo);
finalization.c:424:    if (pSPARC->isGammaPoint) 
finalization.c:432:    if (pSPARC->CS_Flag == 1) {
finalization.c:433:        free(pSPARC->CS_Qt);
finalization.c:450:    if (pSPARC->isGammaPoint){
finalization.c:452:        if (pSPARC->dmcomm != MPI_COMM_NULL && pSPARC->bandcomm_index >= 0) {
finalization.c:453:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
finalization.c:454:                // if (! pSPARC->nlocProj[ityp].nproj) continue;
finalization.c:455:                if (! pSPARC->nlocProj[ityp].nproj) {
finalization.c:456:                    free( pSPARC->nlocProj[ityp].Chi );                    
finalization.c:459:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
finalization.c:460:                    free( pSPARC->nlocProj[ityp].Chi[iat] );
finalization.c:462:                free( pSPARC->nlocProj[ityp].Chi );
finalization.c:464:                if (pSPARC->CyclixFlag) {
finalization.c:465:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
finalization.c:466:                        free( pSPARC->nlocProj[ityp].Chi_cyclix[iat] );
finalization.c:468:                    free( pSPARC->nlocProj[ityp].Chi_cyclix);
finalization.c:471:            free(pSPARC->nlocProj);
finalization.c:475:        if (pSPARC->kptcomm_topo != MPI_COMM_NULL && pSPARC->kptcomm_index >= 0) {
finalization.c:476:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
finalization.c:477:                // if (! pSPARC->nlocProj_kptcomm[ityp].nproj) continue;
finalization.c:478:                if (! pSPARC->nlocProj_kptcomm[ityp].nproj) {
finalization.c:479:                    free( pSPARC->nlocProj_kptcomm[ityp].Chi );                    
finalization.c:482:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc_kptcomm[ityp].n_atom; iat++) {
finalization.c:483:                    free( pSPARC->nlocProj_kptcomm[ityp].Chi[iat] );
finalization.c:485:                free( pSPARC->nlocProj_kptcomm[ityp].Chi );
finalization.c:487:                if (pSPARC->CyclixFlag) {
finalization.c:488:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc_kptcomm[ityp].n_atom; iat++) {
finalization.c:489:                        free( pSPARC->nlocProj_kptcomm[ityp].Chi_cyclix[iat] );
finalization.c:491:                    free( pSPARC->nlocProj_kptcomm[ityp].Chi_cyclix );
finalization.c:494:            free(pSPARC->nlocProj_kptcomm);
finalization.c:498:        if (pSPARC->dmcomm != MPI_COMM_NULL && pSPARC->bandcomm_index >= 0) {
finalization.c:499:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
finalization.c:500:                // if (! pSPARC->nlocProj[ityp].nproj) continue;
finalization.c:501:                if (! pSPARC->nlocProj[ityp].nproj) {
finalization.c:502:                    free(pSPARC->nlocProj[ityp].Chi_c);
finalization.c:505:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
finalization.c:506:                    free( pSPARC->nlocProj[ityp].Chi_c[iat] );
finalization.c:508:                free(pSPARC->nlocProj[ityp].Chi_c);
finalization.c:509:                if (pSPARC->CyclixFlag) {
finalization.c:510:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
finalization.c:511:                        free( pSPARC->nlocProj[ityp].Chi_c_cyclix[iat] );
finalization.c:513:                    free( pSPARC->nlocProj[ityp].Chi_c_cyclix);
finalization.c:516:            if (pSPARC->SOC_Flag == 1) {
finalization.c:517:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
finalization.c:518:                    // if (! pSPARC->nlocProj[ityp].nproj) continue;
finalization.c:519:                    if (! pSPARC->nlocProj[ityp].nprojso) continue;
finalization.c:520:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
finalization.c:521:                        free( pSPARC->nlocProj[ityp].Chiso[iat] );
finalization.c:523:                    free( pSPARC->nlocProj[ityp].Chiso );
finalization.c:525:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
finalization.c:526:                    // if (! pSPARC->nlocProj[ityp].nproj) continue;
finalization.c:527:                    if (! pSPARC->nlocProj[ityp].nprojso_ext) continue;
finalization.c:528:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
finalization.c:529:                        free( pSPARC->nlocProj[ityp].Chisowt0[iat] );
finalization.c:530:                        free( pSPARC->nlocProj[ityp].Chisowtl[iat] );
finalization.c:531:                        free( pSPARC->nlocProj[ityp].Chisowtnl[iat] );
finalization.c:533:                    free( pSPARC->nlocProj[ityp].Chisowt0 );
finalization.c:534:                    free( pSPARC->nlocProj[ityp].Chisowtl );
finalization.c:535:                    free( pSPARC->nlocProj[ityp].Chisowtnl );
finalization.c:538:            free(pSPARC->nlocProj);
finalization.c:542:        if (pSPARC->kptcomm_topo != MPI_COMM_NULL && pSPARC->kptcomm_index >= 0) {
finalization.c:543:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
finalization.c:544:                // if (! pSPARC->nlocProj_kptcomm[ityp].nproj) continue;
finalization.c:545:                if (! pSPARC->nlocProj_kptcomm[ityp].nproj) {
finalization.c:546:                    free(pSPARC->nlocProj_kptcomm[ityp].Chi_c);
finalization.c:549:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc_kptcomm[ityp].n_atom; iat++) {
finalization.c:550:                    free( pSPARC->nlocProj_kptcomm[ityp].Chi_c[iat] );
finalization.c:552:                free(pSPARC->nlocProj_kptcomm[ityp].Chi_c);
finalization.c:553:                if (pSPARC->CyclixFlag) {
finalization.c:554:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc_kptcomm[ityp].n_atom; iat++) {
finalization.c:555:                        free( pSPARC->nlocProj_kptcomm[ityp].Chi_c_cyclix[iat] );
finalization.c:557:                    free( pSPARC->nlocProj_kptcomm[ityp].Chi_c_cyclix);
finalization.c:560:            if (pSPARC->SOC_Flag == 1) {
finalization.c:561:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
finalization.c:562:                    // if (! pSPARC->nlocProj[ityp].nproj) continue;
finalization.c:563:                    if (! pSPARC->nlocProj_kptcomm[ityp].nprojso) continue;
finalization.c:564:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc_kptcomm[ityp].n_atom; iat++) {
finalization.c:565:                        free( pSPARC->nlocProj_kptcomm[ityp].Chiso[iat] );
finalization.c:567:                    free( pSPARC->nlocProj_kptcomm[ityp].Chiso );
finalization.c:569:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
finalization.c:570:                    // if (! pSPARC->nlocProj[ityp].nproj) continue;
finalization.c:571:                    if (! pSPARC->nlocProj_kptcomm[ityp].nprojso_ext) continue;
finalization.c:572:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc_kptcomm[ityp].n_atom; iat++) {
finalization.c:573:                        free( pSPARC->nlocProj_kptcomm[ityp].Chisowt0[iat] );
finalization.c:574:                        free( pSPARC->nlocProj_kptcomm[ityp].Chisowtl[iat] );
finalization.c:575:                        free( pSPARC->nlocProj_kptcomm[ityp].Chisowtnl[iat] );
finalization.c:577:                    free( pSPARC->nlocProj_kptcomm[ityp].Chisowt0 );
finalization.c:578:                    free( pSPARC->nlocProj_kptcomm[ityp].Chisowtl );
finalization.c:579:                    free( pSPARC->nlocProj_kptcomm[ityp].Chisowtnl );
finalization.c:582:            free(pSPARC->nlocProj_kptcomm);
finalization.c:587:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
finalization.c:588:        for (i = 0; i < pSPARC->Ntypes; i++) {
finalization.c:589:            free(pSPARC->Atom_Influence_local[i].coords);
finalization.c:590:            free(pSPARC->Atom_Influence_local[i].atom_spin);
finalization.c:591:            free(pSPARC->Atom_Influence_local[i].atom_index);
finalization.c:592:            free(pSPARC->Atom_Influence_local[i].xs);
finalization.c:593:            free(pSPARC->Atom_Influence_local[i].xe);
finalization.c:594:            free(pSPARC->Atom_Influence_local[i].ys);
finalization.c:595:            free(pSPARC->Atom_Influence_local[i].ye);
finalization.c:596:            free(pSPARC->Atom_Influence_local[i].zs);
finalization.c:597:            free(pSPARC->Atom_Influence_local[i].ze);
finalization.c:599:        free(pSPARC->Atom_Influence_local);
finalization.c:601:    if (pSPARC->dmcomm != MPI_COMM_NULL && pSPARC->bandcomm_index >= 0) {
finalization.c:602:        for (i = 0; i < pSPARC->Ntypes; i++) {
finalization.c:603:            if (pSPARC->Atom_Influence_nloc[i].n_atom > 0) {
finalization.c:604:                free(pSPARC->Atom_Influence_nloc[i].coords);
finalization.c:605:                free(pSPARC->Atom_Influence_nloc[i].atom_index);
finalization.c:606:                free(pSPARC->Atom_Influence_nloc[i].xs);
finalization.c:607:                free(pSPARC->Atom_Influence_nloc[i].xe);
finalization.c:608:                free(pSPARC->Atom_Influence_nloc[i].ys);
finalization.c:609:                free(pSPARC->Atom_Influence_nloc[i].ye);
finalization.c:610:                free(pSPARC->Atom_Influence_nloc[i].zs);
finalization.c:611:                free(pSPARC->Atom_Influence_nloc[i].ze);
finalization.c:612:                free(pSPARC->Atom_Influence_nloc[i].ndc);
finalization.c:613:                for (j = 0; j < pSPARC->Atom_Influence_nloc[i].n_atom; j++) {
finalization.c:614:                    free(pSPARC->Atom_Influence_nloc[i].grid_pos[j]);
finalization.c:616:                free(pSPARC->Atom_Influence_nloc[i].grid_pos);
finalization.c:619:        free(pSPARC->Atom_Influence_nloc);
finalization.c:621:    if (pSPARC->kptcomm_topo != MPI_COMM_NULL && pSPARC->kptcomm_index >= 0) {
finalization.c:622:        for (i = 0; i < pSPARC->Ntypes; i++) {
finalization.c:623:            if (pSPARC->Atom_Influence_nloc_kptcomm[i].n_atom > 0) {
finalization.c:624:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].coords);
finalization.c:625:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].atom_index);
finalization.c:626:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].xs);
finalization.c:627:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].xe);
finalization.c:628:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].ys);
finalization.c:629:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].ye);
finalization.c:630:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].zs);
finalization.c:631:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].ze);
finalization.c:632:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].ndc);
finalization.c:633:                for (j = 0; j < pSPARC->Atom_Influence_nloc_kptcomm[i].n_atom; j++) {
finalization.c:634:                    free(pSPARC->Atom_Influence_nloc_kptcomm[i].grid_pos[j]);
finalization.c:636:                free(pSPARC->Atom_Influence_nloc_kptcomm[i].grid_pos);
finalization.c:639:        free(pSPARC->Atom_Influence_nloc_kptcomm);
forces.c:62:    if (pSPARC->OFDFTFlag == 1) {
forces.c:75:    if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20){
forces.c:76:        for(i = 0; i < pSPARC->n_atom; i++){
forces.c:77:             nonCart2Cart_grad(pSPARC, pSPARC->forces + 3*i, pSPARC->forces + 3*i+1, pSPARC->forces + 3*i+2);
forces.c:82:    if (pSPARC->NLCC_flag) {
forces.c:84:        double *forces_xc = (double *)calloc(3*pSPARC->n_atom, sizeof(double));
forces.c:86:        for (i = 0; i < 3 * pSPARC->n_atom; i++) {
forces.c:87:            pSPARC->forces[i] += forces_xc[i];
forces.c:93:            for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:108:    if(pSPARC->RelaxFlag == 1 || pSPARC->MDFlag == 1) {
forces.c:109:        if (pSPARC->CyclixFlag) {
forces.c:112:            if (pSPARC->elecgs_Count > 0) {
forces.c:113:                for(i = 0; i < pSPARC->n_atom; i++){
forces.c:114:                    Cart2nonCart_coord(pSPARC, &pSPARC->atom_pos_nm[3*i], &pSPARC->atom_pos_nm[3*i+1], &pSPARC->atom_pos_nm[3*i+2]);
forces.c:116:                    ty = (pSPARC->atom_pos_nm[3*i+1] - pSPARC->atom_pos[3*i+1])/pSPARC->range_y;
forces.c:117:                    tz = (pSPARC->atom_pos_nm[3*i+2] - pSPARC->atom_pos[3*i+2])/pSPARC->range_z;
forces.c:119:                    fx = pSPARC->forces[3*i]; fy = pSPARC->forces[3*i+1];
forces.c:120:                    pSPARC->forces[3*i] = pSPARC->RotM_cyclix[0] * fx + pSPARC->RotM_cyclix[1] * fy;
forces.c:121:                    pSPARC->forces[3*i+1] = pSPARC->RotM_cyclix[3] * fx + pSPARC->RotM_cyclix[4] * fy;
forces.c:123:                    nonCart2Cart_coord(pSPARC, &pSPARC->atom_pos_nm[3*i], &pSPARC->atom_pos_nm[3*i+1], &pSPARC->atom_pos_nm[3*i+2]);
forces.c:127:        for(i = 0; i < 3*pSPARC->n_atom; i++)
forces.c:128:            pSPARC->forces[i] *= pSPARC->mvAtmConstraint[i];
forces.c:134:        for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:135:            printf("%18.14f %18.14f %18.14f\n",pSPARC->forces[i*3], pSPARC->forces[i*3+1], pSPARC->forces[i*3+2]);
forces.c:149:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; 
forces.c:154:    n_atom = pSPARC->n_atom;
forces.c:156:        shift_fx += pSPARC->forces[i*3];
forces.c:157:        shift_fy += pSPARC->forces[i*3+1];
forces.c:158:        shift_fz += pSPARC->forces[i*3+2];
forces.c:165:    if (pSPARC->CyclixFlag) {
forces.c:171:        pSPARC->forces[i*3] -= shift_fx;
forces.c:172:        pSPARC->forces[i*3+1] -= shift_fy;
forces.c:173:        pSPARC->forces[i*3+2] -= shift_fz;
forces.c:183:    if (pSPARC->CyclixFlag) {
forces.c:184:        if(pSPARC->isGammaPoint)
forces.c:189:        if (pSPARC->isGammaPoint) {
forces.c:190:            if (pSPARC->CS_Flag == 1) {
forces.c:192:            } else if (pSPARC->SQFlag == 1) {
forces.c:198:            if (pSPARC->Nspinor == 1)
forces.c:200:            else if (pSPARC->Nspinor == 2) 
forces.c:214:// 	int nspin = pSPARC->Nspin_spincomm;
forces.c:221://         beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
forces.c:222://         for (int ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:223://             //lmax = pSPARC->psd[ityp].lmax;
forces.c:224://             if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
forces.c:225://             for (int iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
forces.c:226://                 int ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat]; 
forces.c:228://                 int atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:234://                         // x_rc[n*ndc+i] = pSPARC->Xorb[n*DMnd+pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]];
forces.c:235://                         *(x_rc_ptr + i) = *(x_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:238://                 cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, pSPARC->dV, 
forces.c:239://                 	pSPARC->nlocProj[ityp].Chi[iat], ndc, x_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol, 
forces.c:240://                 	pSPARC->nlocProj[ityp].nproj); // multiply dV to get inner-product
forces.c:241://                 //cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, ncol, pSPARC->nlocProj[ityp].nproj, ndc, pSPARC->dV, x_rc, ndc, 
forces.c:242://                 //            pSPARC->nlocProj[ityp].Chi[iat], ndc, 1.0, alpha+pSPARC->IP_displ[atom_index]*ncol, ncol); // this calculates <Psi_n, Chi_Jlm>
forces.c:248://     if (pSPARC->npNd > 1) {
forces.c:249://         MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
forces.c:260:	int nspin = pSPARC->Nspin_spincomm;
forces.c:267:        beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
forces.c:268:        for (int ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:269:            //lmax = pSPARC->psd[ityp].lmax;
forces.c:270:            if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
forces.c:271:            for (int iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
forces.c:272:                int ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat]; 
forces.c:274:                int atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:281:                        // x_rc[n*ndc+i] = pSPARC->Xorb[n*DMnd+pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]];
forces.c:282:                        *(x_rc_ptr + i) = *(x_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:285:                cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol_local, ndc, pSPARC->dV, 
forces.c:286:                	pSPARC->nlocProj[ityp].Chi[iat], ndc, x_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol+pSPARC->nlocProj[ityp].nproj*n_start, 
forces.c:287:                	pSPARC->nlocProj[ityp].nproj); // multiply dV to get inner-product
forces.c:288:                //cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, ncol, pSPARC->nlocProj[ityp].nproj, ndc, pSPARC->dV, x_rc, ndc, 
forces.c:289:                //            pSPARC->nlocProj[ityp].Chi[iat], ndc, 1.0, alpha+pSPARC->IP_displ[atom_index]*ncol, ncol); // this calculates <Psi_n, Chi_Jlm>
forces.c:295:    if (pSPARC->npNd > 1) {
forces.c:296:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
forces.c:312:	int nspin = pSPARC->Nspin_spincomm;
forces.c:325:            // Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol_local, 0.0, Psi+spn_i*size_s+n_start*DMnd, 
forces.c:326:            // 	dPsi+n_start*DMnd, dim, pSPARC->dmcomm);
forces.c:327:            Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol_local, 0.0, Psi+spn_i*size_s+n_start*DMnd, 
forces.c:328:            	dPsi, dim, pSPARC->dmcomm);
forces.c:329:            beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (nspin * dim + count);
forces.c:330:            for (int ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:331:                //lmax = pSPARC->psd[ityp].lmax;
forces.c:332:                if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
forces.c:333:                for (int iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
forces.c:334:                    int ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat]; 
forces.c:336:                    int atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:345:                            // dx_rc[n*ndc+i] = pSPARC->Yorb[n*DMnd+pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]];
forces.c:346:                            *(dx_rc_ptr + i) = *(dx_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:354:                    cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol_local, ndc, 1.0, 
forces.c:355:                    			pSPARC->nlocProj[ityp].Chi[iat], ndc, dx_rc, ndc, 1.0, 
forces.c:356:                    			beta+pSPARC->IP_displ[atom_index]*ncol+pSPARC->nlocProj[ityp].nproj*n_start, 
forces.c:357:                    			pSPARC->nlocProj[ityp].nproj); 
forces.c:366:    if (pSPARC->npNd > 1) {
forces.c:367:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 3, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
forces.c:375:    if (pSPARC->spincomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
forces.c:381:    nspin = pSPARC->Nspin_spincomm; // number of spin in my spin communicator
forces.c:382:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
forces.c:383:    DMnd = pSPARC->Nd_d_dmcomm;
forces.c:389:    force_nloc = (double *)calloc(3 * pSPARC->n_atom, sizeof(double));
forces.c:390:    double *alpha_1 = (double *)calloc(pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 4, sizeof(double));
forces.c:391:    double *alpha_2 = (double *)calloc(pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 4, sizeof(double));
forces.c:396:    int Ns = pSPARC->Nstates;
forces.c:397:    int Nt = pSPARC->CS_Nt;
forces.c:403:    nonlocal_forces_intPsiTChi(pSPARC, alpha_1, pSPARC->Xorb, DMnd, ncol, 0, ncol-1);
forces.c:408:    nonlocal_forces_intChiTdPsi(pSPARC,alpha_1+pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin, pSPARC->Xorb, DMnd, ncol, 0, ncol-1);
forces.c:414:    int n_start_local = max(pSPARC->band_start_indx, Ns-Nt) - pSPARC->band_start_indx;
forces.c:415:    // int n_end_local   = min(pSPARC->band_end_indx, Ns-1) - pSPARC->band_start_indx;
forces.c:416:    //nonlocal_forces_intPsiTChi(pSPARC, alpha_2, pSPARC->Yorb, DMnd, ncol, 0, ncol-1); // TODO: set correct nstart and nend
forces.c:418:    nonlocal_forces_intPsiTChi(pSPARC, alpha_2, pSPARC->Yorb, DMnd, ncol, n_start_local, ncol-1); 
forces.c:423:    nonlocal_forces_intChiTdPsi(pSPARC,alpha_2+pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin, pSPARC->Yorb, DMnd, ncol, n_start_local, ncol-1);
forces.c:429:    //     beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
forces.c:430:    //     for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:431:    //         //lmax = pSPARC->psd[ityp].lmax;
forces.c:432:    //         if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
forces.c:433:    //         for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
forces.c:434:    //             ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat]; 
forces.c:436:    //             atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:439:    //                 x_ptr = pSPARC->Xorb + spn_i * size_s + n * DMnd;
forces.c:442:    //                     // x_rc[n*ndc+i] = pSPARC->Xorb[n*DMnd+pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]];
forces.c:443:    //                     *(x_rc_ptr + i) = *(x_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:446:    //             cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, pSPARC->dV, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
forces.c:447:    //                         x_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); // multiply dV to get inner-product
forces.c:448:    //             //cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, ncol, pSPARC->nlocProj[ityp].nproj, ndc, pSPARC->dV, x_rc, ndc, 
forces.c:449:    //             //            pSPARC->nlocProj[ityp].Chi[iat], ndc, 1.0, alpha+pSPARC->IP_displ[atom_index]*ncol, ncol); // this calculates <Psi_n, Chi_Jlm>
forces.c:463:    //         //Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb+spn_i*size_s, pSPARC->Yorb+spn_i*size_s, dim, pSPARC->dmcomm);
forces.c:464:    //         Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb+spn_i*size_s, dPsi, dim, pSPARC->dmcomm);
forces.c:465:    //         beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (nspin * (dim + 1) + count);
forces.c:466:    //         for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:467:    //             //lmax = pSPARC->psd[ityp].lmax;
forces.c:468:    //             if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
forces.c:469:    //             for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
forces.c:470:    //                 ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat]; 
forces.c:472:    //                 atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:477:    //                         // dx_rc[n*ndc+i] = pSPARC->Yorb[n*DMnd+pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]];
forces.c:478:    //                         *(dx_rc_ptr + i) = *(dx_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:486:    //                 cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, 1.0, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
forces.c:487:    //                             dx_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); 
forces.c:496:    // if (pSPARC->npNd > 1) {
forces.c:497:    //     MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 4, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
forces.c:501:    double spn_fac = pSPARC->occfac * 2.0;
forces.c:505:    beta_x = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin;
forces.c:506:    beta_y = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 2;
forces.c:507:    beta_z = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 3;
forces.c:511:        for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:512:            int lloc = pSPARC->localPsd[ityp];
forces.c:513:            lmax = pSPARC->psd[ityp].lmax;
forces.c:514:            for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
forces.c:516:                //alpha_J = alpha + pSPARC->IP_displ[atom_index]*ncol;
forces.c:517:                //beta_Jx = beta_x + pSPARC->IP_displ[atom_index]*ncol;
forces.c:518:                //beta_Jy = beta_y + pSPARC->IP_displ[atom_index]*ncol;
forces.c:519:                //beta_Jz = beta_z + pSPARC->IP_displ[atom_index]*ncol;
forces.c:520:                for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
forces.c:521:                    //g_nk = pSPARC->occ[spn_i*pSPARC->Nstates+n];
forces.c:528:                            ldispl += pSPARC->psd[ityp].ppl[l];
forces.c:531:                        for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
forces.c:539:                            val2_x += val_x * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:540:                            val2_y += val_y * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:541:                            val2_z += val_z * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:543:                        ldispl += pSPARC->psd[ityp].ppl[l];
forces.c:558:    double *force_nloc_FullOcc = (double*)calloc(pSPARC->n_atom * 3 , sizeof(double));
forces.c:560:    	memcpy(force_nloc_FullOcc,force_nloc,pSPARC->n_atom*3*sizeof(double));
forces.c:562:        for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:569:    beta_x = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin;
forces.c:570:    beta_y = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 2;
forces.c:571:    beta_z = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 3;
forces.c:575:        for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:576:            int lloc = pSPARC->localPsd[ityp];
forces.c:577:            lmax = pSPARC->psd[ityp].lmax;
forces.c:578:            for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
forces.c:580:                //alpha_J = alpha + pSPARC->IP_displ[atom_index]*ncol;
forces.c:581:                //beta_Jx = beta_x + pSPARC->IP_displ[atom_index]*ncol;
forces.c:582:                //beta_Jy = beta_y + pSPARC->IP_displ[atom_index]*ncol;
forces.c:583:                //beta_Jz = beta_z + pSPARC->IP_displ[atom_index]*ncol;
forces.c:584:                for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
forces.c:585:                    g_nk = -(1.0-pSPARC->occ[spn_i*pSPARC->Nstates+n]);
forces.c:592:                            ldispl += pSPARC->psd[ityp].ppl[l];
forces.c:595:                        for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
forces.c:603:                            val2_x += val_x * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:604:                            val2_y += val_y * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:605:                            val2_z += val_z * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:607:                        ldispl += pSPARC->psd[ityp].ppl[l];
forces.c:626:    if (pSPARC->npspin > 1) {
forces.c:627:        // if (pSPARC->spincomm_index == 0)
forces.c:628:        //     MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
forces.c:630:        //     MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
forces.c:631:        MPI_Allreduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, pSPARC->spin_bridge_comm);
forces.c:635:    if (pSPARC->npband > 1) {
forces.c:636:        // if (pSPARC->bandcomm_index == 0)
forces.c:637:        //     MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
forces.c:639:        //     MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
forces.c:640:        MPI_Allreduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, pSPARC->blacscomm);
forces.c:646:    MPI_Allreduce(MPI_IN_PLACE, force_nloc_FullOcc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, pSPARC->blacscomm);
forces.c:649:        double *force_nloc_CompPartOcc = (double*)calloc(pSPARC->n_atom * 3 , sizeof(double));
forces.c:650:        for (i = 0; i < pSPARC->n_atom*3; i++) {
forces.c:653:        for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:662:        for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:668:        for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:669:            printf("%18.14f %18.14f %18.14f\n", pSPARC->forces[i*3], pSPARC->forces[i*3+1], pSPARC->forces[i*3+2]);
forces.c:675:        for (i = 0; i < 3 * pSPARC->n_atom; i++) {
forces.c:676:            pSPARC->forces[i] += force_nloc[i];
forces.c:691:    if (pSPARC->spincomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
forces.c:696:    nspin = pSPARC->Nspin_spincomm; // number of spin in my spin communicator
forces.c:697:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
forces.c:698:    DMnd = pSPARC->Nd_d_dmcomm;
forces.c:704:    force_nloc = (double *)calloc(3 * pSPARC->n_atom, sizeof(double));
forces.c:705:    alpha = (double *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 4, sizeof(double));
forces.c:711:        beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
forces.c:712:        for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:713:            //lmax = pSPARC->psd[ityp].lmax;
forces.c:714:            if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
forces.c:715:            for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
forces.c:716:                ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat]; 
forces.c:718:                atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:721:                    x_ptr = pSPARC->Xorb + spn_i * size_s + n * DMnd;
forces.c:724:                        // x_rc[n*ndc+i] = pSPARC->Xorb[n*DMnd+pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]];
forces.c:725:                        *(x_rc_ptr + i) = *(x_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:728:                cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, pSPARC->dV, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
forces.c:729:                            x_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); // multiply dV to get inner-product
forces.c:730:                //cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, ncol, pSPARC->nlocProj[ityp].nproj, ndc, pSPARC->dV, x_rc, ndc, 
forces.c:731:                //            pSPARC->nlocProj[ityp].Chi[iat], ndc, 1.0, alpha+pSPARC->IP_displ[atom_index]*ncol, ncol); // this calculates <Psi_n, Chi_Jlm>
forces.c:737:                //     Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb, pSPARC->Yorb, dim, pSPARC->dmcomm);
forces.c:738:                //     beta = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*(dim+1);
forces.c:739:                //     atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:741:                //         dx_ptr = pSPARC->Yorb + n * DMnd;
forces.c:744:                //             // dx_rc[n*ndc+i] = pSPARC->Yorb[n*DMnd+pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]];
forces.c:745:                //             *(dx_rc_ptr + i) = *(dx_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:753:                //     cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, 1.0, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
forces.c:754:                //     dx_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); 
forces.c:763:    double *XorY = (pSPARC->SQ3Flag == 0) ? pSPARC->Xorb : pSPARC->Yorb;
forces.c:764:    double *YorZ = (pSPARC->SQ3Flag == 0) ? pSPARC->Yorb : pSPARC->Zorb;
forces.c:769:            Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, XorY+spn_i*size_s, YorZ+spn_i*size_s, dim, pSPARC->dmcomm);
forces.c:770:            beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (nspin * (dim + 1) + count);
forces.c:771:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:772:                //lmax = pSPARC->psd[ityp].lmax;
forces.c:773:                if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
forces.c:774:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
forces.c:775:                    ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat]; 
forces.c:777:                    atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:782:                            // dx_rc[n*ndc+i] = pSPARC->Yorb[n*DMnd+pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]];
forces.c:783:                            *(dx_rc_ptr + i) = *(dx_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:791:                    cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, 1.0, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
forces.c:792:                                dx_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); 
forces.c:800:    if (pSPARC->npNd > 1) {
forces.c:801:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 4, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
forces.c:806:    beta_x = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin;
forces.c:807:    beta_y = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 2;
forces.c:808:    beta_z = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 3;
forces.c:815:        spn_fac = pSPARC->occfac * 2.0;
forces.c:816:        for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:817:            int lloc = pSPARC->localPsd[ityp];
forces.c:818:            lmax = pSPARC->psd[ityp].lmax;
forces.c:819:            for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
forces.c:821:                //alpha_J = alpha + pSPARC->IP_displ[atom_index]*ncol;
forces.c:822:                //beta_Jx = beta_x + pSPARC->IP_displ[atom_index]*ncol;
forces.c:823:                //beta_Jy = beta_y + pSPARC->IP_displ[atom_index]*ncol;
forces.c:824:                //beta_Jz = beta_z + pSPARC->IP_displ[atom_index]*ncol;
forces.c:825:                for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
forces.c:826:                    g_nk = (pSPARC->SQ3Flag == 0) ? pSPARC->occ[spn_i*pSPARC->Nstates+n] : 1;
forces.c:832:                            ldispl += pSPARC->psd[ityp].ppl[l];
forces.c:835:                        for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
forces.c:843:                            val2_x += val_x * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:844:                            val2_y += val_y * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:845:                            val2_z += val_z * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:847:                        ldispl += pSPARC->psd[ityp].ppl[l];
forces.c:863:    if (pSPARC->npspin > 1) {
forces.c:864:        if (pSPARC->spincomm_index == 0)
forces.c:865:            MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
forces.c:867:            MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
forces.c:871:    if (pSPARC->npband > 1) {
forces.c:872:        if (pSPARC->bandcomm_index == 0)
forces.c:873:            MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
forces.c:875:            MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
forces.c:881:        for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:887:        for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:888:            printf("%18.14f %18.14f %18.14f\n", pSPARC->forces[i*3], pSPARC->forces[i*3+1], pSPARC->forces[i*3+2]);
forces.c:894:        for (i = 0; i < 3 * pSPARC->n_atom; i++) {
forces.c:895:            pSPARC->forces[i] += force_nloc[i];
forces.c:909:    if (pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
forces.c:914:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
forces.c:915:    DMnd = pSPARC->Nd_d_dmcomm;
forces.c:916:    Nk = pSPARC->Nkpts_kptcomm;
forces.c:917:    nspin = pSPARC->Nspin_spincomm;
forces.c:923:    force_nloc = (double *)calloc(3 * pSPARC->n_atom, sizeof(double));
forces.c:924:    alpha = (double complex *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * 4, sizeof(double complex));
forces.c:925:    double Lx = pSPARC->range_x;
forces.c:926:    double Ly = pSPARC->range_y;
forces.c:927:    double Lz = pSPARC->range_z;
forces.c:937:            k1 = pSPARC->k1_loc[kpt];
forces.c:938:            k2 = pSPARC->k2_loc[kpt];
forces.c:939:            k3 = pSPARC->k3_loc[kpt];
forces.c:940:            beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
forces.c:941:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:942:                //lmax = pSPARC->psd[ityp].lmax;
forces.c:943:                if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
forces.c:944:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
forces.c:945:                    x0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3  ];
forces.c:946:                    y0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
forces.c:947:                    z0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
forces.c:950:                    a = bloch_fac * pSPARC->dV;
forces.c:952:                    ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
forces.c:954:                    atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:957:                        x_ptr = pSPARC->Xorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd;
forces.c:960:                            // x_rc[n*ndc+i] = pSPARC->Xorb[n*DMnd+pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]];
forces.c:961:                            //printf("grid_pos % d\n", pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:962:                            *(x_rc_ptr + i) = conj(*(x_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]));
forces.c:965:                    cblas_zgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, &a, pSPARC->nlocProj[ityp].Chi_c[iat], ndc, 
forces.c:966:                                x_rc, ndc, &b, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); // multiply dV to get inner-product
forces.c:967:                    //cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, ncol, pSPARC->nlocProj[ityp].nproj, ndc, pSPARC->dV, x_rc, ndc, 
forces.c:968:                    //            pSPARC->nlocProj[ityp].Chi[iat], ndc, 1.0, alpha+pSPARC->IP_displ[atom_index]*ncol, ncol); // this calculates <Psi_n, Chi_Jlm>
forces.c:981:                k1 = pSPARC->k1_loc[kpt];
forces.c:982:                k2 = pSPARC->k2_loc[kpt];
forces.c:983:                k3 = pSPARC->k3_loc[kpt];
forces.c:986:                Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb_kpt+spn_i*size_s+kpt*size_k, pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k, dim, &kpt_vec, pSPARC->dmcomm);
forces.c:987:                beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (Nk * nspin * (dim + 1) + count);
forces.c:988:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:989:                    //lmax = pSPARC->psd[ityp].lmax;
forces.c:990:                    if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
forces.c:991:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
forces.c:992:                        x0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3  ];
forces.c:993:                        y0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
forces.c:994:                        z0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
forces.c:998:                        ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat]; 
forces.c:1000:                        atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
forces.c:1003:                            dx_ptr = pSPARC->Yorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd;
forces.c:1006:                                *(dx_rc_ptr + i) = *(dx_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
forces.c:1015:                        cblas_zgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, &bloch_fac, pSPARC->nlocProj[ityp].Chi_c[iat], ndc, 
forces.c:1016:                                    dx_rc, ndc, &b, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj);   
forces.c:1026:    if (pSPARC->npNd > 1) {
forces.c:1027:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * 4, MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
forces.c:1032:    int Ns = pSPARC->Nstates;
forces.c:1034:    beta_x = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin;
forces.c:1035:    beta_y = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 2;
forces.c:1036:    beta_z = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 3;
forces.c:1041:            kpt_spn_fac = pSPARC->occfac * 2.0 * pSPARC->kptWts_loc[k] / pSPARC->Nkpts;
forces.c:1043:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:1044:                int lloc = pSPARC->localPsd[ityp];
forces.c:1045:                lmax = pSPARC->psd[ityp].lmax;
forces.c:1046:                for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
forces.c:1048:                    for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
forces.c:1049:                        g_nk = pSPARC->occ[spn_i*Nk*Ns+k*Ns+n];
forces.c:1055:                                ldispl += pSPARC->psd[ityp].ppl[l];
forces.c:1058:                            for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
forces.c:1066:                                val2_x += val_x * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:1067:                                val2_y += val_y * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:1068:                                val2_z += val_z * pSPARC->psd[ityp].Gamma[ldispl+np];
forces.c:1070:                            ldispl += pSPARC->psd[ityp].ppl[l];
forces.c:1086:    if (pSPARC->npspin > 1) {
forces.c:1087:        if (pSPARC->spincomm_index == 0)
forces.c:1088:            MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
forces.c:1090:            MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
forces.c:1094:    if (pSPARC->npkpt > 1) {
forces.c:1096:        // if (pSPARC->kptcomm_index == 0)
forces.c:1097:        //     MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
forces.c:1099:        //     MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
forces.c:1100:        MPI_Allreduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
forces.c:1104:    if (pSPARC->npband > 1) {
forces.c:1105:        if (pSPARC->bandcomm_index == 0)
forces.c:1106:            MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
forces.c:1108:            MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
forces.c:1114:        for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:1120:        for (i = 0; i < pSPARC->n_atom; i++) {
forces.c:1121:            printf("%18.14f %18.14f %18.14f\n", pSPARC->forces[i*3], pSPARC->forces[i*3+1], pSPARC->forces[i*3+2]);
forces.c:1127:        for (i = 0; i < 3 * pSPARC->n_atom; i++) {
forces.c:1128:            pSPARC->forces[i] += force_nloc[i];
forces.c:1143:    if (pSPARC->CyclixFlag) {
forces.c:1157:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return; // consider broadcasting the force components or force residual
forces.c:1169:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank);
forces.c:1176:    FDn = pSPARC->order / 2;
forces.c:1177:    w2_diag = (pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_y[0] + pSPARC->D2_stencil_coeffs_z[0]) * -inv_4PI;
forces.c:1178:    if(pSPARC->cell_typ == 0){
forces.c:1188:    // Nx = pSPARC->Nx; Ny = pSPARC->Ny; Nz = pSPARC->Nz;
forces.c:1189:    DMnx = pSPARC->Nx_d; DMny = pSPARC->Ny_d; // DMnz = pSPARC->Nz_d;
forces.c:1190:    DMnd = pSPARC->Nd_d;
forces.c:1193:    for (i = 0; i < 3 * pSPARC->n_atom; i++) {
forces.c:1194:        pSPARC->forces[i] = 0.0;
forces.c:1215:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->elecstPotential, Dphi_x, 0, pSPARC->dmcomm_phi);
forces.c:1216:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->elecstPotential, Dphi_y, 1, pSPARC->dmcomm_phi);
forces.c:1217:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->elecstPotential, Dphi_z, 2, pSPARC->dmcomm_phi);
forces.c:1218:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->Vc, DVc_x, 0, pSPARC->dmcomm_phi);
forces.c:1219:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->Vc, DVc_y, 1, pSPARC->dmcomm_phi);
forces.c:1220:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->Vc, DVc_z, 2, pSPARC->dmcomm_phi);
forces.c:1222:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:1223:        rchrg = pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1];
forces.c:1224:        for (iat = 0; iat < pSPARC->Atom_Influence_local[ityp].n_atom; iat++) {
forces.c:1226:            x0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3];
forces.c:1227:            y0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 1];
forces.c:1228:            z0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 2];
forces.c:1230:            atom_index = pSPARC->Atom_Influence_local[ityp].atom_index[iat];
forces.c:1233:            nx = pSPARC->Atom_Influence_local[ityp].xe[iat] - pSPARC->Atom_Influence_local[ityp].xs[iat] + 1;
forces.c:1234:            ny = pSPARC->Atom_Influence_local[ityp].ye[iat] - pSPARC->Atom_Influence_local[ityp].ys[iat] + 1;
forces.c:1235:            nz = pSPARC->Atom_Influence_local[ityp].ze[iat] - pSPARC->Atom_Influence_local[ityp].zs[iat] + 1;
forces.c:1238:            nxp = nx + pSPARC->order;
forces.c:1239:            nyp = ny + pSPARC->order;
forces.c:1240:            nzp = nz + pSPARC->order;
forces.c:1251:            //nx2p = nxp + pSPARC->order;
forces.c:1252:            //ny2p = nyp + pSPARC->order;
forces.c:1253:            //nz2p = nzp + pSPARC->order;
forces.c:1264:            icor = pSPARC->Atom_Influence_local[ityp].xs[iat] - FDn;
forces.c:1265:            jcor = pSPARC->Atom_Influence_local[ityp].ys[iat] - FDn;
forces.c:1266:            kcor = pSPARC->Atom_Influence_local[ityp].zs[iat] - FDn;
forces.c:1269:            x0_i_shift =  x0_i - pSPARC->delta_x * icor; 
forces.c:1270:            y0_i_shift =  y0_i - pSPARC->delta_y * jcor;
forces.c:1271:            z0_i_shift =  z0_i - pSPARC->delta_z * kcor;
forces.c:1275:            if(pSPARC->cell_typ == 0) {    
forces.c:1277:                    z = k * pSPARC->delta_z - z0_i_shift; 
forces.c:1279:                        y = j * pSPARC->delta_y - y0_i_shift;
forces.c:1281:                            x = i * pSPARC->delta_x - x0_i_shift;
forces.c:1290:                    z = k * pSPARC->delta_z - z0_i_shift; 
forces.c:1292:                        y = j * pSPARC->delta_y - y0_i_shift;
forces.c:1294:                            x = i * pSPARC->delta_x - x0_i_shift;
forces.c:1295:                            R[count] = sqrt(pSPARC->metricT[0] * (x*x) + pSPARC->metricT[1] * (x*y) + pSPARC->metricT[2] * (x*z) 
forces.c:1296:                                          + pSPARC->metricT[4] * (y*y) + pSPARC->metricT[5] * (y*z) + pSPARC->metricT[8] * (z*z) );
forces.c:1312:            Calculate_Pseudopot_Ref(R, nd_ex, pSPARC->REFERENCE_CUTOFF, -pSPARC->Znucl[ityp], VJ_ref);
forces.c:1331:                    VJ[i] = -pSPARC->Znucl[ityp] / R[i];
forces.c:1339:            if (pSPARC->psd[ityp].is_r_uniform == 1) {
forces.c:1340:            	SplineInterpUniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
forces.c:1341:				                    R_interp, VJ_interp, count_interp, pSPARC->psd[ityp].SplinerVlocD); 
forces.c:1343:				// SortSplineInterp(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
forces.c:1344:				//                  R_interp, VJ_interp, count_interp, pSPARC->psd[ityp].SplinerVlocD); 
forces.c:1345:				SplineInterpNonuniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
forces.c:1346:				                    R_interp, VJ_interp, count_interp, pSPARC->psd[ityp].SplinerVlocD); 
forces.c:1354:                    VJ[ind_interp[i]] = pSPARC->psd[ityp].Vloc_0;
forces.c:1375:            dK = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->DMVertices[4];
forces.c:1376:            dJ = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->DMVertices[2];
forces.c:1377:            dI = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->DMVertices[0];
forces.c:1410:                            DVcJ_x_val += (VcJ[ishift_p+p] - VcJ[ishift_p-p]) * pSPARC->D1_stencil_coeffs_x[p];
forces.c:1411:                            DVcJ_y_val += (VcJ[ishift_p+pshifty_ex[p]] - VcJ[ishift_p-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
forces.c:1412:                            DVcJ_z_val += (VcJ[ishift_p+pshiftz_ex[p]] - VcJ[ishift_p-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
forces.c:1415:                        double b_plus_b_ref = pSPARC->psdChrgDens[ishift_DM] + pSPARC->psdChrgDens_ref[ishift_DM];
forces.c:1428:            pSPARC->forces[atom_index*3  ] += (force_x + 0.5 * force_corr_x) * pSPARC->dV;
forces.c:1429:            pSPARC->forces[atom_index*3+1] += (force_y + 0.5 * force_corr_y) * pSPARC->dV;
forces.c:1430:            pSPARC->forces[atom_index*3+2] += (force_z + 0.5 * force_corr_z) * pSPARC->dV;
forces.c:1452:    MPI_Allreduce(MPI_IN_PLACE, pSPARC->forces, 3*pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
forces.c:1467:    const double *T = pSPARC->gradT;
forces.c:1511:    if (pSPARC->CyclixFlag)
forces.c:1522:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
forces.c:1524:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank);
forces.c:1539:    FDn = pSPARC->order / 2;
forces.c:1541:    DMnx = pSPARC->Nx_d;
forces.c:1542:    DMny = pSPARC->Ny_d;
forces.c:1558:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
forces.c:1559:        rchrg = pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1];
forces.c:1560:        for (iat = 0; iat < pSPARC->Atom_Influence_local[ityp].n_atom; iat++) {
forces.c:1562:            x0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3];
forces.c:1563:            y0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 1];
forces.c:1564:            z0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 2];
forces.c:1567:            int atom_index = pSPARC->Atom_Influence_local[ityp].atom_index[iat];
forces.c:1570:            nx = pSPARC->Atom_Influence_local[ityp].xe[iat] - pSPARC->Atom_Influence_local[ityp].xs[iat] + 1;
forces.c:1571:            ny = pSPARC->Atom_Influence_local[ityp].ye[iat] - pSPARC->Atom_Influence_local[ityp].ys[iat] + 1;
forces.c:1572:            nz = pSPARC->Atom_Influence_local[ityp].ze[iat] - pSPARC->Atom_Influence_local[ityp].zs[iat] + 1;
forces.c:1575:            nxp = nx + pSPARC->order;
forces.c:1576:            nyp = ny + pSPARC->order;
forces.c:1577:            nzp = nz + pSPARC->order;
forces.c:1580:            nx2p = nxp + pSPARC->order;
forces.c:1581:            ny2p = nyp + pSPARC->order;
forces.c:1582:            nz2p = nzp + pSPARC->order;
forces.c:1590:            icor = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->order;
forces.c:1591:            jcor = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->order;
forces.c:1592:            kcor = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->order;
forces.c:1595:            x0_i_shift =  x0_i - pSPARC->delta_x * icor; 
forces.c:1596:            y0_i_shift =  y0_i - pSPARC->delta_y * jcor;
forces.c:1597:            z0_i_shift =  z0_i - pSPARC->delta_z * kcor;
forces.c:1601:            if(pSPARC->cell_typ == 0) {    
forces.c:1603:                    z = k * pSPARC->delta_z - z0_i_shift; 
forces.c:1605:                        y = j * pSPARC->delta_y - y0_i_shift;
forces.c:1607:                            x = i * pSPARC->delta_x - x0_i_shift;
forces.c:1616:                    z = k * pSPARC->delta_z - z0_i_shift; 
forces.c:1618:                        y = j * pSPARC->delta_y - y0_i_shift;
forces.c:1620:                            x = i * pSPARC->delta_x - x0_i_shift;
forces.c:1621:                            R[count] = sqrt(pSPARC->metricT[0] * (x*x) + pSPARC->metricT[1] * (x*y) + pSPARC->metricT[2] * (x*z) 
forces.c:1622:                                          + pSPARC->metricT[4] * (y*y) + pSPARC->metricT[5] * (y*z) + pSPARC->metricT[8] * (z*z) );
forces.c:1648:                    // VJ[i] = -pSPARC->Znucl[ityp] / R[i];
forces.c:1654:            SplineInterpMain(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rho_c_table, pSPARC->psd[ityp].size, 
forces.c:1655:                         R_interp, rhocJ_interp, count_interp, pSPARC->psd[ityp].SplineRhocD,pSPARC->psd[ityp].is_r_uniform);
forces.c:1679:            dk = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->DMVertices[4];
forces.c:1680:            dj = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->DMVertices[2];
forces.c:1681:            di = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->DMVertices[0];
forces.c:1701:                            drhocJ_x_val += (rhocJ[ishift_2p+p] - rhocJ[ishift_2p-p]) * pSPARC->D1_stencil_coeffs_x[p];
forces.c:1702:                            drhocJ_y_val += (rhocJ[ishift_2p+pshifty_ex[p]] - rhocJ[ishift_2p-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
forces.c:1703:                            drhocJ_z_val += (rhocJ[ishift_2p+pshiftz_ex[p]] - rhocJ[ishift_2p-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
forces.c:1713:            double *Vxc = pSPARC->XCPotential;
forces.c:1731:                        if (pSPARC->cell_typ != 0)
forces.c:1734:                        if (pSPARC->spin_typ == 0)
forces.c:1736:                        else if (pSPARC->spin_typ == 1)
forces.c:1737:                            Vxc_val = 0.5 * (Vxc[ishift_DM] + Vxc[pSPARC->Nd_d+ishift_DM]);
forces.c:1744:            forces_xc[atom_index*3  ] += force_xc_x  * pSPARC->dV;
forces.c:1745:            forces_xc[atom_index*3+1] += force_xc_y  * pSPARC->dV;
forces.c:1746:            forces_xc[atom_index*3+2] += force_xc_z  * pSPARC->dV;
forces.c:1755:    MPI_Allreduce(MPI_IN_PLACE, forces_xc, 3*pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
gradVecRoutines.c:46:    if (pSPARC->CyclixFlag) {
gradVecRoutines.c:65:    periods[0] = 1 - pSPARC->BCx;
gradVecRoutines.c:66:    periods[1] = 1 - pSPARC->BCy;
gradVecRoutines.c:67:    periods[2] = 1 - pSPARC->BCz;
gradVecRoutines.c:69:    int FDn = pSPARC->order / 2;
gradVecRoutines.c:82:    int DMnx_ex = DMnx + pSPARC->order * isDir[0];
gradVecRoutines.c:83:    int DMny_ex = DMny + pSPARC->order * isDir[1];
gradVecRoutines.c:84:    int DMnz_ex = DMnz + pSPARC->order * isDir[2];
gradVecRoutines.c:109:        int nd_in = ncol * pSPARC->order * (isDir[0] * DMny * DMnz + DMnx * isDir[1] * DMnz + DMnxny * isDir[2]);
gradVecRoutines.c:165:                D1_stencil_coeffs_dim[p] = pSPARC->D1_stencil_coeffs_x[p];
gradVecRoutines.c:172:                D1_stencil_coeffs_dim[p] = pSPARC->D1_stencil_coeffs_y[p];
gradVecRoutines.c:179:                D1_stencil_coeffs_dim[p] = pSPARC->D1_stencil_coeffs_z[p];
gradVecRoutines.c:203:    int overlap_flag = (int) (nproc > 1 && DMnx > pSPARC->order 
gradVecRoutines.c:204:                          && DMny > pSPARC->order && DMnz > pSPARC->order);
gradVecRoutinesKpt.c:46:    if (pSPARC->CyclixFlag) {
gradVecRoutinesKpt.c:67:    periods[0] = 1 - pSPARC->BCx;
gradVecRoutinesKpt.c:68:    periods[1] = 1 - pSPARC->BCy;
gradVecRoutinesKpt.c:69:    periods[2] = 1 - pSPARC->BCz;
gradVecRoutinesKpt.c:71:    int FDn = pSPARC->order / 2;
gradVecRoutinesKpt.c:82:    int DMnx_ex = DMnx + pSPARC->order * isDir[0];
gradVecRoutinesKpt.c:83:    int DMny_ex = DMny + pSPARC->order * isDir[1];
gradVecRoutinesKpt.c:84:    int DMnz_ex = DMnz + pSPARC->order * isDir[2];
gradVecRoutinesKpt.c:110:        int nd_in = ncol * pSPARC->order * (isDir[0] * DMny * DMnz + DMnx * isDir[1] * DMnz + DMnxny * isDir[2]);
gradVecRoutinesKpt.c:170:                D1_stencil_coeffs_dim[p] = pSPARC->D1_stencil_coeffs_x[p];
gradVecRoutinesKpt.c:173:            shift1 = pSPARC->order; shift2 = 0; shift3 = 0;
gradVecRoutinesKpt.c:176:            l_m = pSPARC->Nx;
gradVecRoutinesKpt.c:177:            phase_fac_m = cos(*kpt_vec * pSPARC->range_x) + sin(*kpt_vec * pSPARC->range_x) * I;
gradVecRoutinesKpt.c:183:                D1_stencil_coeffs_dim[p] = pSPARC->D1_stencil_coeffs_y[p];
gradVecRoutinesKpt.c:186:            shift2 = pSPARC->order; shift1 = 0; shift3 = 0;
gradVecRoutinesKpt.c:189:            l_m = pSPARC->Ny;
gradVecRoutinesKpt.c:190:            phase_fac_m = cos(*kpt_vec * pSPARC->range_y) + sin(*kpt_vec * pSPARC->range_y) * I;
gradVecRoutinesKpt.c:196:                D1_stencil_coeffs_dim[p] = pSPARC->D1_stencil_coeffs_z[p];
gradVecRoutinesKpt.c:199:            shift3 = pSPARC->order; shift1 = 0; shift2 = 0;
gradVecRoutinesKpt.c:202:            l_m = pSPARC->Nz;
gradVecRoutinesKpt.c:203:            phase_fac_m = cos(*kpt_vec * pSPARC->range_z) + sin(*kpt_vec * pSPARC->range_z) * I;
gradVecRoutinesKpt.c:227:    int overlap_flag = (int) (nproc > 1 && DMnx > pSPARC->order 
gradVecRoutinesKpt.c:228:                          && DMny > pSPARC->order && DMnz > pSPARC->order);                                    
hamiltonianVecRoutines.c:66:    if (pSPARC->cell_typ == 0) { // orthogonal cell
hamiltonianVecRoutines.c:79:        if (comm == pSPARC->kptcomm_topo)
hamiltonianVecRoutines.c:80:            comm2 = pSPARC->kptcomm_topo_dist_graph; // pSPARC->comm_dist_graph_phi
hamiltonianVecRoutines.c:82:            comm2 = pSPARC->comm_dist_graph_psi;
hamiltonianVecRoutines.c:93:    if (pSPARC->usefock > 1){
hamiltonianVecRoutines.c:98:    if(pSPARC->mGGAflag == 1 && pSPARC->countSCF > 1) {
hamiltonianVecRoutines.c:100:        int Lanczos_flag = (comm == pSPARC->kptcomm_topo) ? 1 : 0;
hamiltonianVecRoutines.c:101:        int sg = pSPARC->spin_start_indx + spin;
hamiltonianVecRoutines.c:102:        double *vxcMGGA3_dm = (Lanczos_flag == 1) ? pSPARC->vxcMGGA3_loc_kptcomm : (pSPARC->vxcMGGA3_loc_dmcomm + sg*pSPARC->Nd_d_dmcomm);
hamiltonianVecRoutines.c:153:    if (pSPARC->Nspinor == 1) {
hamiltonianVecRoutines.c:155:        if (pSPARC->cell_typ == 0) { // orthogonal cell
hamiltonianVecRoutines.c:168:            if (comm == pSPARC->kptcomm_topo)
hamiltonianVecRoutines.c:169:                comm2 = pSPARC->kptcomm_topo_dist_graph;
hamiltonianVecRoutines.c:171:                comm2 = pSPARC->comm_dist_graph_psi;
hamiltonianVecRoutines.c:182:        if (pSPARC->usefock > 1){
hamiltonianVecRoutines.c:187:        if(pSPARC->mGGAflag == 1 && pSPARC->countSCF > 1) {
hamiltonianVecRoutines.c:189:            int Lanczos_flag = (comm == pSPARC->kptcomm_topo) ? 1 : 0;
hamiltonianVecRoutines.c:190:            int sg = pSPARC->spin_start_indx + spin;
hamiltonianVecRoutines.c:191:            double *vxcMGGA3_dm = (Lanczos_flag == 1) ? pSPARC->vxcMGGA3_loc_kptcomm : (pSPARC->vxcMGGA3_loc_dmcomm + sg*pSPARC->Nd_d_dmcomm);
hamiltonianVecRoutines.c:216:    } else if (pSPARC->Nspinor == 2) {
hamiltonianVecRoutines.c:219:        DMndbyNspinor = DMnd / pSPARC->Nspinor;
hamiltonianVecRoutines.c:223:        if (pSPARC->cell_typ == 0) { // orthogonal cell
hamiltonianVecRoutines.c:225:                for (spinor = 0; spinor < pSPARC->Nspinor; spinor++) {
hamiltonianVecRoutines.c:226:                    if (pSPARC->Nspden == 1) 
hamiltonianVecRoutines.c:228:                    else if (pSPARC->Nspden == 2)
hamiltonianVecRoutines.c:239:            if (comm == pSPARC->kptcomm_topo)
hamiltonianVecRoutines.c:240:                comm2 = pSPARC->kptcomm_topo_dist_graph;
hamiltonianVecRoutines.c:242:                comm2 = pSPARC->comm_dist_graph_psi;
hamiltonianVecRoutines.c:245:                for (spinor = 0; spinor < pSPARC->Nspinor; spinor++) {
hamiltonianVecRoutines.c:246:                    if (pSPARC->Nspden == 1) 
hamiltonianVecRoutines.c:248:                    else if (pSPARC->Nspden == 2)
hamiltonianVecRoutines.c:264:        for (spinor = 0; spinor < pSPARC->Nspinor; spinor++) {
initialization.c:161:        MPI_Ibcast(&pSPARC->Ntypes, 1, MPI_INT, 0, MPI_COMM_WORLD, &req);
initialization.c:164:        if (pSPARC->is_default_psd) {
initialization.c:190:        MPI_Ibcast(&pSPARC->Ntypes, 1, MPI_INT, 0, MPI_COMM_WORLD, &req);
initialization.c:205:    // pSPARC->Ntypes = SPARC_Input.Ntypes;
initialization.c:223:    if (pSPARC->SQFlag == 1) {
initialization.c:225:    } else if (pSPARC->OFDFTFlag == 1) {
initialization.c:232:        if (pSPARC->useLAPACK == 0)
initialization.c:237:            pSPARC->useLAPACK = 1;
initialization.c:244:        pSPARC->useACCEL = 1;
initialization.c:246:    //	pSPARC->useACCEL = 0;
initialization.c:252:            printf ("[INFO] Hardware acceleration is %s\n", hwaccel[pSPARC->useACCEL]);
initialization.c:257:        pSPARC->DP_CheFSI     = NULL;
initialization.c:258:        pSPARC->DP_CheFSI_kpt = NULL;
initialization.c:259:        if (pSPARC->isGammaPoint) init_DP_CheFSI(pSPARC);
initialization.c:264:        if (pSPARC->useLAPACK == 0) {
initialization.c:265:            if (pSPARC->eig_paral_maxnp < 0) {
initialization.c:267:                RorC = (pSPARC->isGammaPoint) ? 'R' : 'C';
initialization.c:268:                SorG = (pSPARC->StandardEigenFlag) ? 'S' : 'G';
initialization.c:269:                pSPARC->eig_paral_maxnp = parallel_eigensolver_max_processor(pSPARC->Nstates, RorC, SorG);
initialization.c:272:            int gridsizes[2] = {pSPARC->Nstates,pSPARC->Nstates}, ierr = 1, size_blacscomm = 0;
initialization.c:273:            if (pSPARC->blacscomm != MPI_COMM_NULL)
initialization.c:274:                MPI_Comm_size(pSPARC->blacscomm, &size_blacscomm);
initialization.c:275:            SPARC_Dims_create(min(size_blacscomm,pSPARC->eig_paral_maxnp), 2, gridsizes, 1, pSPARC->eig_paral_subdims, &ierr);
initialization.c:276:            if (ierr) pSPARC->eig_paral_subdims[0] = pSPARC->eig_paral_subdims[1] = 1;
initialization.c:279:            if (rank == 0) printf("\nMaximun number of processors for eigenvalue solver is %d\n", pSPARC->eig_paral_maxnp);
initialization.c:281:                                    pSPARC->eig_paral_subdims[0], pSPARC->eig_paral_subdims[1]);
initialization.c:291:    if (pSPARC->CS_Flag == 1) {
initialization.c:295:    if (pSPARC->SQ3Flag == 1) {
initialization.c:299:    if (pSPARC->SQ3Flag == 1){
initialization.c:301:        pSPARC->ChebComp = (CHEBCOMP*) calloc(pSPARC->Nspin_spincomm, sizeof(CHEBCOMP));
initialization.c:302:        for (i = 0; i < pSPARC->Nspin_spincomm; i++){
initialization.c:303:            init_CHEBCOMP(pSPARC->ChebComp+i, pSPARC->sq3_npl, pSPARC->Nstates, pSPARC->cmc_cols);
initialization.c:307:    if (pSPARC->usefock == 1) {
initialization.c:323:    if (pSPARC->SQFlag == 1) {
initialization.c:325:    } else if (pSPARC->OFDFTFlag == 1) {
initialization.c:330:        if (pSPARC->SOC_Flag == 1)
initialization.c:335:    if (pSPARC->DDBP_Flag == 1) {
initialization.c:360:    if (pSPARC->d3Flag == 1) {
initialization.c:361:        if ((strcmpi(pSPARC->XC, "GGA_PBE") != 0) && (strcmpi(pSPARC->XC, "GGA_PBEsol") != 0) && (strcmpi(pSPARC->XC, "GGA_RPBE") != 0)) {
initialization.c:363:            pSPARC->d3Flag = 0;
initialization.c:371:    if (pSPARC->vdWDFFlag != 0) {
initialization.c:372:        if ((pSPARC->vdWDFKernelGenFlag) && (rank == 0)) {
initialization.c:373:            vdWDF_generate_kernel(pSPARC->filename); // if there is no file of kernel function and d2Spline, then generate one
initialization.c:377:        // printf("rank %d, d2 of kernel function vdWDFd2Phidk2[2][4]=%.9e\n", rank, pSPARC->vdWDFd2Phidk2[2][4]); // to verify it
initialization.c:381:    if(pSPARC->mGGAflag == 1) {
initialization.c:386:    pSPARC->memory_usage = estimate_memory(pSPARC);
initialization.c:664:    pSPARC->is_default_psd = 0;               // default pseudopotential path is disabled
initialization.c:726:    pSPARC->Nspinor = 1;
initialization.c:727:    pSPARC->SOC_Flag = 0;
initialization.c:759:    Ntypes = pSPARC->Ntypes;
initialization.c:775:        tempbuff[0] = pSPARC->n_atom;
initialization.c:776:        tempbuff[1] = pSPARC->SOC_Flag;
initialization.c:778:            lmaxv[i] = pSPARC->psd[i].lmax;
initialization.c:779:            sizev[i] = pSPARC->psd[i].size;
initialization.c:780:            pspxcv[i] = pSPARC->psd[i].pspxc;
initialization.c:781:            is_r_uniformv[i] = pSPARC->psd[i].is_r_uniform;
initialization.c:782:            pspsocv[i] = pSPARC->psd[i].pspsoc;
initialization.c:783:            //pplv[i] = pSPARC->psd[i].ppl;
initialization.c:802:                pplv[ppl_sdispl[i]+l] = pSPARC->psd[i].ppl[l];
initialization.c:808:        pSPARC->psd = (PSD_OBJ *)malloc(pSPARC->Ntypes * sizeof(PSD_OBJ));
initialization.c:809:        assert(pSPARC->psd != NULL);
initialization.c:820:        pSPARC->n_atom = tempbuff[0];
initialization.c:821:        pSPARC->SOC_Flag = tempbuff[1];
initialization.c:829:            pSPARC->psd[i].lmax = lmaxv[i];
initialization.c:830:            pSPARC->psd[i].size = sizev[i];
initialization.c:831:            pSPARC->psd[i].pspxc = pspxcv[i];
initialization.c:832:            pSPARC->psd[i].is_r_uniform = is_r_uniformv[i];
initialization.c:833:            pSPARC->psd[i].pspsoc = pspsocv[i];
initialization.c:834:            //pSPARC->psd[i].ppl = pplv[i];
initialization.c:847:            pSPARC->psd[i].ppl = (int *)malloc((lmaxv[i] + 1) * sizeof(int));
initialization.c:849:                pSPARC->psd[i].ppl[l] = pplv[ppl_sdispl[i]+l];
initialization.c:853:    n_atom = pSPARC->n_atom;
initialization.c:855:    if (pSPARC->SOC_Flag == 1) {
initialization.c:868:                    pplv_soc[ppl_soc_sdispl[i]+l-1] = pSPARC->psd[i].ppl_soc[l-1];
initialization.c:875:                pSPARC->psd[i].ppl_soc = (int *)malloc(lmaxv[i] * sizeof(int));
initialization.c:877:                    pSPARC->psd[i].ppl_soc[l-1] = pplv_soc[ppl_soc_sdispl[i]+l-1];
initialization.c:895:             nproj += pSPARC->psd[i].ppl[l];
initialization.c:903:    if (pSPARC->SOC_Flag == 1) {
initialization.c:905:            if (!pSPARC->psd[i].pspsoc) continue;
initialization.c:908:                nprojso += pSPARC->psd[i].ppl_soc[l-1];
initialization.c:925:        MPI_Pack(pSPARC->localPsd, Ntypes, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:926:        MPI_Pack(pSPARC->Znucl, Ntypes, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:927:        MPI_Pack(pSPARC->nAtomv, Ntypes, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:928:        MPI_Pack(pSPARC->Mass, Ntypes, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:929:        MPI_Pack(pSPARC->atomType, Ntypes * L_ATMTYPE, MPI_CHAR, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:930:        MPI_Pack(pSPARC->psdName, Ntypes * L_PSD, MPI_CHAR, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:931:        MPI_Pack(pSPARC->atom_pos, 3*n_atom, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:932:        MPI_Pack(pSPARC->IsFrac, pSPARC->Ntypes, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:933:        MPI_Pack(pSPARC->mvAtmConstraint, 3*n_atom, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:934:        MPI_Pack(pSPARC->IsSpin, pSPARC->Ntypes, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:935:        MPI_Pack(pSPARC->atom_spin, n_atom, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:939:                nproj += pSPARC->psd[i].ppl[l];
initialization.c:941:            MPI_Pack(pSPARC->psd[i].RadialGrid, sizev[i], MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:942:            MPI_Pack(pSPARC->psd[i].UdV, nproj*sizev[i], MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:943:            MPI_Pack(&pSPARC->psd[i].Vloc_0, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:944:            MPI_Pack(&pSPARC->psd[i].fchrg, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:945:            MPI_Pack(pSPARC->psd[i].rVloc, sizev[i], MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:946:            MPI_Pack(pSPARC->psd[i].rhoIsoAtom, sizev[i], MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:947:            MPI_Pack(pSPARC->psd[i].rc, lmaxv[i]+1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:948:            MPI_Pack(pSPARC->psd[i].Gamma, nproj, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:949:            MPI_Pack(pSPARC->psd[i].rho_c_table, sizev[i], MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:951:            if (pSPARC->psd[i].pspsoc) {
initialization.c:954:                    nprojso += pSPARC->psd[i].ppl_soc[l-1];
initialization.c:956:                MPI_Pack(pSPARC->psd[i].Gamma_soc, nprojso, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:957:                MPI_Pack(pSPARC->psd[i].UdV_soc, nprojso*sizev[i], MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
initialization.c:964:        pSPARC->localPsd = (int *)malloc( Ntypes * sizeof(int) );
initialization.c:965:        pSPARC->Znucl = (int *)malloc( Ntypes * sizeof(int) );
initialization.c:966:        pSPARC->nAtomv = (int *)malloc( Ntypes * sizeof(int) );
initialization.c:967:        pSPARC->IsFrac = (int *)malloc( Ntypes * sizeof(int) );
initialization.c:968:        pSPARC->IsSpin = (int *)malloc( Ntypes * sizeof(int) );
initialization.c:969:        pSPARC->Mass = (double *)malloc( Ntypes * sizeof(double) );
initialization.c:970:        pSPARC->atomType = (char *)malloc( Ntypes * L_ATMTYPE * sizeof(char) );
initialization.c:971:        pSPARC->psdName = (char *)malloc( Ntypes * L_PSD * sizeof(char) );
initialization.c:973:        if (pSPARC->localPsd == NULL || pSPARC->Znucl == NULL ||
initialization.c:974:            pSPARC->nAtomv == NULL || pSPARC->Mass == NULL ||
initialization.c:975:            pSPARC->atomType == NULL || pSPARC->psdName == NULL) {
initialization.c:981:        pSPARC->atom_pos = (double *)malloc(3*n_atom*sizeof(double));
initialization.c:982:        pSPARC->mvAtmConstraint = (int *)malloc(3*n_atom*sizeof(int));
initialization.c:983:        pSPARC->atom_spin = (double *)malloc(n_atom*sizeof(double));
initialization.c:984:        if (pSPARC->atom_pos == NULL || pSPARC->mvAtmConstraint == NULL || pSPARC->atom_spin == NULL) {
initialization.c:992:                nproj += pSPARC->psd[i].ppl[l];
initialization.c:994:            pSPARC->psd[i].RadialGrid = (double *)malloc(sizev[i] * sizeof(double));
initialization.c:995:            pSPARC->psd[i].UdV = (double *)malloc(nproj * sizev[i] * sizeof(double));
initialization.c:996:            pSPARC->psd[i].rVloc = (double *)malloc(sizev[i] * sizeof(double));
initialization.c:997:            pSPARC->psd[i].rhoIsoAtom = (double *)malloc(sizev[i] * sizeof(double));
initialization.c:998:            pSPARC->psd[i].rc = (double *)malloc((lmaxv[i]+1) * sizeof(double));
initialization.c:999:            pSPARC->psd[i].Gamma = (double *)malloc(nproj * sizeof(double));
initialization.c:1000:            pSPARC->psd[i].rho_c_table = (double *)malloc(sizev[i] * sizeof(double));
initialization.c:1002:            if (pSPARC->psd[i].RadialGrid == NULL || pSPARC->psd[i].UdV == NULL ||
initialization.c:1003:                pSPARC->psd[i].rVloc == NULL || pSPARC->psd[i].rhoIsoAtom == NULL ||
initialization.c:1004:                pSPARC->psd[i].rc == NULL || pSPARC->psd[i].Gamma == NULL ||
initialization.c:1005:                pSPARC->psd[i].rho_c_table == NULL)
initialization.c:1010:            if (pSPARC->psd[i].pspsoc) {
initialization.c:1013:                    nprojso += pSPARC->psd[i].ppl_soc[l-1];
initialization.c:1015:                pSPARC->psd[i].Gamma_soc = (double *)malloc(nprojso * sizeof(double));
initialization.c:1016:                pSPARC->psd[i].UdV_soc = (double *)malloc(nprojso * sizev[i] * sizeof(double));
initialization.c:1030:        MPI_Unpack(buff, l_buff, &position, pSPARC->localPsd, Ntypes, MPI_INT, MPI_COMM_WORLD);
initialization.c:1031:        MPI_Unpack(buff, l_buff, &position, pSPARC->Znucl, Ntypes, MPI_INT, MPI_COMM_WORLD);
initialization.c:1032:        MPI_Unpack(buff, l_buff, &position, pSPARC->nAtomv, Ntypes, MPI_INT, MPI_COMM_WORLD);
initialization.c:1033:        MPI_Unpack(buff, l_buff, &position, pSPARC->Mass, Ntypes, MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1034:        MPI_Unpack(buff, l_buff, &position, pSPARC->atomType, Ntypes*L_ATMTYPE, MPI_CHAR, MPI_COMM_WORLD);
initialization.c:1035:        MPI_Unpack(buff, l_buff, &position, pSPARC->psdName, Ntypes*L_PSD, MPI_CHAR, MPI_COMM_WORLD);
initialization.c:1036:        MPI_Unpack(buff, l_buff, &position, pSPARC->atom_pos, 3*n_atom, MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1037:        MPI_Unpack(buff, l_buff, &position, pSPARC->IsFrac, Ntypes, MPI_INT, MPI_COMM_WORLD);
initialization.c:1038:        MPI_Unpack(buff, l_buff, &position, pSPARC->mvAtmConstraint, 3*n_atom, MPI_INT, MPI_COMM_WORLD);
initialization.c:1039:        MPI_Unpack(buff, l_buff, &position, pSPARC->IsSpin, Ntypes, MPI_INT, MPI_COMM_WORLD);
initialization.c:1040:        MPI_Unpack(buff, l_buff, &position, pSPARC->atom_spin, n_atom, MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1044:                nproj += pSPARC->psd[i].ppl[l];
initialization.c:1046:            MPI_Unpack(buff, l_buff, &position, pSPARC->psd[i].RadialGrid,  sizev[i], MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1047:            MPI_Unpack(buff, l_buff, &position, pSPARC->psd[i].UdV,  nproj*sizev[i], MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1048:            MPI_Unpack(buff, l_buff, &position, &pSPARC->psd[i].Vloc_0,  1, MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1049:            MPI_Unpack(buff, l_buff, &position, &pSPARC->psd[i].fchrg, 1, MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1050:            MPI_Unpack(buff, l_buff, &position, pSPARC->psd[i].rVloc,  sizev[i], MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1051:            MPI_Unpack(buff, l_buff, &position, pSPARC->psd[i].rhoIsoAtom,  sizev[i], MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1052:            MPI_Unpack(buff, l_buff, &position, pSPARC->psd[i].rc,  lmaxv[i]+1, MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1053:            MPI_Unpack(buff, l_buff, &position, pSPARC->psd[i].Gamma,  nproj, MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1054:            MPI_Unpack(buff, l_buff, &position, pSPARC->psd[i].rho_c_table, sizev[i], MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1055:            if (pSPARC->psd[i].pspsoc) {
initialization.c:1058:                    nprojso += pSPARC->psd[i].ppl_soc[l-1];
initialization.c:1060:                MPI_Unpack(buff, l_buff, &position, pSPARC->psd[i].Gamma_soc,  nprojso, MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1061:                MPI_Unpack(buff, l_buff, &position, pSPARC->psd[i].UdV_soc, nprojso*sizev[i], MPI_DOUBLE, MPI_COMM_WORLD);
initialization.c:1076:    if (pSPARC->SOC_Flag == 1) {
initialization.c:1096:    pSPARC->npspin = pSPARC_Input->npspin;
initialization.c:1097:    pSPARC->npkpt = pSPARC_Input->npkpt;
initialization.c:1098:    pSPARC->npband = pSPARC_Input->npband;
initialization.c:1099:    pSPARC->npNdx = pSPARC_Input->npNdx;
initialization.c:1100:    pSPARC->npNdy = pSPARC_Input->npNdy;
initialization.c:1101:    pSPARC->npNdz = pSPARC_Input->npNdz;
initialization.c:1102:    pSPARC->npNdx_phi = pSPARC_Input->npNdx_phi;
initialization.c:1103:    pSPARC->npNdy_phi = pSPARC_Input->npNdy_phi;
initialization.c:1104:    pSPARC->npNdz_phi = pSPARC_Input->npNdz_phi;
initialization.c:1105:    pSPARC->eig_serial_maxns = pSPARC_Input->eig_serial_maxns;
initialization.c:1106:    pSPARC->eig_paral_blksz = pSPARC_Input->eig_paral_blksz;
initialization.c:1107:    pSPARC->spin_typ = pSPARC_Input->spin_typ;
initialization.c:1108:    pSPARC->MDFlag = pSPARC_Input->MDFlag;
initialization.c:1109:    pSPARC->RelaxFlag = pSPARC_Input->RelaxFlag;
initialization.c:1110:    pSPARC->RestartFlag = pSPARC_Input->RestartFlag;
initialization.c:1111:    pSPARC->Flag_latvec_scale = pSPARC_Input->Flag_latvec_scale;
initialization.c:1112:    pSPARC->numIntervals_x = pSPARC_Input->numIntervals_x;
initialization.c:1113:    pSPARC->numIntervals_y = pSPARC_Input->numIntervals_y;
initialization.c:1114:    pSPARC->numIntervals_z = pSPARC_Input->numIntervals_z;
initialization.c:1115:    pSPARC->BC = pSPARC_Input->BC;
initialization.c:1116:    pSPARC->BCx = pSPARC_Input->BCx;
initialization.c:1117:    pSPARC->BCy = pSPARC_Input->BCy;
initialization.c:1118:    pSPARC->BCz = pSPARC_Input->BCz;
initialization.c:1119:    pSPARC->Nstates = pSPARC_Input->Nstates;
initialization.c:1120:    //pSPARC->Ntypes = pSPARC_Input->Ntypes;
initialization.c:1121:    pSPARC->NetCharge = pSPARC_Input->NetCharge;
initialization.c:1122:    pSPARC->order = pSPARC_Input->order;
initialization.c:1123:    pSPARC->ChebDegree = pSPARC_Input->ChebDegree;
initialization.c:1124:    pSPARC->CheFSI_Optmz = pSPARC_Input->CheFSI_Optmz;
initialization.c:1125:    pSPARC->chefsibound_flag = pSPARC_Input->chefsibound_flag;
initialization.c:1126:    pSPARC->rhoTrigger = pSPARC_Input->rhoTrigger;
initialization.c:1127:    pSPARC->CS_Flag = pSPARC_Input->CS_Flag; 
initialization.c:1128:    pSPARC->CS_Nt = pSPARC_Input->CS_Nt;
initialization.c:1129:    pSPARC->CS_npl = pSPARC_Input->CS_npl;
initialization.c:1130:    pSPARC->CS_ncheb = pSPARC_Input->CS_ncheb;
initialization.c:1131:    pSPARC->DDBP_Flag = pSPARC_Input->DDBP_Flag;
initialization.c:1132:    pSPARC->DDBP_nALB_atom = pSPARC_Input->DDBP_nALB_atom;
initialization.c:1133:    pSPARC->DDBP_Nex = pSPARC_Input->DDBP_Nex;
initialization.c:1134:    pSPARC->DDBP_Ney = pSPARC_Input->DDBP_Ney;
initialization.c:1135:    pSPARC->DDBP_Nez = pSPARC_Input->DDBP_Nez;
initialization.c:1136:    pSPARC->DDBP_EBCx = pSPARC_Input->DDBP_EBCx;
initialization.c:1137:    pSPARC->DDBP_EBCy = pSPARC_Input->DDBP_EBCy;
initialization.c:1138:    pSPARC->DDBP_EBCz = pSPARC_Input->DDBP_EBCz;
initialization.c:1139:    pSPARC->DDBP_npelem = pSPARC_Input->DDBP_npelem;
initialization.c:1140:    pSPARC->DDBP_npbasis = pSPARC_Input->DDBP_npbasis;
initialization.c:1141:    pSPARC->DDBP_buffer_x = pSPARC_Input->DDBP_buffer_x;
initialization.c:1142:    pSPARC->DDBP_buffer_y = pSPARC_Input->DDBP_buffer_y;
initialization.c:1143:    pSPARC->DDBP_buffer_z = pSPARC_Input->DDBP_buffer_z;
initialization.c:1144:    pSPARC->DDBP_tol_updatebasis_first_EGS = pSPARC_Input->DDBP_tol_updatebasis_first_EGS;
initialization.c:1145:    pSPARC->DDBP_tol_updatebasis = pSPARC_Input->DDBP_tol_updatebasis;
initialization.c:1146:    pSPARC->FixRandSeed = pSPARC_Input->FixRandSeed;
initialization.c:1147:    pSPARC->accuracy_level = pSPARC_Input->accuracy_level;
initialization.c:1148:    pSPARC->scf_err_type = pSPARC_Input->scf_err_type;
initialization.c:1149:    pSPARC->MAXIT_SCF = pSPARC_Input->MAXIT_SCF;
initialization.c:1150:    pSPARC->MINIT_SCF = pSPARC_Input->MINIT_SCF;
initialization.c:1151:    pSPARC->MAXIT_POISSON = pSPARC_Input->MAXIT_POISSON;
initialization.c:1152:    pSPARC->Relax_Niter = pSPARC_Input->Relax_Niter;
initialization.c:1153:    pSPARC->MixingVariable = pSPARC_Input->MixingVariable;
initialization.c:1154:    pSPARC->MixingPrecond = pSPARC_Input->MixingPrecond;
initialization.c:1155:    pSPARC->MixingPrecondMag = pSPARC_Input->MixingPrecondMag;
initialization.c:1156:    pSPARC->MixingHistory = pSPARC_Input->MixingHistory;
initialization.c:1157:    pSPARC->PulayFrequency = pSPARC_Input->PulayFrequency;
initialization.c:1158:    pSPARC->PulayRestartFlag = pSPARC_Input->PulayRestartFlag;
initialization.c:1159:    pSPARC->precond_fitpow = pSPARC_Input->precond_fitpow;
initialization.c:1160:    pSPARC->Nkpts = pSPARC_Input->Nkpts;
initialization.c:1161:    pSPARC->Kx = pSPARC_Input->Kx;
initialization.c:1162:    pSPARC->Ky = pSPARC_Input->Ky;
initialization.c:1163:    pSPARC->Kz = pSPARC_Input->Kz;
initialization.c:1164:    pSPARC->NkptsGroup = pSPARC_Input->NkptsGroup;
initialization.c:1165:    pSPARC->kctr = pSPARC_Input->kctr;
initialization.c:1166:    pSPARC->Verbosity = pSPARC_Input->Verbosity;
initialization.c:1167:    pSPARC->PrintForceFlag = pSPARC_Input->PrintForceFlag;
initialization.c:1168:    pSPARC->PrintAtomPosFlag = pSPARC_Input->PrintAtomPosFlag;
initialization.c:1169:    pSPARC->PrintAtomVelFlag = pSPARC_Input->PrintAtomVelFlag;
initialization.c:1170:    pSPARC->PrintEigenFlag = pSPARC_Input->PrintEigenFlag;
initialization.c:1171:    pSPARC->PrintElecDensFlag = pSPARC_Input->PrintElecDensFlag;
initialization.c:1172:    pSPARC->PrintMDout = pSPARC_Input->PrintMDout;
initialization.c:1173:    pSPARC->PrintRelaxout = pSPARC_Input->PrintRelaxout;
initialization.c:1174:    pSPARC->Printrestart = pSPARC_Input->Printrestart;
initialization.c:1175:    pSPARC->Printrestart_fq = pSPARC_Input->Printrestart_fq;
initialization.c:1176:    pSPARC->elec_T_type = pSPARC_Input->elec_T_type;
initialization.c:1177:    pSPARC->MD_Nstep = pSPARC_Input->MD_Nstep;
initialization.c:1178:    pSPARC->NPTscaleVecs[0] = pSPARC_Input->NPTscaleVecs[0];
initialization.c:1179:    pSPARC->NPTscaleVecs[1] = pSPARC_Input->NPTscaleVecs[1];
initialization.c:1180:    pSPARC->NPTscaleVecs[2] = pSPARC_Input->NPTscaleVecs[2];
initialization.c:1181:    pSPARC->NPT_NHnnos = pSPARC_Input->NPT_NHnnos;
initialization.c:1182:    pSPARC->ion_elec_eqT = pSPARC_Input->ion_elec_eqT;
initialization.c:1183:    pSPARC->ion_vel_dstr = pSPARC_Input->ion_vel_dstr;
initialization.c:1184:    pSPARC->ion_vel_dstr_rand = pSPARC_Input->ion_vel_dstr_rand;
initialization.c:1185:    pSPARC->L_history = pSPARC_Input->L_history;
initialization.c:1186:    pSPARC->L_autoscale = pSPARC_Input->L_autoscale;
initialization.c:1187:    pSPARC->L_lineopt = pSPARC_Input->L_lineopt;
initialization.c:1188:    pSPARC->Calc_stress = pSPARC_Input->Calc_stress;
initialization.c:1189:    pSPARC->Calc_pres = pSPARC_Input->Calc_pres;
initialization.c:1190:    pSPARC->StandardEigenFlag = pSPARC_Input->StandardEigenFlag;
initialization.c:1191:    pSPARC->SQ3Flag = pSPARC_Input->SQ3Flag;
initialization.c:1192:    pSPARC->sq3_npl = pSPARC_Input->sq3_npl;
initialization.c:1193:    pSPARC->MAXIT_FOCK = pSPARC_Input->MAXIT_FOCK;
initialization.c:1194:    pSPARC->EXXMeth_Flag = pSPARC_Input->EXXMeth_Flag;
initialization.c:1195:    pSPARC->ACEFlag = pSPARC_Input->ACEFlag;
initialization.c:1196:    pSPARC->EXXMem_batch = pSPARC_Input->EXXMem_batch;
initialization.c:1197:    pSPARC->EXXACEVal_state = pSPARC_Input->EXXACEVal_state;
initialization.c:1198:    pSPARC->EXXDownsampling[0] = pSPARC_Input->EXXDownsampling[0];
initialization.c:1199:    pSPARC->EXXDownsampling[1] = pSPARC_Input->EXXDownsampling[1];
initialization.c:1200:    pSPARC->EXXDownsampling[2] = pSPARC_Input->EXXDownsampling[2];
initialization.c:1201:    pSPARC->EXXDiv_Flag = pSPARC_Input->EXXDiv_Flag;
initialization.c:1202:    pSPARC->MINIT_FOCK = pSPARC_Input->MINIT_FOCK;
initialization.c:1203:    pSPARC->d3Flag = pSPARC_Input->d3Flag;
initialization.c:1204:    pSPARC->vdWDFKernelGenFlag = pSPARC_Input->vdWDFKernelGenFlag;
initialization.c:1205:    pSPARC->SQFlag = pSPARC_Input->SQFlag;
initialization.c:1206:    pSPARC->SQ_typ_dm = pSPARC_Input->SQ_typ_dm;
initialization.c:1207:    pSPARC->SQ_gauss_mem = pSPARC_Input->SQ_gauss_mem;
initialization.c:1208:    pSPARC->SQ_npl_c = pSPARC_Input->SQ_npl_c;
initialization.c:1209:    pSPARC->SQ_npl_g = pSPARC_Input->SQ_npl_g;
initialization.c:1210:    pSPARC->SQ_EigshiftFlag = pSPARC_Input->SQ_EigshiftFlag;
initialization.c:1211:    pSPARC->npNdx_SQ = pSPARC_Input->npNdx_SQ;
initialization.c:1212:    pSPARC->npNdy_SQ = pSPARC_Input->npNdy_SQ;
initialization.c:1213:    pSPARC->npNdz_SQ = pSPARC_Input->npNdz_SQ;
initialization.c:1214:    pSPARC->OFDFTFlag = pSPARC_Input->OFDFTFlag;
initialization.c:1215:    pSPARC->PrintEnergyDensFlag = pSPARC_Input->PrintEnergyDensFlag;
initialization.c:1218:    pSPARC->CalcMCSHFlag = pSPARC_Input->CalcMCSHFlag;
initialization.c:1219:    pSPARC->MCSHRadialFunctionType = pSPARC_Input->MCSHRadialFunctionType;
initialization.c:1220:    pSPARC->MCSHRadialFunctionMaxOrder = pSPARC_Input->MCSHRadialFunctionMaxOrder;
initialization.c:1221:    pSPARC->MCSHMaxMCSHOrder = pSPARC_Input->MCSHMaxMCSHOrder;
initialization.c:1222:    pSPARC->MCSHMaxRCutoff = pSPARC_Input->MCSHMaxRCutoff;
initialization.c:1223:    pSPARC->MCSHRStepSize = pSPARC_Input->MCSHRStepSize;
initialization.c:1225:    pSPARC->m_val = pSPARC_Input->m_val;
initialization.c:1226:    if(!rank) printf("M_val = %f", pSPARC->m_val);
initialization.c:1227:    pSPARC->n_val = pSPARC_Input->n_val;
initialization.c:1228:    if(!rank) printf("N_val = %f", pSPARC->n_val);
initialization.c:1229:    pSPARC->ext_FPMD_Flag = pSPARC_Input->ext_FPMD_Flag;
initialization.c:1230:    pSPARC->ext_FPMD_nscut = pSPARC_Input->ext_FPMD_nscut;
initialization.c:1233:    pSPARC->range_x = pSPARC_Input->range_x;
initialization.c:1234:    pSPARC->range_y = pSPARC_Input->range_y;
initialization.c:1235:    pSPARC->range_z = pSPARC_Input->range_z;
initialization.c:1236:    if (pSPARC->range_x <= 0.0 || pSPARC->range_y <= 0.0 || pSPARC->range_z <= 0.0) {
initialization.c:1240:    pSPARC->latvec_scale_x = pSPARC_Input->latvec_scale_x;
initialization.c:1241:    pSPARC->latvec_scale_y = pSPARC_Input->latvec_scale_y;
initialization.c:1242:    pSPARC->latvec_scale_z = pSPARC_Input->latvec_scale_z;
initialization.c:1245:        pSPARC->LatVec[i] = pSPARC_Input->LatVec[i];
initialization.c:1246:    pSPARC->mesh_spacing = pSPARC_Input->mesh_spacing;
initialization.c:1247:    pSPARC->ecut = pSPARC_Input->ecut;
initialization.c:1248:    pSPARC->kptshift[0] = pSPARC_Input->kptshift[0];
initialization.c:1249:    pSPARC->kptshift[1] = pSPARC_Input->kptshift[1];
initialization.c:1250:    pSPARC->kptshift[2] = pSPARC_Input->kptshift[2];
initialization.c:1251:    pSPARC->target_energy_accuracy = pSPARC_Input->target_energy_accuracy;
initialization.c:1252:    pSPARC->target_force_accuracy = pSPARC_Input->target_force_accuracy;
initialization.c:1253:    pSPARC->TOL_SCF = pSPARC_Input->TOL_SCF;
initialization.c:1254:    pSPARC->TOL_RELAX = pSPARC_Input->TOL_RELAX;
initialization.c:1255:    pSPARC->TOL_POISSON = pSPARC_Input->TOL_POISSON;
initialization.c:1256:    pSPARC->TOL_LANCZOS = pSPARC_Input->TOL_LANCZOS;
initialization.c:1257:    pSPARC->TOL_PSEUDOCHARGE = pSPARC_Input->TOL_PSEUDOCHARGE;
initialization.c:1258:    pSPARC->TOL_PRECOND = pSPARC_Input->TOL_PRECOND;
initialization.c:1259:    pSPARC->POISSON_SOLVER = pSPARC_Input->Poisson_solver;
initialization.c:1260:    pSPARC->precond_kerker_kTF = pSPARC_Input->precond_kerker_kTF;
initialization.c:1261:    pSPARC->precond_kerker_thresh = pSPARC_Input->precond_kerker_thresh;
initialization.c:1262:    pSPARC->precond_kerker_kTF_mag = pSPARC_Input->precond_kerker_kTF_mag;
initialization.c:1263:    pSPARC->precond_kerker_thresh_mag = pSPARC_Input->precond_kerker_thresh_mag;
initialization.c:1264:    pSPARC->precond_resta_q0 = pSPARC_Input->precond_resta_q0;
initialization.c:1265:    pSPARC->precond_resta_Rs = pSPARC_Input->precond_resta_Rs;
initialization.c:1266:    pSPARC->REFERENCE_CUTOFF = pSPARC_Input->REFERENCE_CUTOFF;
initialization.c:1267:    pSPARC->Beta = pSPARC_Input->Beta;
initialization.c:1268:    pSPARC->elec_T = pSPARC_Input->elec_T;
initialization.c:1269:    pSPARC->MixingParameter = pSPARC_Input->MixingParameter;
initialization.c:1270:    pSPARC->MixingParameterSimple = pSPARC_Input->MixingParameterSimple;
initialization.c:1271:    pSPARC->MixingParameterMag = pSPARC_Input->MixingParameterMag;
initialization.c:1272:    pSPARC->MixingParameterSimpleMag = pSPARC_Input->MixingParameterSimpleMag;
initialization.c:1273:    pSPARC->MD_dt = pSPARC_Input->MD_dt;
initialization.c:1274:    pSPARC->ion_T = pSPARC_Input->ion_T;
initialization.c:1275:    pSPARC->thermos_Tf = pSPARC_Input->thermos_Tf;
initialization.c:1276:    pSPARC->qmass = pSPARC_Input->qmass;
initialization.c:1277:    pSPARC->TWtime = pSPARC_Input->TWtime;// buffer time
initialization.c:1278:    pSPARC->NLCG_sigma = pSPARC_Input->NLCG_sigma;
initialization.c:1279:    pSPARC->L_finit_stp = pSPARC_Input->L_finit_stp;
initialization.c:1280:    pSPARC->L_maxmov = pSPARC_Input->L_maxmov;
initialization.c:1281:    pSPARC->L_icurv = pSPARC_Input->L_icurv;
initialization.c:1282:    pSPARC->FIRE_dt = pSPARC_Input->FIRE_dt;
initialization.c:1283:    pSPARC->FIRE_mass = pSPARC_Input->FIRE_mass;
initialization.c:1284:    pSPARC->FIRE_maxmov = pSPARC_Input->FIRE_maxmov;
initialization.c:1285:    pSPARC->max_dilatation = pSPARC_Input->max_dilatation;
initialization.c:1286:    pSPARC->TOL_RELAX_CELL = pSPARC_Input->TOL_RELAX_CELL;
initialization.c:1287:    pSPARC->eig_paral_orfac = pSPARC_Input->eig_paral_orfac;
initialization.c:1288:    pSPARC->eig_paral_maxnp = pSPARC_Input->eig_paral_maxnp;
initialization.c:1290:    for (i = 0; i < pSPARC->NPT_NHnnos; i++) {
initialization.c:1291:        pSPARC->NPT_NHqmass[i] = pSPARC_Input->NPT_NHqmass[i];
initialization.c:1293:    pSPARC->NPT_NHbmass = pSPARC_Input->NPT_NHbmass;
initialization.c:1294:    pSPARC->prtarget = pSPARC_Input->prtarget;
initialization.c:1296:    pSPARC->NPT_NP_bmass = pSPARC_Input->NPT_NP_bmass;
initialization.c:1297:    pSPARC->NPT_NP_qmass = pSPARC_Input->NPT_NP_qmass;
initialization.c:1298:    pSPARC->TOL_FOCK = pSPARC_Input->TOL_FOCK;
initialization.c:1299:    pSPARC->TOL_SCF_INIT = pSPARC_Input->TOL_SCF_INIT;
initialization.c:1300:    pSPARC->hyb_range_fock = pSPARC_Input->hyb_range_fock;
initialization.c:1301:    pSPARC->hyb_range_pbe = pSPARC_Input->hyb_range_pbe;
initialization.c:1302:    pSPARC->d3Rthr = pSPARC_Input->d3Rthr;
initialization.c:1303:    pSPARC->d3Cn_thr = pSPARC_Input->d3Cn_thr;
initialization.c:1304:    pSPARC->SQ_rcut = pSPARC_Input->SQ_rcut;
initialization.c:1305:    pSPARC->SQ_fac_g2c = pSPARC_Input->SQ_fac_g2c;
initialization.c:1306:    pSPARC->SQ_tol_occ = pSPARC_Input->SQ_tol_occ;
initialization.c:1307:    pSPARC->SQ_eigshift = pSPARC_Input->SQ_eigshift;
initialization.c:1308:    pSPARC->OFDFT_tol = pSPARC_Input->OFDFT_tol;
initialization.c:1309:    pSPARC->OFDFT_lambda = pSPARC_Input->OFDFT_lambda;
initialization.c:1310:    pSPARC->twist = pSPARC_Input->twist;
initialization.c:1311:    pSPARC->nonlocal_flag = pSPARC_Input->nonlocal_flag;
initialization.c:1314:    strncpy(pSPARC->MDMeth , pSPARC_Input->MDMeth,sizeof(pSPARC->MDMeth));
initialization.c:1315:    strncpy(pSPARC->RelaxMeth , pSPARC_Input->RelaxMeth,sizeof(pSPARC->RelaxMeth));
initialization.c:1316:    strncpy(pSPARC->XC, pSPARC_Input->XC,sizeof(pSPARC->XC));
initialization.c:1317:    if (strcmp(pSPARC->XC,"UNDEFINED") == 0) {
initialization.c:1323:    pSPARC->usefock = 0;                    // default: no fock operator 
initialization.c:1324:    pSPARC->hyb_mixing = 0.0;               // default: no mixing
initialization.c:1326:    if (strcmpi(pSPARC->XC, "LDA_PZ") == 0) {
initialization.c:1328:    } else if (strcmpi(pSPARC->XC, "LDA_PW") == 0) {
initialization.c:1330:    } else if (strcmpi(pSPARC->XC, "GGA_PBE") == 0) {
initialization.c:1332:    } else if (strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0) {
initialization.c:1335:    else if (strcmpi(pSPARC->XC, "GGA_RPBE") == 0) {
initialization.c:1337:    } else if (strcmpi(pSPARC->XC, "GGA_PBEsol") == 0) {
initialization.c:1339:    } else if (strcmpi(pSPARC->XC, "HF") == 0) {
initialization.c:1341:        pSPARC->usefock = 1;
initialization.c:1342:        pSPARC->hyb_mixing = 1;
initialization.c:1343:    } else if (strcmpi(pSPARC->XC, "PBE0") == 0) {
initialization.c:1345:        pSPARC->usefock = 1;
initialization.c:1346:        pSPARC->hyb_mixing = 0.25;
initialization.c:1347:    } else if (strcmpi(pSPARC->XC, "HSE") == 0) {
initialization.c:1349:        pSPARC->usefock = 1;
initialization.c:1350:        pSPARC->hyb_mixing = 0.25;
initialization.c:1351:    } else if (strcmpi(pSPARC->XC, "vdWDF1") == 0) {
initialization.c:1353:    } else if (strcmpi(pSPARC->XC, "vdWDF2") == 0) {
initialization.c:1356:    for (int ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
initialization.c:1357:        if (!pSPARC->usefock && pSPARC->psd[ityp].pspxc != ixc) {
initialization.c:1360:                    &pSPARC->atomType[ityp*L_ATMTYPE], pSPARC->psd[ityp].pspxc, ixc, pSPARC->XC);
initialization.c:1362:        if (pSPARC->usefock && pSPARC->psd[ityp].pspxc != 11) {
initialization.c:1365:                    &pSPARC->atomType[ityp*L_ATMTYPE], pSPARC->psd[ityp].pspxc);
initialization.c:1369:    if (strcmpi(pSPARC->XC,"HSE") == 0) {
initialization.c:1370:        // pSPARC->hyb_range_fock = 0.106;     // QE's value
initialization.c:1371:        // pSPARC->hyb_range_pbe = 0.106;      // QE's value
initialization.c:1372:        // pSPARC->hyb_range_fock = 0.106066017177982;     // ABINIT's value
initialization.c:1373:        // pSPARC->hyb_range_pbe = 0.188988157484231;      // ABINIT's value
initialization.c:1375:            printf("Careful: You are using HSE with range-separation parameter omega_HF = %.6f and omega_PBE = %.6f\n", pSPARC->hyb_range_fock, pSPARC->hyb_range_pbe);
initialization.c:1379:        pSPARC->hyb_range_fock = -1;
initialization.c:1380:        pSPARC->hyb_range_pbe = -1;
initialization.c:1383:    strncpy(pSPARC->filename , pSPARC_Input->filename,sizeof(pSPARC->filename));
initialization.c:1384:    strncpy(pSPARC->filename_out , pSPARC_Input->filename_out,sizeof(pSPARC->filename_out));
initialization.c:1385:    strncpy(pSPARC->SPARCROOT , pSPARC_Input->SPARCROOT,sizeof(pSPARC->SPARCROOT));
initialization.c:1388:    Ntypes = pSPARC->Ntypes;
initialization.c:1391:    pSPARC->Nelectron = 0;
initialization.c:1393:        pSPARC->Nelectron += pSPARC->Znucl[i] * pSPARC->nAtomv[i];
initialization.c:1395:    pSPARC->Nelectron -= pSPARC->NetCharge;
initialization.c:1400:        if (pSPARC->psd[ityp].fchrg > TEMP_TOL) {
initialization.c:1405:    pSPARC->NLCC_flag = NLCC_flag;
initialization.c:1408:    pSPARC->mGGAflag = 0;
initialization.c:1409:    if (strcmpi(pSPARC->XC, "SCAN") == 0) { // it can be expand, such as adding r2SCAN 
initialization.c:1410:        pSPARC->mGGAflag = 1;
initialization.c:1413:    pSPARC->vdWDFFlag = 0;
initialization.c:1414:    if (strcmpi(pSPARC->XC,"vdWDF1") == 0) {
initialization.c:1415:        pSPARC->vdWDFFlag = 1;
initialization.c:1417:    if (strcmpi(pSPARC->XC,"vdWDF2") == 0) {
initialization.c:1418:        pSPARC->vdWDFFlag = 2;
initialization.c:1422:    pSPARC->Esc = 0.0;
initialization.c:1423:    pSPARC->Efermi = 0.0;
initialization.c:1424:    pSPARC->Exc = 0.0;
initialization.c:1425:    pSPARC->Eband = 0.0;
initialization.c:1426:    pSPARC->Entropy = 0.0;
initialization.c:1427:    pSPARC->Etot = 0.0;
initialization.c:1430:    if(pSPARC->spin_typ == 0) {
initialization.c:1432:        pSPARC->Nspin = 1;
initialization.c:1433:        pSPARC->Nspden = 1;
initialization.c:1434:        if (pSPARC->SOC_Flag == 1) {
initialization.c:1435:            pSPARC->Nspinor = 2;
initialization.c:1437:            pSPARC->Nspinor = 1;
initialization.c:1439:    } else if (pSPARC->spin_typ == 1) {
initialization.c:1441:        if (pSPARC->SOC_Flag == 1) {
initialization.c:1442:            pSPARC->Nspinor = 2;
initialization.c:1443:            pSPARC->Nspin = 1;
initialization.c:1445:            pSPARC->Nspinor = 1;
initialization.c:1446:            pSPARC->Nspin = 2;
initialization.c:1448:        pSPARC->Nspden = 2;
initialization.c:1449:    } else if (pSPARC->spin_typ == 2) {
initialization.c:1451:        pSPARC->Nspin = 1;
initialization.c:1452:        pSPARC->Nspinor = 2;
initialization.c:1453:        pSPARC->Nspden = 4;
initialization.c:1460:    pSPARC->occfac = 2.0/pSPARC->Nspin/pSPARC->Nspinor;
initialization.c:1465:            pSPARC->spin_typ, pSPARC->SOC_Flag, pSPARC->Nspin, pSPARC->Nspinor, pSPARC->Nspden, pSPARC->occfac);
initialization.c:1469:    if (pSPARC->Nstates == -1) {
initialization.c:1471:        pSPARC->Nstates = (int) ((pSPARC->Nelectron / 2) * 1.2 + 5)*pSPARC->Nspinor;
initialization.c:1475:    if (pSPARC->ext_FPMD_Flag != 0) {
initialization.c:1476:        if (pSPARC->ext_FPMD_nscut >= 0) {
initialization.c:1477:            pSPARC->Nstates = pSPARC->ext_FPMD_nscut;
initialization.c:1480:        if (pSPARC->Nspinor == 1) {
initialization.c:1481:            if (pSPARC->Nstates < (pSPARC->Nelectron / 2) && !pSPARC->SQFlag && !pSPARC->OFDFTFlag) {
initialization.c:1485:        } else if (pSPARC->Nspinor == 2) {
initialization.c:1486:            if (pSPARC->Nstates < pSPARC->Nelectron && !pSPARC->SQFlag && !pSPARC->OFDFTFlag) {
initialization.c:1495:        snprintf(pSPARC->OutFilename,       L_STRING, "%s.out"  ,     pSPARC->filename_out);
initialization.c:1496:        snprintf(pSPARC->StaticFilename,    L_STRING, "%s.static",     pSPARC->filename_out);
initialization.c:1497:        snprintf(pSPARC->AtomFilename,      L_STRING, "%s.atom",      pSPARC->filename_out);
initialization.c:1498:        snprintf(pSPARC->DensFilename,      L_STRING, "%s.dens",      pSPARC->filename_out);
initialization.c:1499:        snprintf(pSPARC->EigenFilename,     L_STRING, "%s.eigen",     pSPARC->filename_out);
initialization.c:1500:        snprintf(pSPARC->MDFilename,        L_STRING, "%s.aimd",      pSPARC->filename_out);
initialization.c:1501:        snprintf(pSPARC->RelaxFilename,     L_STRING, "%s.geopt",     pSPARC->filename_out);
initialization.c:1502:        snprintf(pSPARC->restart_Filename,  L_STRING, "%s.restart",   pSPARC->filename_out);
initialization.c:1503:        snprintf(pSPARC->restartC_Filename, L_STRING, "%s.restart-0", pSPARC->filename_out);
initialization.c:1504:        snprintf(pSPARC->restartP_Filename, L_STRING, "%s.restart-1", pSPARC->filename_out);
initialization.c:1505:        snprintf(pSPARC->EnergyDensFilename,L_STRING, "%s.endens",    pSPARC->filename_out);
initialization.c:1509:        snprintf(temp_outfname, L_STRING, "%s", pSPARC->OutFilename);
initialization.c:1517:            snprintf(temp_outfname, L_STRING, "%s_%02d", pSPARC->OutFilename, i);
initialization.c:1519:        pSPARC->suffixNum = i; // note that this is only known to rank 0!
initialization.c:1537:                     "         Current output name (without suffix): %s\n\n", pSPARC->filename_out);
initialization.c:1540:            snprintf(tempchar, L_STRING, "%s", pSPARC->OutFilename);
initialization.c:1541:            snprintf(pSPARC->OutFilename,   L_STRING, "%s_%02d", tempchar, i);
initialization.c:1542:            snprintf(tempchar, L_STRING, "%s", pSPARC->StaticFilename);
initialization.c:1543:            snprintf(pSPARC->StaticFilename, L_STRING, "%s_%02d", tempchar, i);
initialization.c:1544:            snprintf(tempchar, L_STRING, "%s", pSPARC->AtomFilename);
initialization.c:1545:            snprintf(pSPARC->AtomFilename,  L_STRING, "%s_%02d", tempchar, i);
initialization.c:1546:            snprintf(tempchar, L_STRING, "%s", pSPARC->DensFilename);
initialization.c:1547:            snprintf(pSPARC->DensFilename,  L_STRING, "%s_%02d", tempchar, i);
initialization.c:1548:            snprintf(tempchar, L_STRING, "%s", pSPARC->EigenFilename);
initialization.c:1549:            snprintf(pSPARC->EigenFilename, L_STRING, "%s_%02d", tempchar, i);
initialization.c:1550:            snprintf(tempchar, L_STRING, "%s", pSPARC->MDFilename);
initialization.c:1551:            snprintf(pSPARC->MDFilename,    L_STRING, "%s_%02d", tempchar, i);
initialization.c:1552:            snprintf(tempchar, L_STRING, "%s", pSPARC->RelaxFilename);
initialization.c:1553:            snprintf(pSPARC->RelaxFilename, L_STRING, "%s_%02d", tempchar, i);
initialization.c:1554:            snprintf(tempchar, L_STRING, "%s", pSPARC->EnergyDensFilename);
initialization.c:1555:            snprintf(pSPARC->EnergyDensFilename,L_STRING, "%s_%02d", tempchar, i);
initialization.c:1559:    pSPARC->RelaxCount = 0; // initialize current relaxation step
initialization.c:1560:    pSPARC->StressCount = 0; // initialize current stress relaxation step (used in full relaxation)
initialization.c:1561:    pSPARC->elecgs_Count = 0; // count the number of times forces are calculated(useful in relaxation)
initialization.c:1562:    pSPARC->MDCount = 0; // initialize current MD step
initialization.c:1563:    pSPARC->StopCount = 0;
initialization.c:1564:    pSPARC->restartCount = 0;
initialization.c:1565:    pSPARC->amu2au = CONST_AMU2AU; // 1 au = 9.10938356e-31 Kg; 1 amu =  1.660539040e-27 Kg;
initialization.c:1566:    pSPARC->fs2atu = CONST_FS2ATU; //1atu = 2.418884326509e-17 s;
initialization.c:1567:    pSPARC->kB = CONST_KB; // Boltzmann constant in Ha/K
initialization.c:1569:    if(pSPARC->RelaxFlag == 2 || pSPARC->RelaxFlag == 3){   
initialization.c:1570:        pSPARC->Printrestart = 0;   
initialization.c:1574:    pSPARC->xc_rhotol = 1e-14;
initialization.c:1576:    if (pSPARC->Beta < 0) {
initialization.c:1577:        if (pSPARC->elec_T_type == 1) { // gaussian
initialization.c:1579:            pSPARC->Beta = CONST_EH / 0.2; // smearing = 0.2 eV = 0.00734986450 Ha, Beta := 1 / smearing
initialization.c:1582:            pSPARC->Beta = CONST_EH / 0.1; // smearing = 0.1 eV = 0.00367493225 Ha, Beta := 1 / smearing
initialization.c:1584:        pSPARC->elec_T = 1./(pSPARC->kB * pSPARC->Beta);
initialization.c:1590:    pSPARC->cell_typ = 0; // orthogonal cell by default
initialization.c:1593:            mult = fabs(pSPARC->LatVec[3*i] * pSPARC->LatVec[3*j] + pSPARC->LatVec[3*i+1] * pSPARC->LatVec[3*j+1] + pSPARC->LatVec[3*i+2] * pSPARC->LatVec[3*j+2]);
initialization.c:1595:                pSPARC->cell_typ = 1;
initialization.c:1603:    pSPARC->CyclixFlag = (pSPARC->BC >= 5 && pSPARC->BC <=7);
initialization.c:1605:    if (pSPARC->CyclixFlag && !rank) printf("Starts cyclix code.\n");
initialization.c:1607:    if (pSPARC->CyclixFlag) {
initialization.c:1610:        if (pSPARC->BC > 0) {
initialization.c:1611:            if (pSPARC->BC == 1) {
initialization.c:1613:                pSPARC->BCx = 1; pSPARC->BCy = 1; pSPARC->BCz = 1;
initialization.c:1614:            } else if (pSPARC->BC == 2 || pSPARC->BC == 0) {
initialization.c:1616:                pSPARC->BCx = 0; pSPARC->BCy = 0; pSPARC->BCz = 0;
initialization.c:1617:            } else if (pSPARC->BC == 3) {
initialization.c:1619:                pSPARC->BCx = 0; pSPARC->BCy = 0; pSPARC->BCz = 1;
initialization.c:1620:            } else if (pSPARC->BC == 4) {
initialization.c:1622:                pSPARC->BCx = 1; pSPARC->BCy = 1; pSPARC->BCz = 0;
initialization.c:1623:            } else if (pSPARC->BC > 7) {
initialization.c:1626:        } else if (pSPARC->BCx >= 0 && pSPARC->BCy >= 0 && pSPARC->BCz >= 0) {
initialization.c:1627:            int n_Dirichlet = pSPARC->BCx + pSPARC->BCy + pSPARC->BCz;
initialization.c:1629:                case 0: pSPARC->BC = 2; break;
initialization.c:1630:                case 1: pSPARC->BC = 3; break;
initialization.c:1631:                case 2: pSPARC->BC = 4; break;
initialization.c:1632:                case 3: pSPARC->BC = 1; break;
initialization.c:1637:            pSPARC->BC = 2;
initialization.c:1638:            pSPARC->BCx = pSPARC->BCy = pSPARC->BCz = 0;
initialization.c:1642:    FDn = pSPARC->order / 2;    // half the FD order
initialization.c:1644:    if (pSPARC->ecut > 0) {
initialization.c:1645:        double h_ecut = Ecut2h(pSPARC->ecut, FDn);
initialization.c:1646:        pSPARC->numIntervals_x = max(round(pSPARC->range_x/h_ecut),FDn);
initialization.c:1647:        pSPARC->numIntervals_y = max(round(pSPARC->range_y/h_ecut),FDn);
initialization.c:1648:        pSPARC->numIntervals_z = max(round(pSPARC->range_z/h_ecut),FDn);
initialization.c:1649:    } else if (pSPARC->mesh_spacing > 0) {
initialization.c:1650:        pSPARC->numIntervals_x = max(round(pSPARC->range_x/pSPARC->mesh_spacing),FDn);
initialization.c:1651:        pSPARC->numIntervals_y = max(round(pSPARC->range_y/pSPARC->mesh_spacing),FDn);
initialization.c:1652:        pSPARC->numIntervals_z = max(round(pSPARC->range_z/pSPARC->mesh_spacing),FDn);
initialization.c:1656:    pSPARC->Nx = pSPARC->numIntervals_x + pSPARC->BCx;
initialization.c:1657:    pSPARC->Ny = pSPARC->numIntervals_y + pSPARC->BCy;
initialization.c:1658:    pSPARC->Nz = pSPARC->numIntervals_z + pSPARC->BCz;
initialization.c:1659:    pSPARC->Nd = pSPARC->Nx * pSPARC->Ny * pSPARC->Nz;
initialization.c:1662:    pSPARC->delta_x = pSPARC->range_x/(pSPARC->numIntervals_x);
initialization.c:1663:    pSPARC->delta_y = pSPARC->range_y/(pSPARC->numIntervals_y);
initialization.c:1664:    pSPARC->delta_z = pSPARC->range_z/(pSPARC->numIntervals_z);
initialization.c:1665:    pSPARC->dV = pSPARC->delta_x * pSPARC->delta_y * pSPARC->delta_z; // will be multiplied by the Jacobian later
initialization.c:1667:    pSPARC->Jacbdet = 1.0;
initialization.c:1669:    if (pSPARC->cell_typ < 20) {
initialization.c:1675:    if(pSPARC->cell_typ != 0){
initialization.c:1677:        for(i = 0; i < pSPARC->Ntypes; i++){
initialization.c:1678:            if(pSPARC->IsFrac[i] == 0){
initialization.c:1679:                for(atm = 0; atm < pSPARC->nAtomv[i]; atm++) {
initialization.c:1680:                    Cart2nonCart_coord(pSPARC, &pSPARC->atom_pos[3*count], &pSPARC->atom_pos[3*count+1], &pSPARC->atom_pos[3*count+2]);
initialization.c:1684:                count += pSPARC->nAtomv[i];
initialization.c:1689:    pSPARC->xin = 0.0; // starting coordinate (global) of the cell in the x-direction
initialization.c:1690:    if (pSPARC->CyclixFlag) {
initialization.c:1695:    if(pSPARC->spin_typ == 1) { // collinear spin calculation
initialization.c:1698:        for(i = 0; i < pSPARC->Ntypes; i++){
initialization.c:1699:            if(pSPARC->IsSpin[i] == 0){
initialization.c:1700:                for (atm = 0; atm < pSPARC->nAtomv[i]; atm++) {
initialization.c:1701:                    pSPARC->atom_spin[count] = -pSPARC->Znucl[i] + 2 * pSPARC->Znucl[i] * ((double) rand() / RAND_MAX);
initialization.c:1705:                count += pSPARC->nAtomv[i];
initialization.c:1711:    pSPARC->dV *= pSPARC->Jacbdet;
initialization.c:1714:    if (pSPARC->BCx == 0) {
initialization.c:1716:        for (i = 0; i < pSPARC->n_atom; i++) {
initialization.c:1717:            x = *(pSPARC->atom_pos+3*i);
initialization.c:1718:            if (x < 0 || x > pSPARC->range_x)
initialization.c:1720:                x = fmod(x,pSPARC->range_x);
initialization.c:1721:                *(pSPARC->atom_pos+3*i) = x + (x<0.0)*pSPARC->range_x;
initialization.c:1727:        for (i = 0; i < pSPARC->n_atom; i++) {
initialization.c:1728:            x = *(pSPARC->atom_pos+3*i);
initialization.c:1729:            printf("x = %f, xin %f, pSPARC->range_x + pSPARC->xin %f\n", x, pSPARC->xin, pSPARC->range_x + pSPARC->xin);
initialization.c:1730:            if (x < pSPARC->xin || x > pSPARC->range_x + pSPARC->xin)
initialization.c:1738:    if (pSPARC->BCy == 0) {
initialization.c:1740:        for (i = 0; i < pSPARC->n_atom; i++) {
initialization.c:1741:            y = *(pSPARC->atom_pos+1+3*i);
initialization.c:1742:            if (y < 0 || y > pSPARC->range_y)
initialization.c:1744:                y = fmod(y,pSPARC->range_y);
initialization.c:1745:                *(pSPARC->atom_pos+1+3*i) = y + (y<0.0)*pSPARC->range_y;
initialization.c:1751:        for (i = 0; i < pSPARC->n_atom; i++) {
initialization.c:1752:            y = *(pSPARC->atom_pos+1+3*i);
initialization.c:1753:            if (y < 0 || y > pSPARC->range_y)
initialization.c:1761:    if (pSPARC->BCz == 0) {
initialization.c:1763:        for (i = 0; i < pSPARC->n_atom; i++) {
initialization.c:1764:            z = *(pSPARC->atom_pos+2+3*i);
initialization.c:1765:            if (z < 0 || z > pSPARC->range_z)
initialization.c:1767:                z = fmod(z,pSPARC->range_z);
initialization.c:1768:                *(pSPARC->atom_pos+2+3*i) = z + (z<0.0)*pSPARC->range_z;
initialization.c:1774:        for (i = 0; i < pSPARC->n_atom; i++) {
initialization.c:1775:            z = *(pSPARC->atom_pos+2+3*i);
initialization.c:1776:            if (z < 0 || z > pSPARC->range_z)
initialization.c:1786:        printf("\nRange:\n%12.6f\t%12.6f\t%12.6f\n",pSPARC->range_x,pSPARC->range_y,pSPARC->range_z);
initialization.c:1788:        for (i = 0; i < 3 * pSPARC->n_atom; i++) {
initialization.c:1789:            printf("%12.6f\t",pSPARC->atom_pos[i]);
initialization.c:1796:    pSPARC->FDweights_D1 = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1797:    pSPARC->FDweights_D2 = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1798:    pSPARC->D1_stencil_coeffs_x = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1799:    pSPARC->D1_stencil_coeffs_y = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1800:    pSPARC->D1_stencil_coeffs_z = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1801:    pSPARC->D2_stencil_coeffs_x = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1802:    pSPARC->D2_stencil_coeffs_y = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1803:    pSPARC->D2_stencil_coeffs_z = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1804:    if (pSPARC->FDweights_D1 == NULL || pSPARC->FDweights_D1 == NULL ||
initialization.c:1805:        pSPARC->D1_stencil_coeffs_x == NULL || pSPARC->D1_stencil_coeffs_y == NULL ||
initialization.c:1806:        pSPARC->D1_stencil_coeffs_z == NULL || pSPARC->D2_stencil_coeffs_x == NULL ||
initialization.c:1807:        pSPARC->D2_stencil_coeffs_y == NULL || pSPARC->D2_stencil_coeffs_z == NULL) {
initialization.c:1813:    pSPARC->FDweights_D1[0] = 0;
initialization.c:1815:        pSPARC->FDweights_D1[p] = (2*(p%2)-1) * fract(FDn,p) / p;
initialization.c:1818:    pSPARC->FDweights_D2[0] = 0;
initialization.c:1820:        pSPARC->FDweights_D2[0] -= (2.0/(p*p));
initialization.c:1821:        pSPARC->FDweights_D2[p] = (2*(p%2)-1) * 2 * fract(FDn,p) / (p*p);
initialization.c:1826:    dx_inv = 1.0 / pSPARC->delta_x;
initialization.c:1827:    dy_inv = 1.0 / pSPARC->delta_y;
initialization.c:1828:    dz_inv = 1.0 / pSPARC->delta_z;
initialization.c:1830:        pSPARC->D1_stencil_coeffs_x[p] = pSPARC->FDweights_D1[p] * dx_inv;
initialization.c:1831:        pSPARC->D1_stencil_coeffs_y[p] = pSPARC->FDweights_D1[p] * dy_inv;
initialization.c:1832:        pSPARC->D1_stencil_coeffs_z[p] = pSPARC->FDweights_D1[p] * dz_inv;
initialization.c:1837:    dx2_inv = 1.0 / (pSPARC->delta_x * pSPARC->delta_x);
initialization.c:1838:    dy2_inv = 1.0 / (pSPARC->delta_y * pSPARC->delta_y);
initialization.c:1839:    dz2_inv = 1.0 / (pSPARC->delta_z * pSPARC->delta_z);
initialization.c:1842:    if(pSPARC->cell_typ == 0){
initialization.c:1844:            pSPARC->D2_stencil_coeffs_x[p] = pSPARC->FDweights_D2[p] * dx2_inv;
initialization.c:1845:            pSPARC->D2_stencil_coeffs_y[p] = pSPARC->FDweights_D2[p] * dy2_inv;
initialization.c:1846:            pSPARC->D2_stencil_coeffs_z[p] = pSPARC->FDweights_D2[p] * dz2_inv;
initialization.c:1848:    } else if (pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
initialization.c:1849:        pSPARC->D2_stencil_coeffs_xy = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1850:        pSPARC->D2_stencil_coeffs_yz = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1851:        pSPARC->D2_stencil_coeffs_xz = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1852:        pSPARC->D1_stencil_coeffs_xy = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1853:        pSPARC->D1_stencil_coeffs_yx = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1854:        pSPARC->D1_stencil_coeffs_xz = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1855:        pSPARC->D1_stencil_coeffs_zx = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1856:        pSPARC->D1_stencil_coeffs_yz = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1857:        pSPARC->D1_stencil_coeffs_zy = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1858:        if ( pSPARC->D2_stencil_coeffs_xy == NULL || pSPARC->D2_stencil_coeffs_yz == NULL || pSPARC->D2_stencil_coeffs_xz == NULL
initialization.c:1859:            || pSPARC->D1_stencil_coeffs_xy == NULL || pSPARC->D1_stencil_coeffs_yx == NULL || pSPARC->D1_stencil_coeffs_xz == NULL
initialization.c:1860:            || pSPARC->D1_stencil_coeffs_zx == NULL || pSPARC->D1_stencil_coeffs_yz == NULL || pSPARC->D1_stencil_coeffs_zy == NULL) {
initialization.c:1865:            pSPARC->D2_stencil_coeffs_x[p] = pSPARC->lapcT[0] * pSPARC->FDweights_D2[p] * dx2_inv;
initialization.c:1866:            pSPARC->D2_stencil_coeffs_y[p] = pSPARC->lapcT[4] * pSPARC->FDweights_D2[p] * dy2_inv;
initialization.c:1867:            pSPARC->D2_stencil_coeffs_z[p] = pSPARC->lapcT[8] * pSPARC->FDweights_D2[p] * dz2_inv;
initialization.c:1868:            pSPARC->D2_stencil_coeffs_xy[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dx_inv; // 2*T_12 d/dx(df/dy)
initialization.c:1869:            pSPARC->D2_stencil_coeffs_xz[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dx_inv; // 2*T_13 d/dx(df/dz)
initialization.c:1870:            pSPARC->D2_stencil_coeffs_yz[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dy_inv; // 2*T_23 d/dy(df/dz)
initialization.c:1871:            pSPARC->D1_stencil_coeffs_xy[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dy_inv; // d/dx(2*T_12 df/dy) used in d/dx(2*T_12 df/dy + 2*T_13 df/dz)
initialization.c:1872:            pSPARC->D1_stencil_coeffs_yx[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dx_inv; // d/dy(2*T_12 df/dx) used in d/dy(2*T_12 df/dx + 2*T_23 df/dz)
initialization.c:1873:            pSPARC->D1_stencil_coeffs_xz[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dz_inv; // d/dx(2*T_13 df/dz) used in d/dx(2*T_12 df/dy + 2*T_13 df/dz)
initialization.c:1874:            pSPARC->D1_stencil_coeffs_zx[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dx_inv; // d/dz(2*T_13 df/dx) used in d/dz(2*T_13 df/dz + 2*T_23 df/dy)
initialization.c:1875:            pSPARC->D1_stencil_coeffs_yz[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dz_inv; // d/dy(2*T_23 df/dz) used in d/dy(2*T_12 df/dx + 2*T_23 df/dz)
initialization.c:1876:            pSPARC->D1_stencil_coeffs_zy[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dy_inv; // d/dz(2*T_23 df/dy) used in d/dz(2*T_12 df/dx + 2*T_23 df/dy)
initialization.c:1880:    if (pSPARC->CyclixFlag) {
initialization.c:1881:        pSPARC->D2_stencil_coeffs_yz = (double *)malloc((FDn + 1) * sizeof(double));
initialization.c:1882:        if ( pSPARC->D2_stencil_coeffs_yz == NULL) {
initialization.c:1892:    pSPARC->MaxEigVal_mhalfLap = 0.0; // initialize to 0 to avoid accessing uninitialized variable
initialization.c:1893:    if(pSPARC->cell_typ == 0) {
initialization.c:1895:        pSPARC->MaxEigVal_mhalfLap = pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_y[0]
initialization.c:1896:                                     + pSPARC->D2_stencil_coeffs_z[0];
initialization.c:1898:        scal_x = (pSPARC->Nx - pSPARC->Nx % 2) / (double) pSPARC->Nx;
initialization.c:1899:        scal_y = (pSPARC->Ny - pSPARC->Ny % 2) / (double) pSPARC->Ny;
initialization.c:1900:        scal_z = (pSPARC->Nz - pSPARC->Nz % 2) / (double) pSPARC->Nz;
initialization.c:1902:            pSPARC->MaxEigVal_mhalfLap += 2.0 * (pSPARC->D2_stencil_coeffs_x[p] * cos(M_PI*p*scal_x) 
initialization.c:1903:                                               + pSPARC->D2_stencil_coeffs_y[p] * cos(M_PI*p*scal_y) 
initialization.c:1904:                                               + pSPARC->D2_stencil_coeffs_z[p] * cos(M_PI*p*scal_z));
initialization.c:1906:        pSPARC->MaxEigVal_mhalfLap *= -0.5;
initialization.c:1907:    } else if (pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
initialization.c:1910:        pSPARC->MaxEigVal_mhalfLap = pSPARC->D2_stencil_coeffs_x[0]  // note lapcT[0] is already multiplied in D2_stencil_coeffs_x above
initialization.c:1911:                                   + pSPARC->D2_stencil_coeffs_y[0]
initialization.c:1912:                                   + pSPARC->D2_stencil_coeffs_z[0];
initialization.c:1914:        scal_x = (pSPARC->Nx - pSPARC->Nx % 2) / (double) pSPARC->Nx;
initialization.c:1915:        scal_y = (pSPARC->Ny - pSPARC->Ny % 2) / (double) pSPARC->Ny;
initialization.c:1916:        scal_z = (pSPARC->Nz - pSPARC->Nz % 2) / (double) pSPARC->Nz;
initialization.c:1918:            pSPARC->MaxEigVal_mhalfLap += 2.0 * pSPARC->D2_stencil_coeffs_x[p] * cos(M_PI*p*scal_x) 
initialization.c:1919:                                        + 2.0 * pSPARC->D2_stencil_coeffs_y[p] * cos(M_PI*p*scal_y) 
initialization.c:1920:                                        + 2.0 * pSPARC->D2_stencil_coeffs_z[p] * cos(M_PI*p*scal_z);
initialization.c:1926:            sx += 2.0 * pSPARC->D1_stencil_coeffs_x[p] * sin(M_PI*p*scal_x); // very close to 0 (exactly 0 for even Nx)
initialization.c:1927:            sy += 2.0 * pSPARC->D1_stencil_coeffs_y[p] * sin(M_PI*p*scal_y); // very close to 0 (exactly 0 for even Ny)
initialization.c:1928:            sz += 2.0 * pSPARC->D1_stencil_coeffs_z[p] * sin(M_PI*p*scal_z); // very close to 0 (exactly 0 for even Nz)
initialization.c:1931:        pSPARC->MaxEigVal_mhalfLap += 2.0 * pSPARC->lapcT[1] * sx * sy; // x,y
initialization.c:1932:        pSPARC->MaxEigVal_mhalfLap += 2.0 * pSPARC->lapcT[2] * sx * sz; // x,z
initialization.c:1933:        pSPARC->MaxEigVal_mhalfLap += 2.0 * pSPARC->lapcT[5] * sy * sz; // y,z
initialization.c:1934:        pSPARC->MaxEigVal_mhalfLap *= -0.5;
initialization.c:1938:        if (!rank) printf("Max eigenvalue of -0.5*Lap is %.13f, time taken: %.3f ms\n",pSPARC->MaxEigVal_mhalfLap, (t2-t1)*1e3);
initialization.c:1942:    if (pSPARC->ChebDegree < 0) {
initialization.c:1944:        if (pSPARC->cell_typ == 0) {
initialization.c:1945:            if (fabs(pSPARC->delta_x - pSPARC->delta_y) < 1E-12 &&
initialization.c:1946:                fabs(pSPARC->delta_y - pSPARC->delta_z) < 1E-12) {
initialization.c:1947:                h_eff = pSPARC->delta_x;
initialization.c:1952:        } else if (pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
initialization.c:1955:            h_eff = sqrt(3.0*lambda_ref/(2.0*pSPARC->MaxEigVal_mhalfLap));
initialization.c:1957:        pSPARC->ChebDegree = Mesh2ChebDegree(h_eff);
initialization.c:1962:        if (!rank) printf("h_eff = %.2f, npl = %d\n", h_eff,pSPARC->ChebDegree);
initialization.c:1968:        if (!rank) printf("Chebyshev polynomial degree (provided by user): npl = %d\n",pSPARC->ChebDegree);
initialization.c:1973:    if (pSPARC->DDBP_tol_updatebasis_first_EGS < 0.0) {
initialization.c:1974:        pSPARC->DDBP_tol_updatebasis_first_EGS = pSPARC->DDBP_tol_updatebasis;
initialization.c:1978:    if (pSPARC->MixingParameterSimple < 0.0) {
initialization.c:1979:        pSPARC->MixingParameterSimple = pSPARC->MixingParameter;
initialization.c:1984:    if (pSPARC->MixingParameterMag < 0.0) {
initialization.c:1985:        pSPARC->MixingParameterMag = pSPARC->MixingParameter;
initialization.c:1990:    if (pSPARC->MixingParameterSimpleMag < 0.0) {
initialization.c:1991:        pSPARC->MixingParameterSimpleMag = pSPARC->MixingParameterMag;
initialization.c:1994:    if (pSPARC->MixingVariable < 0) { // mixing variable not provided
initialization.c:1995:        pSPARC->MixingVariable = 0; // set default to 'density'
initialization.c:1998:    if (pSPARC->MixingPrecond < 0) { // mixing preconditioner not provided
initialization.c:1999:        pSPARC->MixingPrecond = 1;  // set default to 'Kerker' preconditioner
initialization.c:2002:    if (pSPARC->MixingPrecondMag < 0) { // mixing preconditioner for magnetization not provided
initialization.c:2003:        pSPARC->MixingPrecondMag = 0;  // set default to 'none'
initialization.c:2007:    if (pSPARC->MixingPrecond == 2) { // coeff for Resta preconditioner
initialization.c:2008:        pSPARC->precondcoeff_n = 1;
initialization.c:2009:        pSPARC->precondcoeff_a = (double complex *)malloc(pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2010:        pSPARC->precondcoeff_lambda_sqr = (double complex *)malloc(pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2011:        pSPARC->precondcoeff_a[0]          = 0.820368124615603 - 0.330521220406859 * I;
initialization.c:2012:        pSPARC->precondcoeff_lambda_sqr[0] = 1.539184309857566 + 1.454446707757472 * I;
initialization.c:2013:        pSPARC->precondcoeff_k             = 0.179473117041025;
initialization.c:2024:            if (pSPARC->precond_fitpow == 2) {
initialization.c:2026:                if (!rank) printf(RED "Using coeffs for MoS2 system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2029:                pSPARC->precondcoeff_n = 1;
initialization.c:2031:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2032:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2033:                pSPARC->precondcoeff_a[0]          = 0.897326075519806 - 0.837703986538753 * I;
initialization.c:2034:                pSPARC->precondcoeff_lambda_sqr[0] = 0.328766315380339 + 0.183508748834006 * I;
initialization.c:2035:                pSPARC->precondcoeff_k             = 0.102576229227011;
initialization.c:2036:            } else if (pSPARC->precond_fitpow == 4) {
initialization.c:2038:                if (!rank) printf(RED "Using coeffs for MoS2 system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2040:                pSPARC->precondcoeff_n = 3;
initialization.c:2042:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2043:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2044:                pSPARC->precondcoeff_a[0]          = 0.797410061005122 + 0.000000000000000 * I;
initialization.c:2045:                pSPARC->precondcoeff_a[1]          = -0.000029265620523 + 0.000000000000000 * I;
initialization.c:2046:                pSPARC->precondcoeff_a[2]          = 0.103239343777798 - 0.003381206211038 * I;
initialization.c:2047:                pSPARC->precondcoeff_lambda_sqr[0] = 0.601186842883198 + 0.000000000000000 * I;
initialization.c:2048:                pSPARC->precondcoeff_lambda_sqr[1] = -0.256060441488722 + 0.000000000000000 * I;
initialization.c:2049:                pSPARC->precondcoeff_lambda_sqr[2] = -0.104178068950438 + 0.493948292725977 * I;
initialization.c:2050:                pSPARC->precondcoeff_k             = 0.099398800263940;
initialization.c:2053:            if (pSPARC->precond_fitpow == 2) {
initialization.c:2055:                if (!rank) printf(RED "Using coeffs for Si system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2057:                pSPARC->precondcoeff_n = 1;
initialization.c:2059:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2060:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2061:                pSPARC->precondcoeff_a[0]          = 0.914678024418436 - 1.055347015597097 * I;
initialization.c:2062:                pSPARC->precondcoeff_lambda_sqr[0] = 0.238671535971552 + 0.106323808659314 * I;
initialization.c:2063:                pSPARC->precondcoeff_k             = 0.085289070702772;
initialization.c:2064:            } else if (pSPARC->precond_fitpow == 4) {
initialization.c:2066:                if (!rank) printf(RED "Using coeffs for Si system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2068:                pSPARC->precondcoeff_n = 3;
initialization.c:2070:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2071:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2072:                pSPARC->precondcoeff_a[0]          = -0.000124974499632 + 0.000000000000000 * I;
initialization.c:2073:                pSPARC->precondcoeff_a[1]          = 0.822613437367865 + 0.000000000000000 * I;
initialization.c:2074:                pSPARC->precondcoeff_a[2]          = 0.094666235811611 - 0.004627781592542 * I;
initialization.c:2075:                pSPARC->precondcoeff_lambda_sqr[0] = -1.072175758908308 + 0.000000000000000 * I;
initialization.c:2076:                pSPARC->precondcoeff_lambda_sqr[1] = 0.420975552998538 + 0.000000000000000 * I;
initialization.c:2077:                pSPARC->precondcoeff_lambda_sqr[2] = -0.054999300909744 + 0.349588273989346 * I;
initialization.c:2078:                pSPARC->precondcoeff_k             = 0.082856817316465;
initialization.c:2081:            if (pSPARC->precond_fitpow == 2) {
initialization.c:2083:                if (!rank) printf(RED "Using coeffs for C system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2085:                pSPARC->precondcoeff_n = 1;
initialization.c:2087:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2088:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2089:                pSPARC->precondcoeff_a[0]          = 0.8206 - 0.3427 * I;
initialization.c:2090:                pSPARC->precondcoeff_lambda_sqr[0] = 0.4284 + 0.4019 * I;
initialization.c:2091:                pSPARC->precondcoeff_k             = 0.1793;
initialization.c:2092:            } else if (pSPARC->precond_fitpow == 4) {
initialization.c:2094:                if (!rank) printf(RED "WARNING: coeffs for C system with fitpow %d are not set!\n" RESET, pSPARC->precond_fitpow);
initialization.c:2096:                // pSPARC->precondcoeff_n = 3;
initialization.c:2098:                // pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2099:                // pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2100:                // pSPARC->precondcoeff_a[0]          = -0.000124974499632 + 0.000000000000000 * I;
initialization.c:2101:                // pSPARC->precondcoeff_a[1]          = 0.822613437367865 + 0.000000000000000 * I;
initialization.c:2102:                // pSPARC->precondcoeff_a[2]          = 0.094666235811611 - 0.004627781592542 * I;
initialization.c:2103:                // pSPARC->precondcoeff_lambda_sqr[0] = -1.072175758908308 + 0.000000000000000 * I;
initialization.c:2104:                // pSPARC->precondcoeff_lambda_sqr[1] = 0.420975552998538 + 0.000000000000000 * I;
initialization.c:2105:                // pSPARC->precondcoeff_lambda_sqr[2] = -0.054999300909744 + 0.349588273989346 * I;
initialization.c:2106:                // pSPARC->precondcoeff_k             = 0.082856817316465;
initialization.c:2109:    } else if (pSPARC->MixingPrecond == 3) { // coeff for truncated Kerker preconditioner
initialization.c:2110:        pSPARC->precondcoeff_n = 1;
initialization.c:2111:        pSPARC->precondcoeff_a = (double complex *)malloc(pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2112:        pSPARC->precondcoeff_lambda_sqr = (double complex *)malloc(pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2113:        pSPARC->precondcoeff_a[0]          = 0.740197283447608 - 2.187940485005530 * I;
initialization.c:2114:        pSPARC->precondcoeff_lambda_sqr[0] = 0.515764278984552 + 0.261718938132583 * I;
initialization.c:2115:        pSPARC->precondcoeff_k             = 0.259680843800232;
initialization.c:2126:            if (pSPARC->precond_fitpow == 2) {
initialization.c:2128:                if (!rank) printf(RED "Using coeffs for MoS2 system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2130:                pSPARC->precondcoeff_n = 2;
initialization.c:2132:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2133:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2134:                pSPARC->precondcoeff_a[0]          = 1.069131757115932 + 0.000000000000000 * I;
initialization.c:2135:                pSPARC->precondcoeff_a[1]          = -0.171827850593795 + 0.000000000000000 * I;
initialization.c:2136:                pSPARC->precondcoeff_lambda_sqr[0] = 0.261519729188790 + 0.000000000000000 * I;
initialization.c:2137:                pSPARC->precondcoeff_lambda_sqr[1] = 0.024058288033320 + 0.000000000000000 * I;
initialization.c:2138:                pSPARC->precondcoeff_k             = 0.102669136088733;
initialization.c:2139:            } else if (pSPARC->precond_fitpow == 4) {
initialization.c:2141:                if (!rank) printf(RED "Using coeffs for MoS2 system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2143:                pSPARC->precondcoeff_n = 3;
initialization.c:2145:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2146:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2147:                pSPARC->precondcoeff_a[0]          = 0.000011385765477 + 0.000000000000000 * I;
initialization.c:2148:                pSPARC->precondcoeff_a[1]          = 0.994255001880647 + 0.000000000000000 * I;
initialization.c:2149:                pSPARC->precondcoeff_a[2]          = -0.093994967542657 - 0.006240439304379 * I;
initialization.c:2150:                pSPARC->precondcoeff_lambda_sqr[0] = -0.580143676837624 + 0.000000000000000 * I;
initialization.c:2151:                pSPARC->precondcoeff_lambda_sqr[1] = 0.281390031341584 + 0.000000000000000 * I;
initialization.c:2152:                pSPARC->precondcoeff_lambda_sqr[2] = -0.005192385910338 + 0.009670637051448 * I;
initialization.c:2153:                pSPARC->precondcoeff_k             = 0.099729735832187;
initialization.c:2156:            if (pSPARC->precond_fitpow == 2) {
initialization.c:2158:                if (!rank) printf(RED "Using coeffs for Si system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2160:                pSPARC->precondcoeff_n = 2;
initialization.c:2162:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2163:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2164:                pSPARC->precondcoeff_a[0]          = 1.045423322787217 + 0.000000000000000 * I;
initialization.c:2165:                pSPARC->precondcoeff_a[1]          = -0.130145326907590 + 0.000000000000000 * I;
initialization.c:2166:                pSPARC->precondcoeff_lambda_sqr[0] = 0.267115428215830 + 0.000000000000000 * I;
initialization.c:2167:                pSPARC->precondcoeff_lambda_sqr[1] = 0.019530203373891 + 0.000000000000000 * I;
initialization.c:2168:                pSPARC->precondcoeff_k             = 0.084702403406033;
initialization.c:2169:            } else if (pSPARC->precond_fitpow == 4) {
initialization.c:2171:                if (!rank) printf(RED "Using coeffs for Si system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2173:                pSPARC->precondcoeff_n = 3;
initialization.c:2175:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2176:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2177:                pSPARC->precondcoeff_a[0]          = -0.000450002447564 + 0.000000000000000 * I;
initialization.c:2178:                pSPARC->precondcoeff_a[1]          = 0.991616958994114 + 0.000000000000000 * I;
initialization.c:2179:                pSPARC->precondcoeff_a[2]          = -0.074468796694241 - 0.014060128507695 * I;
initialization.c:2180:                pSPARC->precondcoeff_lambda_sqr[0] = 3.578501584073372 + 0.000000000000000 * I;
initialization.c:2181:                pSPARC->precondcoeff_lambda_sqr[1] = 0.283063390321347 + 0.000000000000000 * I;
initialization.c:2182:                pSPARC->precondcoeff_lambda_sqr[2] = -0.004905277505535 + 0.011599970024290 * I;
initialization.c:2183:                pSPARC->precondcoeff_k             = 0.083301273707655;
initialization.c:2186:            if (pSPARC->precond_fitpow == 2) {
initialization.c:2188:                if (!rank) printf(RED "Using coeffs for C system with fitpow %d\n" RESET, pSPARC->precond_fitpow);
initialization.c:2190:                pSPARC->precondcoeff_n = 2;
initialization.c:2192:                pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2193:                pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2194:                pSPARC->precondcoeff_a[0]          = 1.2926 + 0.0000 * I;
initialization.c:2195:                pSPARC->precondcoeff_a[1]          = -0.4780 + 0.0000 * I;
initialization.c:2196:                pSPARC->precondcoeff_lambda_sqr[0] = 0.2310 + 0.0000 * I;
initialization.c:2197:                pSPARC->precondcoeff_lambda_sqr[1] = 0.0552 + 0.0000 * I;
initialization.c:2198:                pSPARC->precondcoeff_k             = 0.1854;
initialization.c:2199:            } else if (pSPARC->precond_fitpow == 4) {
initialization.c:2201:                if (!rank) printf(RED "WARNING: coeffs for C system with fitpow %d are not set!\n" RESET, pSPARC->precond_fitpow);
initialization.c:2203:                // pSPARC->precondcoeff_n = 3;
initialization.c:2205:                // pSPARC->precondcoeff_a = realloc(pSPARC->precondcoeff_a, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2206:                // pSPARC->precondcoeff_lambda_sqr = realloc(pSPARC->precondcoeff_lambda_sqr, pSPARC->precondcoeff_n * sizeof(double complex));
initialization.c:2207:                // pSPARC->precondcoeff_a[0]          = -0.000124974499632 + 0.000000000000000 * I;
initialization.c:2208:                // pSPARC->precondcoeff_a[1]          = 0.822613437367865 + 0.000000000000000 * I;
initialization.c:2209:                // pSPARC->precondcoeff_a[2]          = 0.094666235811611 - 0.004627781592542 * I;
initialization.c:2210:                // pSPARC->precondcoeff_lambda_sqr[0] = -1.072175758908308 + 0.000000000000000 * I;
initialization.c:2211:                // pSPARC->precondcoeff_lambda_sqr[1] = 0.420975552998538 + 0.000000000000000 * I;
initialization.c:2212:                // pSPARC->precondcoeff_lambda_sqr[2] = -0.054999300909744 + 0.349588273989346 * I;
initialization.c:2213:                // pSPARC->precondcoeff_k             = 0.082856817316465;
initialization.c:2219:    if (pSPARC->scf_err_type != 0 && pSPARC->scf_err_type != 1) {
initialization.c:2226:    if (pSPARC->scf_err_type == 1) {
initialization.c:2227:        pSPARC->t_qe_extra = 0.0;
initialization.c:2236:    if (pSPARC->TOL_SCF < 0.0) {
initialization.c:2237:        const double log10_neatom = log10(pSPARC->Nelectron / (double) pSPARC->n_atom);
initialization.c:2243:        if (pSPARC->accuracy_level >= 0) {
initialization.c:2244:            target_force_accuracy = pow(10.0, -(pSPARC->accuracy_level + 1.0));
initialization.c:2245:        } else if (pSPARC->target_force_accuracy > 0.0) {
initialization.c:2246:            target_force_accuracy = pSPARC->target_force_accuracy;
initialization.c:2247:        } else if (pSPARC->target_energy_accuracy > 0.0) {
initialization.c:2248:            target_energy_accuracy = pSPARC->target_energy_accuracy;
initialization.c:2261:            pSPARC->TOL_SCF = pow(10.0, (log10_target - b)/a);
initialization.c:2266:            pSPARC->TOL_SCF = pow(10.0, (log10_target - b)/a);
initialization.c:2270:    if (pSPARC->OFDFTFlag == 1 && pSPARC->OFDFT_tol < 0)
initialization.c:2271:        pSPARC->OFDFT_tol = 1E-3;
initialization.c:2274:    if (pSPARC->TOL_PRECOND < 0.0) { // kerker tol not provided by user
initialization.c:2276:        if (fabs(pSPARC->delta_x - pSPARC->delta_y) < 1E-12 &&
initialization.c:2277:            fabs(pSPARC->delta_y - pSPARC->delta_z) < 1E-12) {
initialization.c:2278:            h_eff = pSPARC->delta_x;
initialization.c:2283:        pSPARC->TOL_PRECOND = (h_eff * h_eff) * 1e-3;
initialization.c:2296:    if (pSPARC->TOL_POISSON < 0.0) { // if poisson tol not provided by user
initialization.c:2297:        if (pSPARC->OFDFTFlag == 1)
initialization.c:2298:            pSPARC->TOL_POISSON = pSPARC->OFDFT_tol * 0.01;
initialization.c:2300:            pSPARC->TOL_POISSON = pSPARC->TOL_SCF * 0.01;
initialization.c:2308:    if (pSPARC->TOL_PSEUDOCHARGE < 0.0) { // if rb tol not provided by user
initialization.c:2309:        if (pSPARC->OFDFTFlag == 1)
initialization.c:2310:            pSPARC->TOL_PSEUDOCHARGE = pSPARC->OFDFT_tol * 0.01;
initialization.c:2312:            pSPARC->TOL_PSEUDOCHARGE = pSPARC->TOL_SCF * 0.01;
initialization.c:2317:    int FixRandSeed = pSPARC->FixRandSeed;
initialization.c:2321:    pSPARC->FixRandSeed = FixRandSeed;
initialization.c:2324:    pSPARC->CUTOFF_x = (double *)malloc(Ntypes * sizeof(double));
initialization.c:2325:    pSPARC->CUTOFF_y = (double *)malloc(Ntypes * sizeof(double));
initialization.c:2326:    pSPARC->CUTOFF_z = (double *)malloc(Ntypes * sizeof(double));
initialization.c:2328:    if (pSPARC->CUTOFF_x == NULL || pSPARC->CUTOFF_y == NULL ||
initialization.c:2329:        pSPARC->CUTOFF_z == NULL) {
initialization.c:2338:    // pSPARC->Nkpts_sym = ceil(pSPARC->Kx*pSPARC->Ky*pSPARC->Kz/2.0); 
initialization.c:2339:    pSPARC->Nkpts_sym = pSPARC->Nkpts; // will be updated after actual symmetry reduction
initialization.c:2342:    pSPARC->kptWts = (double *)malloc(pSPARC->Nkpts_sym * sizeof(double));
initialization.c:2343:    pSPARC->k1 = (double *)malloc(pSPARC->Nkpts_sym * sizeof(double));
initialization.c:2344:    pSPARC->k2 = (double *)malloc(pSPARC->Nkpts_sym * sizeof(double));
initialization.c:2345:    pSPARC->k3 = (double *)malloc(pSPARC->Nkpts_sym * sizeof(double));
initialization.c:2350:    pSPARC->isGammaPoint = (int)(pSPARC->Nkpts_sym == 1 
initialization.c:2351:        && fabs(pSPARC->k1[0]) < TEMP_TOL 
initialization.c:2352:        && fabs(pSPARC->k2[0]) < TEMP_TOL 
initialization.c:2353:        && fabs(pSPARC->k3[0]) < TEMP_TOL
initialization.c:2354:        && pSPARC->SOC_Flag == 0);
initialization.c:2369:    if (pSPARC->DDBP_Flag == 1){
initialization.c:2375:    if (pSPARC->usefock == 1 && pSPARC->ACEFlag == 1){
initialization.c:2382:    if (pSPARC->vdWDFFlag != 0){
initialization.c:2383:        if ((pSPARC->BCx)||(pSPARC->BCy)||(pSPARC->BCz)) {
initialization.c:2391:    if (pSPARC->vdWDFFlag != 0){
initialization.c:2399:    if (pSPARC->isGammaPoint != 1 && pSPARC->SQ3Flag == 1){
initialization.c:2407:    if (pSPARC->spin_typ != 0 && pSPARC->SQ3Flag == 1){
initialization.c:2415:    if (pSPARC->CS_Flag == 1) {
initialization.c:2416:        if (pSPARC->Calc_pres || pSPARC->Calc_stress) {
initialization.c:2423:        if (pSPARC->isGammaPoint != 1){
initialization.c:2431:        if (pSPARC->spin_typ != 0) {
initialization.c:2440:    if (pSPARC->DDBP_Flag == 1) {
initialization.c:2441:        if (pSPARC->isGammaPoint != 1){
initialization.c:2449:        if (pSPARC->spin_typ != 0) {
initialization.c:2458:    if (pSPARC->SQ3Flag == 1 && pSPARC->sq3_npl < 0) {
initialization.c:2462:        double est_npl = pow(10.0, -0.8584 * log10(pSPARC->elec_T) + 5.6140);
initialization.c:2464:        pSPARC->sq3_npl = max(10, (int) est_npl);                   // set minimum sq3_npl to 10
initialization.c:2467:    if (pSPARC->SQ3Flag == 1) {
initialization.c:2468:        pSPARC->StandardEigenFlag = 1;    
initialization.c:2471:    if (pSPARC->CS_Flag == 1) 
initialization.c:2472:        pSPARC->StandardEigenFlag = 1;
initialization.c:2476:    if (pSPARC->usefock == 1){
initialization.c:2483:    if (pSPARC->usefock == 1) {
initialization.c:2484:        if (pSPARC->SOC_Flag || pSPARC->SQFlag || pSPARC->OFDFTFlag) {
initialization.c:2489:        if (pSPARC->EXXDiv_Flag < 0) {
initialization.c:2490:            if (pSPARC->BC > 2) {
initialization.c:2495:                pSPARC->EXXDiv_Flag = 1;
initialization.c:2497:                if (strcmpi(pSPARC->XC,"HSE") == 0) {
initialization.c:2502:                    pSPARC->EXXDiv_Flag = 2;
initialization.c:2508:                    pSPARC->EXXDiv_Flag = 0;
initialization.c:2512:            if (strcmpi(pSPARC->XC,"HSE") != 0 && pSPARC->EXXDiv_Flag == 2) {
initialization.c:2518:        if (pSPARC->TOL_FOCK < 0.0) {
initialization.c:2527:            const double log10_neatom = log10(pSPARC->Nelectron / (double) pSPARC->n_atom);
initialization.c:2533:            if (pSPARC->accuracy_level >= 0) {
initialization.c:2534:                target_force_accuracy = pow(10.0, -(pSPARC->accuracy_level + 1.0));
initialization.c:2535:            } else if (pSPARC->target_force_accuracy > 0.0) {
initialization.c:2536:                target_force_accuracy = pSPARC->target_force_accuracy;
initialization.c:2537:            } else if (pSPARC->target_energy_accuracy > 0.0) {
initialization.c:2538:                target_energy_accuracy = pSPARC->target_energy_accuracy;
initialization.c:2551:                pSPARC->TOL_FOCK = pow(10.0, (log10_target - b)/a);
initialization.c:2556:                pSPARC->TOL_FOCK = pow(10.0, (log10_target - b)/a);
initialization.c:2560:        // If initial PBE SCF tolerance is not defined, use default 10*pSPARC->TOL_FOCK
initialization.c:2561:        if (pSPARC->TOL_SCF_INIT < 0.0) {
initialization.c:2562:            pSPARC->TOL_SCF_INIT = max(10*pSPARC->TOL_FOCK,1e-3);
initialization.c:2564:        pSPARC->MAXIT_FOCK = max(1,pSPARC->MAXIT_FOCK);
initialization.c:2565:        pSPARC->MINIT_FOCK = max(1,pSPARC->MINIT_FOCK);
initialization.c:2567:        if (pSPARC->EXXMem_batch < 0) {
initialization.c:2569:            pSPARC->EXXMem_batch = 0;
initialization.c:2573:        if (pSPARC->ACEFlag == 1) {
initialization.c:2574:            if (pSPARC->EXXACEVal_state < 0) {
initialization.c:2576:                pSPARC->EXXACEVal_state = 3;
initialization.c:2579:            pSPARC->EXXACEVal_state = 0;
initialization.c:2582:        pSPARC->ACEFlag = 0;
initialization.c:2583:        pSPARC->EXXMem_batch = 0;
initialization.c:2584:        pSPARC->EXXACEVal_state = 0;
initialization.c:2587:    if (pSPARC->SQFlag == 1) {
initialization.c:2588:        if (pSPARC->BCx || pSPARC->BCy || pSPARC->BCz) {
initialization.c:2593:        if (pSPARC->cell_typ != 0) {
initialization.c:2598:        if (pSPARC->isGammaPoint != 1 || pSPARC->spin_typ != 0) {
initialization.c:2610:        pSPARC->SQ_typ = 2;
initialization.c:2611:        if (pSPARC->SQ3Flag || pSPARC->CS_Flag || pSPARC->SOC_Flag || pSPARC->usefock || pSPARC->mGGAflag) {
initialization.c:2616:        if (pSPARC->SQ_rcut < 0) {
initialization.c:2621:        // if (pSPARC->SQ_typ == 1) {
initialization.c:2623:            // pSPARC->SQ_npl_c = (int) ceil(pSPARC->SQ_fac_g2c * pSPARC->SQ_npl_g / 4.0) * 4;
initialization.c:2625:        if (pSPARC->SQ_typ == 2) {
initialization.c:2626:            if (pSPARC->SQ_npl_g <= 0) {
initialization.c:2632:            if (pSPARC->SQ_npl_c <= 0) {
initialization.c:2633:                if (pSPARC->SQ_fac_g2c <= 0) {
initialization.c:2640:                pSPARC->SQ_npl_c = (int) ceil(pSPARC->SQ_fac_g2c * pSPARC->SQ_npl_g);
initialization.c:2643:                pSPARC->SQ_fac_g2c = -1;
initialization.c:2646:        if (pSPARC->PrintEigenFlag > 0) {
initialization.c:2651:        pSPARC->SQ_correction = 0;          // The correction term in energy and forces hasn't been implemented in this version.
initialization.c:2652:        if (pSPARC->SQ_typ_dm == 1) {
initialization.c:2653:            pSPARC->SQ_gauss_mem = 0;       // Ensure the high memory option is only valid for Gauss Qaudrature
initialization.c:2657:    if (pSPARC->OFDFTFlag == 1) {
initialization.c:2658:        if (pSPARC->BCx || pSPARC->BCy || pSPARC->BCz) {
initialization.c:2663:        if (pSPARC->isGammaPoint != 1 || pSPARC->spin_typ != 0) {
initialization.c:2673:        if (pSPARC->PrintEigenFlag > 0) {
initialization.c:2678:        if (pSPARC->Calc_pres || pSPARC->Calc_stress) {
initialization.c:2688:        if (pSPARC->SQ3Flag || pSPARC->CS_Flag || pSPARC->usefock || pSPARC->mGGAflag || pSPARC->SOC_Flag) {
initialization.c:2695:    if (pSPARC->SOC_Flag == 1) {
initialization.c:2696:        if (pSPARC->usefock || pSPARC->SQFlag || pSPARC->SQ3Flag || pSPARC->CS_Flag || pSPARC->OFDFTFlag || pSPARC->mGGAflag) {
initialization.c:2703:    if (pSPARC->CyclixFlag == 1) {
initialization.c:2704:        if (pSPARC->usefock || pSPARC->SQFlag || pSPARC->SQ3Flag || 
initialization.c:2705:            pSPARC->CS_Flag || pSPARC->OFDFTFlag || pSPARC->mGGAflag || pSPARC->SOC_Flag) {
initialization.c:2710:        if (pSPARC->spin_typ == 1 && 
initialization.c:2711:            (strcmpi(pSPARC->XC, "GGA_PBE") != 0) && (strcmpi(pSPARC->XC, "GGA_PBEsol") != 0) && (strcmpi(pSPARC->XC, "GGA_RPBE") != 0)) {
initialization.c:2718:    if (pSPARC->nonlocal_flag == 0) {
initialization.c:2733:    if (pSPARC->SQFlag == 1) {
initialization.c:2734:        SQ_OBJ *pSQ = pSPARC->pSQ;
initialization.c:2739:        mem_phi = (double) sizeof(double) * pSPARC->Nd_d * (6+pSPARC->SQ_npl_g*2+pSPARC->SQ_npl_c+1);
initialization.c:2740:        mem_chi = (double) sizeof(double) * pSPARC->Nd_d * pSQ->Nd_loc * 0.3; 
initialization.c:2741:        if (pSPARC->SQ_typ_dm == 2) { 
initialization.c:2742:            if (pSPARC->SQ_gauss_mem == 1) {                    // save vectors for all FD nodes
initialization.c:2743:                mem_Rcut += (double) sizeof(double) * pSPARC->Nd_d * pSQ->Nd_loc * pSPARC->SQ_npl_g;
initialization.c:2744:                mem_phi += (double) sizeof(double) * pSPARC->Nd_d * pSPARC->SQ_npl_g * pSPARC->SQ_npl_g;
initialization.c:2746:                mem_Rcut += (double) sizeof(double) * pSQ->Nd_loc * pSPARC->SQ_npl_g;
initialization.c:2748:        } else if (pSPARC->SQ_typ_dm == 1) {
initialization.c:2749:            mem_Rcut += (double) sizeof(double) * pSPARC->Nd_d * pSQ->Nd_loc;
initialization.c:2777:    int Nd = pSPARC->Nd * pSPARC->Nspinor;
initialization.c:2778:    int Ns = pSPARC->Nstates;
initialization.c:2779:    int Nspin = pSPARC->Nspin;
initialization.c:2780:    int Nkpts_sym = pSPARC->Nkpts_sym;
initialization.c:2781:    int m = pSPARC->MixingHistory;
initialization.c:2784:    if (pSPARC->isGammaPoint) {
initialization.c:2803:    if (pSPARC->usefock > 0) {
initialization.c:2804:        if (pSPARC->ACEFlag == 0) {
initialization.c:2806:            memory_exx += (double) Nd * Ns * pSPARC->Nkpts_hf_red * Nspin * pSPARC->npkpt * type_size;
initialization.c:2808:            memory_exx += (double) Nd * Ns * Nkpts_sym * Nspin * (pSPARC->npband + 2) * type_size;
initialization.c:2811:            memory_exx += (double) Nd * Ns * pSPARC->Nkpts_hf_red * Nspin * pSPARC->npkpt * pSPARC->npband * type_size;
initialization.c:2813:            memory_exx += (double) Nd * Ns * pSPARC->Nkpts_hf_red * Nspin * pSPARC->npkpt * type_size;
initialization.c:2815:        if (pSPARC->EXXMem_batch == 0) {
initialization.c:2816:            memory_exx += (double) Nd * Ns * Ns * pSPARC->Nkpts_hf * Nkpts_sym * (2*type_size + 2*sizeof(int));
initialization.c:2818:            memory_exx += (double) pSPARC->EXXMem_batch * (2*type_size + 2*sizeof(int));
initialization.c:2834:        if (pSPARC->usefock > 0) {
initialization.c:2940:    double Lx = pSPARC->range_x;
initialization.c:2941:    double Ly = pSPARC->range_y;
initialization.c:2942:    double Lz = pSPARC->range_z;
initialization.c:2945:    if (pSPARC->usefock == 1) {
initialization.c:2947:        if (pSPARC->EXXDownsampling[0] < 0 || pSPARC->EXXDownsampling[1] < 0 || pSPARC->EXXDownsampling[2] < 0) {
initialization.c:2953:        if ((pSPARC->EXXDownsampling[0] > 0 && pSPARC->Kx % pSPARC->EXXDownsampling[0]) ||
initialization.c:2954:            (pSPARC->EXXDownsampling[1] > 0 && pSPARC->Ky % pSPARC->EXXDownsampling[1]) ||
initialization.c:2955:            (pSPARC->EXXDownsampling[2] > 0 && pSPARC->Kz % pSPARC->EXXDownsampling[2])) {
initialization.c:2961:        if (pSPARC->EXXDownsampling[0] == 0) {
initialization.c:2962:            pSPARC->Nkpts_hf = 1;
initialization.c:2963:            pSPARC->Kx_hf = 1;
initialization.c:2965:            pSPARC->Kx_hf = pSPARC->Kx / pSPARC->EXXDownsampling[0];
initialization.c:2966:            pSPARC->Nkpts_hf = pSPARC->Kx / pSPARC->EXXDownsampling[0];
initialization.c:2969:        if (pSPARC->EXXDownsampling[1] == 0) {
initialization.c:2970:            pSPARC->Nkpts_hf *= 1;
initialization.c:2971:            pSPARC->Ky_hf = 1;
initialization.c:2973:            pSPARC->Ky_hf = pSPARC->Ky / pSPARC->EXXDownsampling[1];
initialization.c:2974:            pSPARC->Nkpts_hf *= (pSPARC->Ky / pSPARC->EXXDownsampling[1]);
initialization.c:2977:        if (pSPARC->EXXDownsampling[2] == 0) {
initialization.c:2978:            pSPARC->Nkpts_hf *= 1;
initialization.c:2979:            pSPARC->Kz_hf = 1;
initialization.c:2981:            pSPARC->Kz_hf = pSPARC->Kz / pSPARC->EXXDownsampling[2];
initialization.c:2982:            pSPARC->Nkpts_hf *= (pSPARC->Kz / pSPARC->EXXDownsampling[2]);
initialization.c:2984:        pSPARC->k1_hf = (double *) calloc(sizeof(double), pSPARC->Nkpts_hf);
initialization.c:2985:        pSPARC->k2_hf = (double *) calloc(sizeof(double), pSPARC->Nkpts_hf);
initialization.c:2986:        pSPARC->k3_hf = (double *) calloc(sizeof(double), pSPARC->Nkpts_hf);
initialization.c:2987:        pSPARC->kpthf_ind = (int *) calloc(sizeof(int), pSPARC->Nkpts_hf);
initialization.c:2988:        pSPARC->kpthf_ind_red = (int *) calloc(sizeof(int), pSPARC->Nkpts_hf);
initialization.c:2989:        pSPARC->kpthf_pn  = (int *) calloc(sizeof(int), pSPARC->Nkpts_hf);
initialization.c:2990:        pSPARC->kptWts_hf = 1.0 / pSPARC->Nkpts_hf;
initialization.c:3003:    int nk1_s = -floor((pSPARC->Kx - 1)/2);
initialization.c:3004:    int nk1_e = nk1_s + pSPARC->Kx;
initialization.c:3005:    int nk2_s = -floor((pSPARC->Ky - 1)/2);
initialization.c:3006:    int nk2_e = nk2_s + pSPARC->Ky;
initialization.c:3007:    int nk3_s = -floor((pSPARC->Kz - 1)/2);
initialization.c:3008:    int nk3_e = nk3_s + pSPARC->Kz;
initialization.c:3015:                if (pSPARC->CyclixFlag) {
initialization.c:3016:                    k1_red = nk1 * 1.0/pSPARC->Kx;
initialization.c:3017:                    k2_red = nk2 * 1.0/pSPARC->Ky; //* (1- (pSPARC->twist*Lz*pSPARC->Ky/(2*M_PI) ) ));
initialization.c:3018:                    k3_red = nk3 * 1.0/pSPARC->Kz;
initialization.c:3019:                    k3_red = fmod(k3_red + pSPARC->kptshift[2] / pSPARC->Kz + 0.5 - TEMP_TOL, 1.0) - 0.5 + TEMP_TOL;
initialization.c:3021:                    k1_red = nk1 * 1.0/pSPARC->Kx;
initialization.c:3022:                    k2_red = nk2 * 1.0/pSPARC->Ky;
initialization.c:3023:                    k3_red = nk3 * 1.0/pSPARC->Kz;
initialization.c:3024:                    k1_red = fmod(k1_red + pSPARC->kptshift[0] / pSPARC->Kx + 0.5 - TEMP_TOL, 1.0) - 0.5 + TEMP_TOL;
initialization.c:3025:                    k2_red = fmod(k2_red + pSPARC->kptshift[1] / pSPARC->Ky + 0.5 - TEMP_TOL, 1.0) - 0.5 + TEMP_TOL;
initialization.c:3026:                    k3_red = fmod(k3_red + pSPARC->kptshift[2] / pSPARC->Kz + 0.5 - TEMP_TOL, 1.0) - 0.5 + TEMP_TOL;
initialization.c:3037:                    if (   (fabs(k1 + pSPARC->k1[nk]) < TEMP_TOL || fabs(k1 + pSPARC->k1[nk] - sumx) < TEMP_TOL) 
initialization.c:3038:                        && (fabs(k2 + pSPARC->k2[nk]) < TEMP_TOL || fabs(k2 + pSPARC->k2[nk] - sumy) < TEMP_TOL)
initialization.c:3039:                        && (fabs(k3 + pSPARC->k3[nk]) < TEMP_TOL || fabs(k3 + pSPARC->k3[nk] - sumz) < TEMP_TOL) ) {
initialization.c:3046:                    pSPARC->k1[k] = k1;
initialization.c:3047:                    pSPARC->k2[k] = k2;
initialization.c:3048:                    pSPARC->k3[k] = k3;
initialization.c:3049:                    pSPARC->kptWts[k]= 1.0;
initialization.c:3052:                    pSPARC->kptWts[nk] = 2.0;
initialization.c:3055:                if (pSPARC->usefock == 1) {
initialization.c:3056:                    if (pSPARC->EXXDownsampling[0] == 0) {
initialization.c:3060:                        flag_cx = !((nk1 - nk1_s + 1) % pSPARC->EXXDownsampling[0]);
initialization.c:3063:                    if (pSPARC->EXXDownsampling[1] == 0) {
initialization.c:3067:                        flag_cy = !((nk2 - nk2_s + 1) % pSPARC->EXXDownsampling[1]);
initialization.c:3070:                    if (pSPARC->EXXDownsampling[2] == 0) {
initialization.c:3074:                        flag_cz = !((nk3 - nk3_s + 1) % pSPARC->EXXDownsampling[2]);
initialization.c:3078:                        pSPARC->k1_hf[k_hf] = k1;
initialization.c:3079:                        pSPARC->k2_hf[k_hf] = k2;
initialization.c:3080:                        pSPARC->k3_hf[k_hf] = k3;
initialization.c:3088:    pSPARC->Nkpts_sym = k; // update number of k points after symmetry reduction
initialization.c:3090:    if (pSPARC->usefock == 1) {
initialization.c:3091:        if (!pSPARC->EXXDownsampling[0] && !flag_0x) {
initialization.c:3096:        if (!pSPARC->EXXDownsampling[1] && !flag_0y) {
initialization.c:3101:        if (!pSPARC->EXXDownsampling[2] && !flag_0z) {
initialization.c:3107:        for (k_hf = 0; k_hf < pSPARC->Nkpts_hf; k_hf ++) {
initialization.c:3108:            for (k = 0; k < pSPARC->Nkpts_sym; k ++) {
initialization.c:3109:                if (   (fabs(pSPARC->k1[k] - pSPARC->k1_hf[k_hf]) < TEMP_TOL) 
initialization.c:3110:                    && (fabs(pSPARC->k2[k] - pSPARC->k2_hf[k_hf]) < TEMP_TOL) 
initialization.c:3111:                    && (fabs(pSPARC->k3[k] - pSPARC->k3_hf[k_hf]) < TEMP_TOL) ) {
initialization.c:3112:                    pSPARC->kpthf_ind[k_hf] = k;        // index w.r.t. Nkpts_sym
initialization.c:3113:                    pSPARC->kpthf_pn[k_hf] = 1;         // 1 -> k, 0 -> -k
initialization.c:3117:            if (pSPARC->kpthf_pn[k_hf] == 1) continue;
initialization.c:3118:            for (k = 0; k < pSPARC->Nkpts_sym; k ++) {
initialization.c:3119:                if (   ((fabs(pSPARC->k1[k] + pSPARC->k1_hf[k_hf]) < TEMP_TOL) || (fabs(pSPARC->k1[k] + pSPARC->k1_hf[k_hf] - sumx) < TEMP_TOL) )
initialization.c:3120:                    && ((fabs(pSPARC->k2[k] + pSPARC->k2_hf[k_hf]) < TEMP_TOL) || (fabs(pSPARC->k2[k] + pSPARC->k2_hf[k_hf] - sumy) < TEMP_TOL) )
initialization.c:3121:                    && ((fabs(pSPARC->k3[k] + pSPARC->k3_hf[k_hf]) < TEMP_TOL) || (fabs(pSPARC->k3[k] + pSPARC->k3_hf[k_hf] - sumz) < TEMP_TOL) )) {
initialization.c:3122:                    pSPARC->kpthf_ind[k_hf] = k;        // index w.r.t. Nkpts_sym
initialization.c:3123:                    pSPARC->kpthf_pn[k_hf] = 0;         // 1 -> k, 0 -> -k
initialization.c:3129:        pSPARC->Nkpts_hf_red = 1;
initialization.c:3130:        pSPARC->kpts_hf_red_list = (int *) calloc(sizeof(int), pSPARC->Nkpts_sym);
initialization.c:3131:        pSPARC->kpts_hf_red_list[0] = pSPARC->kpthf_ind[0];
initialization.c:3132:        for (k_hf = 1; k_hf < pSPARC->Nkpts_hf; k_hf ++) {
initialization.c:3135:                if (pSPARC->kpthf_ind[k] == pSPARC->kpthf_ind[k_hf]) {
initialization.c:3141:            pSPARC->kpts_hf_red_list[pSPARC->Nkpts_hf_red++] = pSPARC->kpthf_ind[k_hf];
initialization.c:3144:        pSPARC->kpthfred2kpthf = (int (*)[3]) calloc(sizeof(int[3]), pSPARC->Nkpts_hf_red);
initialization.c:3145:        for (k = 0; k < pSPARC->Nkpts_hf_red; k++) pSPARC->kpthfred2kpthf[k][0] = 0;
initialization.c:3148:        for (k_hf = 0; k_hf < pSPARC->Nkpts_hf; k_hf ++) {
initialization.c:3149:            for (k = 0; k < pSPARC->Nkpts_hf_red; k++) {
initialization.c:3150:                if (pSPARC->kpthf_ind[k_hf] == pSPARC->kpts_hf_red_list[k]) {
initialization.c:3151:                    pSPARC->kpthf_ind_red[k_hf] = k;        // index w.r.t. Nkpts_hf_red
initialization.c:3152:                    pSPARC->kpthfred2kpthf[k][0] ++;
initialization.c:3153:                    int indx = pSPARC->kpthfred2kpthf[k][0];
initialization.c:3154:                    pSPARC->kpthfred2kpthf[k][indx] = k_hf;
initialization.c:3162:    if (!rank) printf("After symmetry reduction, Nkpts_sym = %d\n", pSPARC->Nkpts_sym);
initialization.c:3163:    for (nk = 0; nk < pSPARC->Nkpts_sym; nk++) {
initialization.c:3168:            nk,pSPARC->k1[nk]/tpiblx,nk,pSPARC->k2[nk]/tpibly,nk,pSPARC->k3[nk]/tpiblz,nk,pSPARC->kptWts[nk]);
initialization.c:3171:    if (pSPARC->usefock == 1) {
initialization.c:3172:        if (!rank) printf("K-points for Hartree-Fock operator after downsampling, Nkpts_hf %d\n", pSPARC->Nkpts_hf);
initialization.c:3173:        for (nk = 0; nk < pSPARC->Nkpts_hf; nk++) {
initialization.c:3178:                nk,pSPARC->k1_hf[nk]/tpiblx,nk,pSPARC->k2_hf[nk]/tpibly,nk,pSPARC->k3_hf[nk]/tpiblz,
initialization.c:3179:                nk,pSPARC->kptWts_hf,nk,pSPARC->kpthf_ind[nk],nk,pSPARC->kpthf_ind_red[nk],nk,pSPARC->kpthf_pn[nk]);
initialization.c:3181:        if (!rank) printf("K-points for Hartree-Fock operator after downsampling mapping into kpts_system, Nkpts_hf_red %d\n", pSPARC->Nkpts_hf_red);
initialization.c:3182:        for (nk = 0; nk < pSPARC->Nkpts_hf_red; nk++) {
initialization.c:3183:            if (!rank) printf("kpts_hf_red_list[%d]: %d\n", nk, pSPARC->kpts_hf_red_list[nk]);
initialization.c:3194:    kstart = pSPARC->kpt_start_indx;
initialization.c:3195:    kend = pSPARC->kpt_end_indx;
initialization.c:3199:        pSPARC->k1_loc[k] = pSPARC->k1[nk];
initialization.c:3200:        pSPARC->k2_loc[k] = pSPARC->k2[nk];
initialization.c:3201:        pSPARC->k3_loc[k] = pSPARC->k3[nk];
initialization.c:3202:        pSPARC->kptWts_loc[k] = pSPARC->kptWts[nk];
initialization.c:3214:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
initialization.c:3215:        int lloc = pSPARC->localPsd[ityp];
initialization.c:3216:        psd_len = pSPARC->psd[ityp].size;
initialization.c:3217:        pSPARC->psd[ityp].SplinerVlocD = (double *)malloc(sizeof(double)*psd_len);
initialization.c:3218:        pSPARC->psd[ityp].SplineFitIsoAtomDen = (double *)malloc(sizeof(double)*psd_len);
initialization.c:3219:        pSPARC->psd[ityp].SplineRhocD = (double *)malloc(sizeof(double)*psd_len);
initialization.c:3220:        assert(pSPARC->psd[ityp].SplinerVlocD != NULL);
initialization.c:3221:        assert(pSPARC->psd[ityp].SplineFitIsoAtomDen != NULL);
initialization.c:3222:        assert(pSPARC->psd[ityp].SplineRhocD != NULL);
initialization.c:3223:        getYD_gen(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc,pSPARC->psd[ityp].SplinerVlocD,psd_len);
initialization.c:3224:        getYD_gen(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rhoIsoAtom,pSPARC->psd[ityp].SplineFitIsoAtomDen,psd_len);
initialization.c:3225:        getYD_gen(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rho_c_table,pSPARC->psd[ityp].SplineRhocD,psd_len);
initialization.c:3228:        for (l = 0; l <= pSPARC->psd[ityp].lmax; l++) {
initialization.c:3229:            //if (l == pSPARC->localPsd[ityp]) continue; // this fails under -O3, -O2 optimization
initialization.c:3231:            ppl_sum += pSPARC->psd[ityp].ppl[l];
initialization.c:3233:        pSPARC->psd[ityp].SplineFitUdV = (double *)malloc(sizeof(double)*psd_len * ppl_sum);
initialization.c:3234:        if(pSPARC->psd[ityp].SplineFitUdV == NULL) {
initialization.c:3238:        for (l = lcount = lcount2 = 0; l <= pSPARC->psd[ityp].lmax; l++) {
initialization.c:3240:                lcount2 += pSPARC->psd[ityp].ppl[l];
initialization.c:3243:            for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
initialization.c:3245:                getYD_gen(pSPARC->psd[ityp].RadialGrid, pSPARC->psd[ityp].UdV+lcount2*psd_len, pSPARC->psd[ityp].SplineFitUdV+lcount*psd_len, psd_len);
initialization.c:3249:        if (pSPARC->psd[ityp].pspsoc) {
initialization.c:3251:            for (l = 1; l <= pSPARC->psd[ityp].lmax; l++) {
initialization.c:3252:                //if (l == pSPARC->localPsd[ityp]) continue; // this fails under -O3, -O2 optimization
initialization.c:3254:                ppl_sum += pSPARC->psd[ityp].ppl_soc[l-1];
initialization.c:3256:            pSPARC->psd[ityp].SplineFitUdV_soc = (double *)malloc(sizeof(double)*psd_len * ppl_sum);
initialization.c:3257:            assert(pSPARC->psd[ityp].SplineFitUdV_soc != NULL);
initialization.c:3259:            for (l = 1; l <= pSPARC->psd[ityp].lmax; l++) {
initialization.c:3261:                    lcount2 += pSPARC->psd[ityp].ppl_soc[l-1];
initialization.c:3264:                for (np = 0; np < pSPARC->psd[ityp].ppl_soc[l-1]; np++) {
initialization.c:3266:                    getYD_gen(pSPARC->psd[ityp].RadialGrid, pSPARC->psd[ityp].UdV_soc+lcount2*psd_len, pSPARC->psd[ityp].SplineFitUdV_soc+lcount*psd_len, psd_len);
initialization.c:3288:        mag = sqrt(pow(pSPARC->LatVec[3 * i], 2.0) 
initialization.c:3289:                 + pow(pSPARC->LatVec[3 * i + 1], 2.0) 
initialization.c:3290:                 + pow(pSPARC->LatVec[3 * i + 2], 2.0));
initialization.c:3291:        pSPARC->LatUVec[3 * i] = pSPARC->LatVec[3 * i]/mag;
initialization.c:3292:        pSPARC->LatUVec[3 * i + 1] = pSPARC->LatVec[3 * i + 1]/mag;
initialization.c:3293:        pSPARC->LatUVec[3 * i + 2] = pSPARC->LatVec[3 * i + 2]/mag;
initialization.c:3297:    pSPARC->Jacbdet = 0.0;
initialization.c:3302:                    pSPARC->Jacbdet += ((i - j) * (j - k) * (k - i)/2) * pSPARC->LatUVec[3 * i] * pSPARC->LatUVec[3 * j + 1] * pSPARC->LatUVec[3 * k + 2];
initialization.c:3307:    if(pSPARC->Jacbdet <= 0){
initialization.c:3309:            printf("ERROR: Volume(det(jacobian)) %lf is <= 0\n", pSPARC->Jacbdet);
initialization.c:3315:        pSPARC->metricT[i] = 0.0;
initialization.c:3320:                pSPARC->metricT[3*i + j] += pSPARC->LatUVec[3*i + k] * pSPARC->LatUVec[3*j + k];
initialization.c:3325:    pSPARC->metricT[1] = 2 * pSPARC->metricT[1];
initialization.c:3326:    pSPARC->metricT[2] = 2 * pSPARC->metricT[2];
initialization.c:3327:    pSPARC->metricT[5] = 2 * pSPARC->metricT[5];
initialization.c:3332:           pSPARC->gradT[3*j + i] = (pSPARC->LatUVec[3 * ((j+1) % 3) + (i+1) % 3] * pSPARC->LatUVec[3 * ((j+2) % 3) + (i+2) % 3] - pSPARC->LatUVec[3 * ((j+1) % 3) + (i+2) % 3] * pSPARC->LatUVec[3 * ((j+2) % 3) + (i+1) % 3])/pSPARC->Jacbdet;
initialization.c:3338:        pSPARC->lapcT[i] = 0.0;
initialization.c:3343:                pSPARC->lapcT[3*i + j] += pSPARC->gradT[3*i + k] * pSPARC->gradT[3*j + k];
initialization.c:3349:    if(fabs(pSPARC->lapcT[1]) > TEMP_TOL && fabs(pSPARC->lapcT[2]) < TEMP_TOL && fabs(pSPARC->lapcT[5]) < TEMP_TOL)
initialization.c:3350:        pSPARC->cell_typ = 11;
initialization.c:3351:    else if(fabs(pSPARC->lapcT[1]) < TEMP_TOL && fabs(pSPARC->lapcT[2]) > TEMP_TOL && fabs(pSPARC->lapcT[5]) < TEMP_TOL)
initialization.c:3352:        pSPARC->cell_typ = 12;
initialization.c:3353:    else if(fabs(pSPARC->lapcT[1]) < TEMP_TOL && fabs(pSPARC->lapcT[2]) < TEMP_TOL && fabs(pSPARC->lapcT[5]) > TEMP_TOL)
initialization.c:3354:        pSPARC->cell_typ = 13;
initialization.c:3355:    else if(fabs(pSPARC->lapcT[1]) > TEMP_TOL && fabs(pSPARC->lapcT[2]) > TEMP_TOL && fabs(pSPARC->lapcT[5]) < TEMP_TOL)
initialization.c:3356:        pSPARC->cell_typ = 14;
initialization.c:3357:    else if(fabs(pSPARC->lapcT[1]) < TEMP_TOL && fabs(pSPARC->lapcT[2]) > TEMP_TOL && fabs(pSPARC->lapcT[5]) > TEMP_TOL)
initialization.c:3358:        pSPARC->cell_typ = 15;
initialization.c:3359:    else if(fabs(pSPARC->lapcT[1]) > TEMP_TOL && fabs(pSPARC->lapcT[2]) < TEMP_TOL && fabs(pSPARC->lapcT[5]) > TEMP_TOL)
initialization.c:3360:        pSPARC->cell_typ = 16;
initialization.c:3361:    else if(fabs(pSPARC->lapcT[1]) > TEMP_TOL && fabs(pSPARC->lapcT[2]) > TEMP_TOL && fabs(pSPARC->lapcT[5]) > TEMP_TOL)
initialization.c:3362:        pSPARC->cell_typ = 17;
initialization.c:3365:        printf("\n\nCELL_TYP: %d\n\n",pSPARC->cell_typ);
initialization.c:3368:    // int p, FDn = pSPARC->order/2;
initialization.c:3370:    // dx_inv = 1.0 / (pSPARC->delta_x);
initialization.c:3371:    // dy_inv = 1.0 / (pSPARC->delta_y);
initialization.c:3372:    // dz_inv = 1.0 / (pSPARC->delta_z);
initialization.c:3373:    // dx2_inv = 1.0 / (pSPARC->delta_x * pSPARC->delta_x);
initialization.c:3374:    // dy2_inv = 1.0 / (pSPARC->delta_y * pSPARC->delta_y);
initialization.c:3375:    // dz2_inv = 1.0 / (pSPARC->delta_z * pSPARC->delta_z);
initialization.c:3377:    //     pSPARC->D2_stencil_coeffs_x[p] = pSPARC->lapcT[0] * pSPARC->FDweights_D2[p] * dx2_inv;
initialization.c:3378:    //     pSPARC->D2_stencil_coeffs_y[p] = pSPARC->lapcT[4] * pSPARC->FDweights_D2[p] * dy2_inv;
initialization.c:3379:    //     pSPARC->D2_stencil_coeffs_z[p] = pSPARC->lapcT[8] * pSPARC->FDweights_D2[p] * dz2_inv;
initialization.c:3380:    //     pSPARC->D2_stencil_coeffs_xy[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dx_inv; // 2*T_12 d/dx(df/dy)
initialization.c:3381:    //     pSPARC->D2_stencil_coeffs_xz[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dx_inv; // 2*T_13 d/dx(df/dz)
initialization.c:3382:    //     pSPARC->D2_stencil_coeffs_yz[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dy_inv; // 2*T_23 d/dy(df/dz)
initialization.c:3383:    //     pSPARC->D1_stencil_coeffs_xy[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dy_inv; // d/dx(2*T_12 df/dy) used in d/dx(2*T_12 df/dy + 2*T_13 df/dz)
initialization.c:3384:    //     pSPARC->D1_stencil_coeffs_yx[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dx_inv; // d/dy(2*T_12 df/dx) used in d/dy(2*T_12 df/dx + 2*T_23 df/dz)
initialization.c:3385:    //     pSPARC->D1_stencil_coeffs_xz[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dz_inv; // d/dx(2*T_13 df/dz) used in d/dx(2*T_12 df/dy + 2*T_13 df/dz)
initialization.c:3386:    //     pSPARC->D1_stencil_coeffs_zx[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dx_inv; // d/dz(2*T_13 df/dx) used in d/dz(2*T_13 df/dz + 2*T_23 df/dy)
initialization.c:3387:    //     pSPARC->D1_stencil_coeffs_yz[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dz_inv; // d/dy(2*T_23 df/dz) used in d/dy(2*T_12 df/dx + 2*T_23 df/dz)
initialization.c:3388:    //     pSPARC->D1_stencil_coeffs_zy[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dy_inv; // d/dz(2*T_23 df/dy) used in d/dz(2*T_12 df/dx + 2*T_23 df/dy)
initialization.c:3398:    if (pSPARC->CyclixFlag) {
initialization.c:3402:        x1 = pSPARC->LatUVec[0] * (*x) + pSPARC->LatUVec[3] * (*y) + pSPARC->LatUVec[6] * (*z);
initialization.c:3403:        x2 = pSPARC->LatUVec[1] * (*x) + pSPARC->LatUVec[4] * (*y) + pSPARC->LatUVec[7] * (*z);
initialization.c:3404:        x3 = pSPARC->LatUVec[2] * (*x) + pSPARC->LatUVec[5] * (*y) + pSPARC->LatUVec[8] * (*z);
initialization.c:3413:    if (pSPARC->CyclixFlag) {
initialization.c:3417:        x1 = pSPARC->gradT[0] * (*x) + pSPARC->gradT[1] * (*y) + pSPARC->gradT[2] * (*z);
initialization.c:3418:        x2 = pSPARC->gradT[3] * (*x) + pSPARC->gradT[4] * (*y) + pSPARC->gradT[5] * (*z);
initialization.c:3419:        x3 = pSPARC->gradT[6] * (*x) + pSPARC->gradT[7] * (*y) + pSPARC->gradT[8] * (*z);
initialization.c:3430:    x1 = pSPARC->gradT[0] * (*x) + pSPARC->gradT[3] * (*y) + pSPARC->gradT[6] * (*z);
initialization.c:3431:    x2 = pSPARC->gradT[1] * (*x) + pSPARC->gradT[4] * (*y) + pSPARC->gradT[7] * (*z);
initialization.c:3432:    x3 = pSPARC->gradT[2] * (*x) + pSPARC->gradT[5] * (*y) + pSPARC->gradT[8] * (*z);
initialization.c:3441:    if (pSPARC->CyclixFlag) {
initialization.c:3444:        if(pSPARC->cell_typ == 0) {
initialization.c:3446:        } else if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
initialization.c:3448:            *d = sqrt(pSPARC->metricT[0] * (xx*xx) + pSPARC->metricT[1] * (xx*yy) + pSPARC->metricT[2] * (xx*zz)
initialization.c:3449:                    + pSPARC->metricT[4] * (yy*yy) + pSPARC->metricT[5] * (yy*zz) + pSPARC->metricT[8] * (zz*zz) );
initialization.c:3471:    FILE *output_fp = fopen(pSPARC->OutFilename,"w");
initialization.c:3473:        printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
initialization.c:3485:    if (pSPARC->Flag_latvec_scale == 0) {
initialization.c:3486:        fprintf(output_fp,"CELL: %.15g %.15g %.15g \n",pSPARC->range_x,pSPARC->range_y,pSPARC->range_z);
initialization.c:3487:        if (pSPARC->cell_typ <= 20) {
initialization.c:3489:            fprintf(output_fp,"%.15f %.15f %.15f \n",pSPARC->LatUVec[0],pSPARC->LatUVec[1],pSPARC->LatUVec[2]);
initialization.c:3490:            fprintf(output_fp,"%.15f %.15f %.15f \n",pSPARC->LatUVec[3],pSPARC->LatUVec[4],pSPARC->LatUVec[5]);
initialization.c:3491:            fprintf(output_fp,"%.15f %.15f %.15f \n",pSPARC->LatUVec[6],pSPARC->LatUVec[7],pSPARC->LatUVec[8]);
initialization.c:3494:        fprintf(output_fp,"LATVEC_SCALE: %.15g %.15g %.15g \n",pSPARC->latvec_scale_x,pSPARC->latvec_scale_y,pSPARC->latvec_scale_z);
initialization.c:3495:        if (pSPARC->cell_typ <= 20) {
initialization.c:3497:            fprintf(output_fp,"%.15f %.15f %.15f \n",pSPARC->LatVec[0],pSPARC->LatVec[1],pSPARC->LatVec[2]);
initialization.c:3498:            fprintf(output_fp,"%.15f %.15f %.15f \n",pSPARC->LatVec[3],pSPARC->LatVec[4],pSPARC->LatVec[5]);
initialization.c:3499:            fprintf(output_fp,"%.15f %.15f %.15f \n",pSPARC->LatVec[6],pSPARC->LatVec[7],pSPARC->LatVec[8]);
initialization.c:3502:    if(pSPARC->cell_typ > 20 && pSPARC->cell_typ < 30)
initialization.c:3503:        fprintf(output_fp,"TWIST_ANGLE: %f \n",pSPARC->twist);
initialization.c:3504:    fprintf(output_fp,"FD_GRID: %d %d %d\n",pSPARC->numIntervals_x,pSPARC->numIntervals_y,pSPARC->numIntervals_z);
initialization.c:3505:    fprintf(output_fp,"FD_ORDER: %d\n",pSPARC->order);
initialization.c:3507:    if (pSPARC->CyclixFlag) {
initialization.c:3509:        fprintf(output_fp," %s", pSPARC->cell_typ == 22 ? "D" : "C");
initialization.c:3510:        fprintf(output_fp," %s", pSPARC->cell_typ == 21 ? "P" : "H");
initialization.c:3512:        fprintf(output_fp," %s", pSPARC->BCx == 0 ? "P" : "D");
initialization.c:3513:        fprintf(output_fp," %s", pSPARC->BCy == 0 ? "P" : "D");
initialization.c:3514:        fprintf(output_fp," %s", pSPARC->BCz == 0 ? "P" : "D");
initialization.c:3517:    if (pSPARC->BC>1 && !pSPARC->SQFlag) {
initialization.c:3518:        fprintf(output_fp,"KPOINT_GRID: %d %d %d\n",pSPARC->Kx,pSPARC->Ky,pSPARC->Kz);
initialization.c:3519:        fprintf(output_fp,"KPOINT_SHIFT: %.15g %.15g %.15g\n",pSPARC->kptshift[0],pSPARC->kptshift[1],pSPARC->kptshift[2]);
initialization.c:3521:    fprintf(output_fp,"SPIN_TYP: %d\n",pSPARC->spin_typ);
initialization.c:3522:    if (pSPARC->elec_T_type == 0)
initialization.c:3524:    else if (pSPARC->elec_T_type == 1)
initialization.c:3527:    if (pSPARC->MDFlag == 1) {
initialization.c:3528:        fprintf(output_fp,"ELEC_TEMP: %.15g\n",pSPARC->elec_T);
initialization.c:3530:        fprintf(output_fp,"SMEARING: %.10g\n",1./pSPARC->Beta);
initialization.c:3532:    fprintf(output_fp,"EXCHANGE_CORRELATION: %s\n",pSPARC->XC);
initialization.c:3533:    if (strcmpi(pSPARC->XC, "HSE") == 0) {
initialization.c:3534:        fprintf(output_fp,"EXX_RANGE_FOCK: %.6f\n", pSPARC->hyb_range_fock);
initialization.c:3535:        fprintf(output_fp,"EXX_RANGE_PBE: %.6f\n", pSPARC->hyb_range_pbe);
initialization.c:3538:    if (strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0){
initialization.c:3539:        fprintf(output_fp, "M_VAL: %f\n", pSPARC->m_val);
initialization.c:3540:        fprintf(output_fp, "N_VAL: %f\n", pSPARC->n_val);
initialization.c:3542:    if (pSPARC->SQFlag == 1) {
initialization.c:3543:        fprintf(output_fp,"SQ_FLAG: %d\n", pSPARC->SQFlag);
initialization.c:3544:        if (pSPARC->SQ_typ == 2)
initialization.c:3546:        if (pSPARC->SQ_typ_dm == 1) {
initialization.c:3548:            fprintf(output_fp,"SQ_NPL_C: %d\n", pSPARC->SQ_npl_c);
initialization.c:3549:        } else if (pSPARC->SQ_typ_dm == 2) {
initialization.c:3551:            if (pSPARC->SQ_gauss_mem == 1) {
initialization.c:3557:        fprintf(output_fp,"SQ_NPL_G: %d\n", pSPARC->SQ_npl_g);
initialization.c:3558:        fprintf(output_fp,"SQ_RCUT: %.10g\n", pSPARC->SQ_rcut);
initialization.c:3559:        if (pSPARC->SQ_fac_g2c > 0)
initialization.c:3560:            fprintf(output_fp,"SQ_FAC_G2C: %.10g\n", pSPARC->SQ_fac_g2c);
initialization.c:3561:        fprintf(output_fp,"SQ_EIGSHIFT_FLAG: %d\n", pSPARC->SQ_EigshiftFlag);
initialization.c:3562:        if (pSPARC->SQ_EigshiftFlag == 1)
initialization.c:3563:            fprintf(output_fp,"SQ_EIGSHIFT: %.10g\n", pSPARC->SQ_eigshift);
initialization.c:3564:        fprintf(output_fp,"SQ_TOL_OCC: %.2E\n", pSPARC->SQ_tol_occ);    
initialization.c:3565:    } else if (pSPARC->OFDFTFlag == 1) {
initialization.c:3566:        fprintf(output_fp,"OFDFT_FLAG: %d\n",pSPARC->OFDFTFlag);
initialization.c:3567:        fprintf(output_fp,"TOL_OFDFT: %.2E\n",pSPARC->OFDFT_tol);
initialization.c:3568:        fprintf(output_fp,"OFDFT_LAMBDA: %.6g\n",pSPARC->OFDFT_lambda);
initialization.c:3570:        fprintf(output_fp,"NSTATES: %d\n",pSPARC->Nstates);
initialization.c:3571:        if (pSPARC->ext_FPMD_Flag != 0) {
initialization.c:3572:            fprintf(output_fp,"EXT_FPMD_FLAG: %d\n",pSPARC->ext_FPMD_Flag);
initialization.c:3573:            fprintf(output_fp,"EXT_FPMD_NSCUT: %d\n",pSPARC->ext_FPMD_nscut);
initialization.c:3577:        if (pSPARC->Nstates < (int)(1.2*(pSPARC->Nelectron/2)+5)*pSPARC->Nspinor ) { // with kerker a factor of 1.1 might be needed
initialization.c:3580:        fprintf(output_fp,"CHEB_DEGREE: %d\n",pSPARC->ChebDegree);
initialization.c:3581:        if (pSPARC->CheFSI_Optmz == 1) {
initialization.c:3582:            fprintf(output_fp,"CHEFSI_OPTMZ: %d\n",pSPARC->CheFSI_Optmz);
initialization.c:3584:        fprintf(output_fp,"CHEFSI_BOUND_FLAG: %d\n",pSPARC->chefsibound_flag);
initialization.c:3587:    if (pSPARC->CS_Flag == 1) {
initialization.c:3588:        fprintf(output_fp,"CS_FLAG: %d\n",pSPARC->CS_Flag);
initialization.c:3589:        fprintf(output_fp,"CS_NSTATES_TOP: %d\n",pSPARC->CS_Nt);
initialization.c:3590:        fprintf(output_fp,"CS_CHEBDEGREE: %d\n",pSPARC->CS_npl);
initialization.c:3591:        fprintf(output_fp,"CS_NCHEB: %d\n",pSPARC->CS_ncheb);
initialization.c:3594:    if (pSPARC->DDBP_Flag == 1) {
initialization.c:3595:        fprintf(output_fp,"DDBP_FLAG: %d\n",pSPARC->DDBP_Flag);
initialization.c:3596:        fprintf(output_fp,"DDBP_NALB_ATOM: %d\n",pSPARC->DDBP_nALB_atom);
initialization.c:3598:            pSPARC->DDBP_Nex,pSPARC->DDBP_Ney,pSPARC->DDBP_Nez);
initialization.c:3600:        fprintf(output_fp," %s", pSPARC->DDBP_EBCx == 0 ? "P" : "D");
initialization.c:3601:        fprintf(output_fp," %s", pSPARC->DDBP_EBCy == 0 ? "P" : "D");
initialization.c:3602:        fprintf(output_fp," %s", pSPARC->DDBP_EBCz == 0 ? "P" : "D");
initialization.c:3605:            pSPARC->DDBP_buffer_x,pSPARC->DDBP_buffer_y,pSPARC->DDBP_buffer_z);
initialization.c:3607:            pSPARC->DDBP_tol_updatebasis_first_EGS);
initialization.c:3609:            pSPARC->DDBP_tol_updatebasis);
initialization.c:3611:    if (pSPARC->RelaxFlag >= 1) {
initialization.c:3612:        fprintf(output_fp,"RELAX_FLAG: %d\n",pSPARC->RelaxFlag);
initialization.c:3615:    if (pSPARC->RelaxFlag == 1 || pSPARC->RelaxFlag == 3) {
initialization.c:3616:        fprintf(output_fp,"RELAX_METHOD: %s\n",pSPARC->RelaxMeth);
initialization.c:3617:        fprintf(output_fp,"RELAX_NITER: %d\n",pSPARC->Relax_Niter);
initialization.c:3618:        if(strcmpi(pSPARC->RelaxMeth,"LBFGS") == 0){
initialization.c:3619:            fprintf(output_fp,"L_HISTORY: %d\n",pSPARC->L_history);
initialization.c:3620:            fprintf(output_fp,"L_FINIT_STP: %.15g\n",pSPARC->L_finit_stp);
initialization.c:3621:            fprintf(output_fp,"L_MAXMOV: %.15g\n",pSPARC->L_maxmov);
initialization.c:3622:            fprintf(output_fp,"L_AUTOSCALE: %d\n",pSPARC->L_autoscale);
initialization.c:3623:            fprintf(output_fp,"L_LINEOPT: %d\n",pSPARC->L_lineopt);
initialization.c:3624:            fprintf(output_fp,"L_ICURV: %.15g\n",pSPARC->L_icurv);
initialization.c:3625:        } else if(strcmpi(pSPARC->RelaxMeth,"NLCG") == 0){
initialization.c:3626:            fprintf(output_fp,"NLCG_sigma: %.15g\n",pSPARC->NLCG_sigma);
initialization.c:3627:        } else if(strcmpi(pSPARC->RelaxMeth,"FIRE") == 0){
initialization.c:3628:            fprintf(output_fp,"FIRE_dt: %.15g\n",pSPARC->FIRE_dt);
initialization.c:3629:            fprintf(output_fp,"FIRE_mass: %.15g\n",pSPARC->FIRE_mass);
initialization.c:3630:            fprintf(output_fp,"FIRE_maxmov: %.15g\n",pSPARC->FIRE_maxmov);
initialization.c:3634:    fprintf(output_fp,"CALC_STRESS: %d\n",pSPARC->Calc_stress);
initialization.c:3635:    if(pSPARC->Calc_stress == 0)
initialization.c:3636:        fprintf(output_fp,"CALC_PRES: %d\n",pSPARC->Calc_pres);
initialization.c:3637:    if (pSPARC->MDFlag == 1 || pSPARC->RelaxFlag == 1)
initialization.c:3638:        fprintf(output_fp,"TWTIME: %G\n",pSPARC->TWtime);
initialization.c:3639:    if (pSPARC->MDFlag == 1) {
initialization.c:3640:        fprintf(output_fp,"MD_FLAG: %d\n",pSPARC->MDFlag);
initialization.c:3641:        fprintf(output_fp,"MD_METHOD: %s\n",pSPARC->MDMeth);
initialization.c:3642:        fprintf(output_fp,"MD_TIMESTEP: %.15g\n",pSPARC->MD_dt);
initialization.c:3643:        fprintf(output_fp,"MD_NSTEP: %d\n",pSPARC->MD_Nstep);
initialization.c:3644:        // fprintf(output_fp,"ION_ELEC_EQT: %d\n",pSPARC->ion_elec_eqT);
initialization.c:3645:        fprintf(output_fp,"ION_VEL_DSTR: %d\n",pSPARC->ion_vel_dstr);
initialization.c:3646:        fprintf(output_fp,"ION_VEL_DSTR_RAND: %d\n",pSPARC->ion_vel_dstr_rand);
initialization.c:3647:        fprintf(output_fp,"ION_TEMP: %.15g\n",pSPARC->ion_T);
initialization.c:3648:        if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0) {
initialization.c:3649:            fprintf(output_fp,"ION_TEMP_END: %.15g\n",pSPARC->thermos_Tf);
initialization.c:3650:            fprintf(output_fp,"QMASS: %.15g\n",pSPARC->qmass);
initialization.c:3652:        if(strcmpi(pSPARC->MDMeth,"NPT_NH") == 0) {
initialization.c:3653:            //fprintf(output_fp,"AMOUNT_THERMO_VARIABLE: %d\n",pSPARC->NPT_NHnnos);
initialization.c:3655:            if (pSPARC->NPTscaleVecs[0] == 1) fprintf(output_fp," 1");
initialization.c:3656:            if (pSPARC->NPTscaleVecs[1] == 1) fprintf(output_fp," 2");
initialization.c:3657:            if (pSPARC->NPTscaleVecs[2] == 1) fprintf(output_fp," 3");
initialization.c:3660:            fprintf(output_fp," %d",pSPARC->NPT_NHnnos);
initialization.c:3661:            for (i = 0; i < pSPARC->NPT_NHnnos; i++){
initialization.c:3665:                fprintf(output_fp," %.15g",pSPARC->NPT_NHqmass[i]);
initialization.c:3668:            fprintf(output_fp,"NPT_NH_BMASS: %.15g\n",pSPARC->NPT_NHbmass);
initialization.c:3669:            fprintf(output_fp,"TARGET_PRESSURE: %.15g GPa\n",pSPARC->prtarget);
initialization.c:3671:        if(strcmpi(pSPARC->MDMeth,"NPT_NP") == 0) {
initialization.c:3672:            //fprintf(output_fp,"AMOUNT_THERMO_VARIABLE: %d\n",pSPARC->NPT_NHnnos);
initialization.c:3673:            fprintf(output_fp,"NPT_NP_QMASS: %.15g\n",pSPARC->NPT_NP_qmass);
initialization.c:3674:            fprintf(output_fp,"NPT_NP_BMASS: %.15g\n",pSPARC->NPT_NP_bmass);
initialization.c:3675:            fprintf(output_fp,"TARGET_PRESSURE: %.15g GPa\n",pSPARC->prtarget);
initialization.c:3679:    if (pSPARC->RestartFlag == 1) {
initialization.c:3680:        fprintf(output_fp,"RESTART_FLAG: %d\n",pSPARC->RestartFlag);
initialization.c:3682:    if (pSPARC->CheFSI_Optmz == 1) {
initialization.c:3683:        fprintf(output_fp,"CHEFSI_OPTMZ: %d\n",pSPARC->CheFSI_Optmz);
initialization.c:3686:    if (pSPARC->NetCharge != 0) {
initialization.c:3687:        fprintf(output_fp,"NET_CHARGE: %d\n",pSPARC->NetCharge);
initialization.c:3689:    fprintf(output_fp,"MAXIT_SCF: %d\n",pSPARC->MAXIT_SCF);
initialization.c:3690:    fprintf(output_fp,"MINIT_SCF: %d\n",pSPARC->MINIT_SCF);
initialization.c:3691:    fprintf(output_fp,"MAXIT_POISSON: %d\n",pSPARC->MAXIT_POISSON);
initialization.c:3692:    if (pSPARC->scf_err_type == 0) {
initialization.c:3693:        fprintf(output_fp,"TOL_SCF: %.2E\n",pSPARC->TOL_SCF);
initialization.c:3694:    } else if (pSPARC->scf_err_type == 1) {
initialization.c:3695:        fprintf(output_fp,"TOL_SCF_QE: %.2E\n",pSPARC->TOL_SCF);
initialization.c:3696:        if (pSPARC->spin_typ != 0) {
initialization.c:3699:        if (pSPARC->MixingVariable == 1) {
initialization.c:3703:    if (pSPARC->POISSON_SOLVER == 0){
initialization.c:3708:    fprintf(output_fp,"TOL_POISSON: %.2E\n",pSPARC->TOL_POISSON);
initialization.c:3709:    fprintf(output_fp,"TOL_LANCZOS: %.2E\n",pSPARC->TOL_LANCZOS);
initialization.c:3710:    fprintf(output_fp,"TOL_PSEUDOCHARGE: %.2E\n",pSPARC->TOL_PSEUDOCHARGE);
initialization.c:3711:    if (pSPARC->MixingVariable == 0) {
initialization.c:3713:    } else if (pSPARC->MixingVariable == 1) {
initialization.c:3717:    if (pSPARC->MixingPrecond == 0) {
initialization.c:3719:    } else if (pSPARC->MixingPrecond == 1) {
initialization.c:3721:    } else if (pSPARC->MixingPrecond == 2) {
initialization.c:3723:    } else if (pSPARC->MixingPrecond == 3) {
initialization.c:3727:    if (pSPARC->spin_typ != 0) {
initialization.c:3728:        if (pSPARC->MixingPrecondMag == 0) {
initialization.c:3730:        } else if (pSPARC->MixingPrecondMag == 1) {
initialization.c:3732:        } else if (pSPARC->MixingPrecondMag == 2) {
initialization.c:3734:        } else if (pSPARC->MixingPrecondMag == 3) {
initialization.c:3740:    if (pSPARC->BC == 2) {
initialization.c:3742:        Lx = pSPARC->range_x;
initialization.c:3743:        Ly = pSPARC->range_y;
initialization.c:3744:        Lz = pSPARC->range_z;
initialization.c:3746:        if (L_diag > 20.0 && pSPARC->MixingPrecond == 0) {
initialization.c:3754:    if (pSPARC->MixingPrecond != 0) {
initialization.c:3755:        fprintf(output_fp,"TOL_PRECOND: %.2E\n",pSPARC->TOL_PRECOND);
initialization.c:3758:    if (pSPARC->MixingPrecond == 1) { // kerker
initialization.c:3759:        fprintf(output_fp,"PRECOND_KERKER_KTF: %.10G\n",pSPARC->precond_kerker_kTF);
initialization.c:3760:        fprintf(output_fp,"PRECOND_KERKER_THRESH: %.10G\n",pSPARC->precond_kerker_thresh);
initialization.c:3761:    } else if (pSPARC->MixingPrecond == 2) { // resta
initialization.c:3762:        fprintf(output_fp,"PRECOND_RESTA_Q0: %.3f\n",pSPARC->precond_resta_q0);
initialization.c:3763:        fprintf(output_fp,"PRECOND_RESTA_RS: %.3f\n",pSPARC->precond_resta_Rs);
initialization.c:3764:        fprintf(output_fp,"PRECOND_FITPOW: %d\n",pSPARC->precond_fitpow);
initialization.c:3765:    } else if (pSPARC->MixingPrecond == 3) { // truncated kerker
initialization.c:3766:        fprintf(output_fp,"PRECOND_KERKER_KTF: %.10G\n",pSPARC->precond_kerker_kTF);
initialization.c:3767:        fprintf(output_fp,"PRECOND_KERKER_THRESH: %.10G\n",pSPARC->precond_kerker_thresh);
initialization.c:3768:        fprintf(output_fp,"PRECOND_FITPOW: %d\n",pSPARC->precond_fitpow);
initialization.c:3770:    if (pSPARC->spin_typ != 0) {
initialization.c:3771:        if (pSPARC->MixingPrecondMag == 1) {
initialization.c:3772:            fprintf(output_fp,"PRECOND_KERKER_KTF_MAG: %.10G\n",pSPARC->precond_kerker_kTF_mag);
initialization.c:3773:            fprintf(output_fp,"PRECOND_KERKER_THRESH_MAG: %.10G\n",pSPARC->precond_kerker_thresh_mag);
initialization.c:3776:    fprintf(output_fp,"MIXING_PARAMETER: %.10G\n",pSPARC->MixingParameter);
initialization.c:3777:    if (pSPARC->PulayFrequency > 1) {
initialization.c:3778:        fprintf(output_fp,"MIXING_PARAMETER_SIMPLE: %.10G\n",pSPARC->MixingParameterSimple);
initialization.c:3780:    if (pSPARC->spin_typ != 0) {
initialization.c:3781:        fprintf(output_fp,"MIXING_PARAMETER_MAG: %.10G\n",pSPARC->MixingParameterMag);
initialization.c:3782:        if (pSPARC->PulayFrequency > 1) {
initialization.c:3783:            fprintf(output_fp,"MIXING_PARAMETER_SIMPLE_MAG: %.10G\n",pSPARC->MixingParameterSimpleMag);
initialization.c:3786:    fprintf(output_fp,"MIXING_HISTORY: %d\n",pSPARC->MixingHistory);
initialization.c:3787:    fprintf(output_fp,"PULAY_FREQUENCY: %d\n",pSPARC->PulayFrequency);
initialization.c:3788:    fprintf(output_fp,"PULAY_RESTART: %d\n",pSPARC->PulayRestartFlag);
initialization.c:3789:    fprintf(output_fp,"REFERENCE_CUTOFF: %.10g\n",pSPARC->REFERENCE_CUTOFF);
initialization.c:3790:    fprintf(output_fp,"RHO_TRIGGER: %d\n",pSPARC->rhoTrigger);
initialization.c:3791:    fprintf(output_fp,"FIX_RAND: %d\n",pSPARC->FixRandSeed);
initialization.c:3792:    if (pSPARC->SQ3Flag == 1) {
initialization.c:3793:        fprintf(output_fp,"SQ3_FLAG: %d\n",pSPARC->SQ3Flag);
initialization.c:3794:        fprintf(output_fp,"SQ3_NPL: %d\n",pSPARC->sq3_npl);
initialization.c:3796:    if (pSPARC->StandardEigenFlag == 1)
initialization.c:3797:        fprintf(output_fp,"STANDARD_EIGEN: %d\n",pSPARC->StandardEigenFlag);
initialization.c:3798:    fprintf(output_fp,"VERBOSITY: %d\n",pSPARC->Verbosity);
initialization.c:3799:    fprintf(output_fp,"PRINT_FORCES: %d\n",pSPARC->PrintForceFlag);
initialization.c:3800:    fprintf(output_fp,"PRINT_ATOMS: %d\n",pSPARC->PrintAtomPosFlag);
initialization.c:3801:    fprintf(output_fp,"PRINT_EIGEN: %d\n",pSPARC->PrintEigenFlag);
initialization.c:3802:    fprintf(output_fp,"PRINT_DENSITY: %d\n",pSPARC->PrintElecDensFlag);
initialization.c:3803:    fprintf(output_fp,"PRINT_ENERGY_DENSITY: %d\n",pSPARC->PrintEnergyDensFlag);
initialization.c:3804:    if(pSPARC->MDFlag == 1)
initialization.c:3805:        fprintf(output_fp,"PRINT_MDOUT: %d\n",pSPARC->PrintMDout);
initialization.c:3806:    if(pSPARC->MDFlag == 1 || pSPARC->RelaxFlag >= 1){
initialization.c:3807:        fprintf(output_fp,"PRINT_VELS: %d\n",pSPARC->PrintAtomVelFlag);
initialization.c:3808:        fprintf(output_fp,"PRINT_RESTART: %d\n",pSPARC->Printrestart);
initialization.c:3809:        if(pSPARC->Printrestart == 1)
initialization.c:3810:            fprintf(output_fp,"PRINT_RESTART_FQ: %d\n",pSPARC->Printrestart_fq);
initialization.c:3814:        fprintf(output_fp,"CALC_MCSH: %d\n",pSPARC->CalcMCSHFlag);
initialization.c:3815:        if(pSPARC->CalcMCSHFlag >= 1){
initialization.c:3816:            if (pSPARC->MCSHRadialFunctionType == 1){
initialization.c:3817:                fprintf(output_fp,"MCSH_RADIAL_TYPE: %d\n",pSPARC->MCSHRadialFunctionType);
initialization.c:3818:                fprintf(output_fp,"MCSH_MAX_ORDER: %d\n",pSPARC->MCSHMaxMCSHOrder);
initialization.c:3819:                fprintf(output_fp,"MCSH_MAX_R: %.10f\n",pSPARC->MCSHMaxRCutoff);
initialization.c:3820:                fprintf(output_fp,"MCSH_R_STEPSIZE: %.10f\n",pSPARC->MCSHRStepSize);
initialization.c:3821:            } else if (pSPARC->MCSHRadialFunctionType == 2){
initialization.c:3822:                fprintf(output_fp,"MCSH_RADIAL_TYPE: %d\n",pSPARC->MCSHRadialFunctionType);
initialization.c:3823:                fprintf(output_fp,"MCSH_MAX_ORDER: %d\n",pSPARC->MCSHMaxMCSHOrder);
initialization.c:3824:                fprintf(output_fp,"MCSH_RADIAL_MAX_ORDER: %d\n",pSPARC->MCSHRadialFunctionMaxOrder);
initialization.c:3825:                fprintf(output_fp,"MCSH_MAX_R: %.10f\n",pSPARC->MCSHMaxRCutoff);
initialization.c:3829:    if (pSPARC->RelaxFlag == 1) {
initialization.c:3830:        fprintf(output_fp,"TOL_RELAX: %.2E\n",pSPARC->TOL_RELAX);
initialization.c:3831:        fprintf(output_fp,"PRINT_RELAXOUT: %d\n",pSPARC->PrintRelaxout);
initialization.c:3832:    } else if (pSPARC->RelaxFlag == 2) {
initialization.c:3833:        fprintf(output_fp,"TOL_RELAX_CELL: %.2E\n",pSPARC->TOL_RELAX_CELL);
initialization.c:3834:        fprintf(output_fp,"RELAX_MAXDILAT: %.2E\n",pSPARC->max_dilatation);
initialization.c:3835:        fprintf(output_fp,"PRINT_RELAXOUT: %d\n",pSPARC->PrintRelaxout);
initialization.c:3836:    } else if(pSPARC->RelaxFlag == 3) { 
initialization.c:3837:        fprintf(output_fp,"TOL_RELAX: %.2E\n",pSPARC->TOL_RELAX);   
initialization.c:3838:        fprintf(output_fp,"TOL_RELAX_CELL: %.2E\n",pSPARC->TOL_RELAX_CELL); 
initialization.c:3839:        fprintf(output_fp,"RELAX_MAXDILAT: %.2E\n",pSPARC->max_dilatation); 
initialization.c:3840:        fprintf(output_fp,"PRINT_RELAXOUT: %d\n",pSPARC->PrintRelaxout);
initialization.c:3843:    if (pSPARC->usefock == 1){
initialization.c:3844:        fprintf(output_fp,"TOL_FOCK: %.2E\n",pSPARC->TOL_FOCK);
initialization.c:3845:        fprintf(output_fp,"TOL_SCF_INIT: %.2E\n",pSPARC->TOL_SCF_INIT);
initialization.c:3846:        fprintf(output_fp,"MAXIT_FOCK: %d\n",pSPARC->MAXIT_FOCK);
initialization.c:3847:        fprintf(output_fp,"MINIT_FOCK: %d\n",pSPARC->MINIT_FOCK);
initialization.c:3848:        if (pSPARC->EXXMeth_Flag == 0)
initialization.c:3852:        if (pSPARC->EXXDiv_Flag == 0)
initialization.c:3854:        else if (pSPARC->EXXDiv_Flag == 1)
initialization.c:3856:        else if (pSPARC->EXXDiv_Flag == 2)
initialization.c:3858:        fprintf(output_fp,"EXX_MEM: %d\n", pSPARC->EXXMem_batch);
initialization.c:3859:        fprintf(output_fp,"ACE_FLAG: %d\n",pSPARC->ACEFlag);
initialization.c:3860:        if (pSPARC->ACEFlag == 1) {
initialization.c:3861:            fprintf(output_fp,"EXX_ACE_VALENCE_STATES: %d\n", pSPARC->EXXACEVal_state);
initialization.c:3863:        fprintf(output_fp,"EXX_DOWNSAMPLING: %d %d %d\n",pSPARC->EXXDownsampling[0]
initialization.c:3864:                            ,pSPARC->EXXDownsampling[1],pSPARC->EXXDownsampling[2]);
initialization.c:3867:    if (pSPARC->d3Flag == 1) {
initialization.c:3868:        fprintf(output_fp,"D3_FLAG: %d\n",pSPARC->d3Flag);
initialization.c:3869:        fprintf(output_fp,"D3_RTHR: %.15G\n",pSPARC->d3Rthr);   
initialization.c:3870:        fprintf(output_fp,"D3_CN_THR: %.15G\n",pSPARC->d3Cn_thr);
initialization.c:3873:    if (pSPARC->vdWDFFlag != 0) {
initialization.c:3874:        fprintf(output_fp,"VDWDF_GEN_KERNEL: %d\n",pSPARC->vdWDFKernelGenFlag);
initialization.c:3877:    if (pSPARC->nonlocal_flag == 0) {
initialization.c:3878:        fprintf(output_fp,"NONLOCAL_FLAG: %d\n",pSPARC->nonlocal_flag);
initialization.c:3881:    fprintf(output_fp,"OUTPUT_FILE: %s\n",pSPARC->filename_out);
initialization.c:3886:    if (pSPARC->cell_typ <= 20) {
initialization.c:3888:        fprintf(output_fp,"%.15f %.15f %.15f \n",pSPARC->LatUVec[0]*pSPARC->range_x,pSPARC->LatUVec[1]*pSPARC->range_x,pSPARC->LatUVec[2]*pSPARC->range_x);
initialization.c:3889:        fprintf(output_fp,"%.15f %.15f %.15f \n",pSPARC->LatUVec[3]*pSPARC->range_y,pSPARC->LatUVec[4]*pSPARC->range_y,pSPARC->LatUVec[5]*pSPARC->range_y);
initialization.c:3890:        fprintf(output_fp,"%.15f %.15f %.15f \n",pSPARC->LatUVec[6]*pSPARC->range_z,pSPARC->LatUVec[7]*pSPARC->range_z,pSPARC->LatUVec[8]*pSPARC->range_z);
initialization.c:3891:        fprintf(output_fp,"Volume                  :%18.10E (Bohr^3)\n", pSPARC->range_x * pSPARC->range_y * pSPARC->range_z * pSPARC->Jacbdet);
initialization.c:3893:        fprintf(output_fp,"Volume                  :%18.10E (Bohr^3)\n", pSPARC->range_x * ((pSPARC->xin + pSPARC->xout)/2.0) * pSPARC->range_y * pSPARC->range_z);
initialization.c:3898:    if (pSPARC->SQFlag == 1) {
initialization.c:3899:        fprintf(output_fp,"NP_DOMAIN_SQ_PARAL: %d %d %d\n",pSPARC->npNdx_SQ,pSPARC->npNdy_SQ,pSPARC->npNdz_SQ);
initialization.c:3900:        fprintf(output_fp,"NP_DOMAIN_PHI_PARAL: %d %d %d\n",pSPARC->npNdx_phi,pSPARC->npNdy_phi,pSPARC->npNdz_phi);
initialization.c:3901:    } else if (pSPARC->OFDFTFlag == 1) {
initialization.c:3902:        fprintf(output_fp,"NP_DOMAIN_PHI_PARAL: %d %d %d\n",pSPARC->npNdx_phi,pSPARC->npNdy_phi,pSPARC->npNdz_phi);
initialization.c:3904:        fprintf(output_fp,"NP_SPIN_PARAL: %d\n",pSPARC->npspin);
initialization.c:3905:        fprintf(output_fp,"NP_KPOINT_PARAL: %d\n",pSPARC->npkpt);
initialization.c:3906:        fprintf(output_fp,"NP_BAND_PARAL: %d\n",pSPARC->npband);
initialization.c:3907:        fprintf(output_fp,"NP_DOMAIN_PARAL: %d %d %d\n",pSPARC->npNdx,pSPARC->npNdy,pSPARC->npNdz);
initialization.c:3908:        fprintf(output_fp,"NP_DOMAIN_PHI_PARAL: %d %d %d\n",pSPARC->npNdx_phi,pSPARC->npNdy_phi,pSPARC->npNdz_phi);
initialization.c:3909:        if (pSPARC->DDBP_Flag == 1) {
initialization.c:3910:            DDBP_INFO *DDBP_info = pSPARC->DDBP_info;
initialization.c:3914:        fprintf(output_fp,"EIG_SERIAL_MAXNS: %d\n",pSPARC->eig_serial_maxns);
initialization.c:3915:        if (pSPARC->useLAPACK == 0) {
initialization.c:3916:            fprintf(output_fp,"EIG_PARAL_BLKSZ: %d\n",pSPARC->eig_paral_blksz);
initialization.c:3917:            fprintf(output_fp,"EIG_PARAL_ORFAC: %.1e\n",pSPARC->eig_paral_orfac);
initialization.c:3918:            fprintf(output_fp,"EIG_PARAL_MAXNP: %d\n",pSPARC->eig_paral_maxnp);
initialization.c:3926:    if ( (fabs(pSPARC->delta_x-pSPARC->delta_y) <=1e-12) && (fabs(pSPARC->delta_x-pSPARC->delta_z) <=1e-12)
initialization.c:3927:        && (fabs(pSPARC->delta_y-pSPARC->delta_z) <=1e-12) ) {
initialization.c:3928:        fprintf(output_fp,"Mesh spacing                       :  %.6g (Bohr)\n",pSPARC->delta_x);
initialization.c:3930:        fprintf(output_fp,"Mesh spacing in x-direction        :  %.6g (Bohr)\n",pSPARC->delta_x);
initialization.c:3931:        fprintf(output_fp,"Mesh spacing in y-direction        :  %.6g (Bohr)\n",pSPARC->delta_y);
initialization.c:3932:        fprintf(output_fp,"Mesh spacing in z direction        :  %.6g (Bohr)\n",pSPARC->delta_z);
initialization.c:3935:    if (pSPARC->BC==2 || pSPARC->BC==3 || pSPARC->BC==4) {
initialization.c:3936:        fprintf(output_fp,"Number of symmetry adapted k-points:  %d\n",pSPARC->Nkpts_sym);
initialization.c:3939:    fprintf(output_fp,"Output printed to                  :  %s\n",pSPARC->OutFilename);
initialization.c:3941:    //if (pSPARC->PrintAtomPosFlag==1) {
initialization.c:3942:    //    fprintf(output_fp,"Atom positions printed to          :  %s\n",pSPARC->AtomFilename);
initialization.c:3945:    //if (pSPARC->PrintForceFlag==1) {
initialization.c:3946:    //    fprintf(output_fp,"Forces printed to                  :  %s\n",pSPARC->StaticFilename);
initialization.c:3949:    if (pSPARC->PrintEigenFlag==1) {
initialization.c:3950:        fprintf(output_fp,"Final eigenvalues printed to       :  %s\n",pSPARC->EigenFilename);
initialization.c:3953:    if (pSPARC->MDFlag == 1 && pSPARC->PrintMDout == 1) {
initialization.c:3954:        fprintf(output_fp,"MD output printed to               :  %s\n",pSPARC->MDFilename);
initialization.c:3957:    if (pSPARC->RelaxFlag == 1 && pSPARC->PrintRelaxout == 1) {
initialization.c:3958:        fprintf(output_fp,"Relax output printed to            :  %s\n",pSPARC->RelaxFilename);
initialization.c:3961:    fprintf(output_fp,"Total number of atom types         :  %d\n",pSPARC->Ntypes);
initialization.c:3962:    fprintf(output_fp,"Total number of atoms              :  %d\n",pSPARC->n_atom);
initialization.c:3963:    fprintf(output_fp,"Total number of electrons          :  %d\n",pSPARC->Nelectron);
initialization.c:3966:    for (i = 0; i < pSPARC->Ntypes; i++) {
initialization.c:3967:        fprintf(output_fp,"Atom type %-2d (valence electrons)   :  %s %d\n",i+1,&pSPARC->atomType[L_ATMTYPE*i], pSPARC->Znucl[i]);
initialization.c:3968:        fprintf(output_fp,"Pseudopotential                    :  %s\n",pSPARC->psdName + i*L_PSD);
initialization.c:3969:        // fprintf(output_fp,"lloc                               :  %d\n",pSPARC->localPsd[i]);
initialization.c:3970:        if (pSPARC->MDFlag == 1) {
initialization.c:3971:            fprintf(output_fp,"Atomic mass                        :  %.15g\n",pSPARC->Mass[i]);
initialization.c:3973:        fprintf(output_fp,"Pseudocharge radii of atom type %-2d :  %.2f %.2f %.2f (x, y, z dir)\n",i+1,pSPARC->CUTOFF_x[i],pSPARC->CUTOFF_y[i],pSPARC->CUTOFF_z[i]);
initialization.c:3974:        fprintf(output_fp,"Number of atoms of type %-2d         :  %d\n",i+1,pSPARC->nAtomv[i]);
initialization.c:3975:        // if (pSPARC->PrintAtomPosFlag == 1 && pSPARC->MDFlag == 0 && pSPARC->RelaxFlag == 0) {
initialization.c:3977:        //     for (j = 0; j < pSPARC->nAtomv[i]; j++) {
initialization.c:3978:        //         fprintf(output_fp,"%18.10f %18.10f %18.10f\n",pSPARC->atom_pos[3*count]/pSPARC->range_x,pSPARC->atom_pos[3*count+1]/pSPARC->range_y,pSPARC->atom_pos[3*count+2]/pSPARC->range_z);
initialization.c:3985:    formatBytes(pSPARC->memory_usage,32,mem_str);
initialization.c:3987:    formatBytes(pSPARC->memory_usage/nproc,32,mem_str);
initialization.c:3992:    if ((pSPARC->PrintAtomPosFlag == 1 || pSPARC->PrintForceFlag == 1) && pSPARC->MDFlag == 0 && pSPARC->RelaxFlag == 0) {
initialization.c:3993:        FILE *static_fp = fopen(pSPARC->StaticFilename,"w");
initialization.c:3995:            printf("\nCannot open file \"%s\"\n",pSPARC->StaticFilename);
initialization.c:4000:        if (pSPARC->PrintAtomPosFlag == 1) {
initialization.c:4005:            for (i = 0; i < pSPARC->Ntypes; i++) {
initialization.c:4006:                fprintf(static_fp,"Fractional coordinates of %s:\n",&pSPARC->atomType[L_ATMTYPE*i]);
initialization.c:4007:                for (j = 0; j < pSPARC->nAtomv[i]; j++) {
initialization.c:4009:                            pSPARC->atom_pos[3*count]/pSPARC->range_x,
initialization.c:4010:                            pSPARC->atom_pos[3*count+1]/pSPARC->range_y,
initialization.c:4011:                            pSPARC->atom_pos[3*count+2]/pSPARC->range_z);
initialization.c:4350:        for (atm1 = 0; atm1 < pSPARC->n_atom-1; atm1++) {
initialization.c:4351:            for (atm2 = atm1+1; atm2 < pSPARC->n_atom; atm2++) {
initialization.c:4352:                CalculateDistance(pSPARC, pSPARC->atom_pos[3*atm1], pSPARC->atom_pos[3*atm1+1], pSPARC->atom_pos[3*atm1+2],
initialization.c:4353:                                    pSPARC->atom_pos[3*atm2], pSPARC->atom_pos[3*atm2+1], pSPARC->atom_pos[3*atm2+2], &dist);
initialization.c:4358:        for (atm1 = 0; atm1 < pSPARC->n_atom-1; atm1++) {
initialization.c:4359:            for (atm2 = atm1+1; atm2 < pSPARC->n_atom; atm2++) {
initialization.c:4360:                dist = fabs(sqrt(pow(pSPARC->atom_pos[3*atm1] - pSPARC->atom_pos[3*atm2],2.0) 
initialization.c:4361:                               + pow(pSPARC->atom_pos[3*atm1+1] - pSPARC->atom_pos[3*atm2+1],2.0) 
initialization.c:4362:                               + pow(pSPARC->atom_pos[3*atm1+2] - pSPARC->atom_pos[3*atm2+2],2.0) ));
lapVecNonOrth.c:373:    periods[0] = 1 - pSPARC->BCx;
lapVecNonOrth.c:374:    periods[1] = 1 - pSPARC->BCy;
lapVecNonOrth.c:375:    periods[2] = 1 - pSPARC->BCz;
lapVecNonOrth.c:377:    int FDn = pSPARC->order / 2;
lapVecNonOrth.c:385:    int DMnx_ex = DMnx + pSPARC->order;
lapVecNonOrth.c:386:    int DMny_ex = DMny + pSPARC->order;
lapVecNonOrth.c:387:    int DMnz_ex = DMnz + pSPARC->order;
lapVecNonOrth.c:404:    if (pSPARC->CyclixFlag) {
lapVecNonOrth.c:405:        w2_diag  = (pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_z[0]) * a;
lapVecNonOrth.c:407:        w2_diag  = (pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_y[0] + pSPARC->D2_stencil_coeffs_z[0]) * a;
lapVecNonOrth.c:523:    int overlap_flag = (int) (nproc > 1 && DMnx > pSPARC->order 
lapVecNonOrth.c:524:                          && DMny > pSPARC->order && DMnz > pSPARC->order);
lapVecNonOrth.c:534:    if (pSPARC->CyclixFlag) {
lapVecNonOrth.c:535:        if(pSPARC->cell_typ == 21){
lapVecNonOrth.c:540:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:543:        } else if(pSPARC->cell_typ > 21 && pSPARC->cell_typ < 30){
lapVecNonOrth.c:553:                            FDn, DMnx_in, FDn, DMny_out, FDn, DMnz_in, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:558:                                FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, FDn, pSPARC->order, FDn,
lapVecNonOrth.c:559:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:564:        if(pSPARC->cell_typ == 11){
lapVecNonOrth.c:573:                        FDn, DMnx_out, FDn, DMny_in, FDn, DMnz_in, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_y, 0.0);
lapVecNonOrth.c:578:                                FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, pSPARC->order, FDn, FDn,
lapVecNonOrth.c:582:        } else if(pSPARC->cell_typ == 12){
lapVecNonOrth.c:592:                        FDn, DMnx_out, FDn, DMny_in, FDn, DMnz_in, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:597:                                FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, pSPARC->order, FDn, FDn,
lapVecNonOrth.c:601:        } else if(pSPARC->cell_typ == 13){
lapVecNonOrth.c:611:                            FDn, DMnx_in, FDn, DMny_out, FDn, DMnz_in, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:616:                                FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, FDn, pSPARC->order, FDn,
lapVecNonOrth.c:620:        } else if(pSPARC->cell_typ == 14){
lapVecNonOrth.c:630:                                FDn, DMnx_out, FDn, DMny_in, FDn, DMnz_in, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:635:                                FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, pSPARC->order, FDn, FDn,
lapVecNonOrth.c:639:        } else if(pSPARC->cell_typ == 15){
lapVecNonOrth.c:649:                                FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_out, FDn, FDn, 0, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
lapVecNonOrth.c:654:                                FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, FDn, FDn, pSPARC->order,
lapVecNonOrth.c:658:        } else if(pSPARC->cell_typ == 16){
lapVecNonOrth.c:668:                                FDn, DMnx_in, FDn, DMny_out, FDn, DMnz_in, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
lapVecNonOrth.c:673:                                FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, FDn, pSPARC->order, FDn,
lapVecNonOrth.c:677:        } else if(pSPARC->cell_typ == 17){
lapVecNonOrth.c:693:                                FDn, DMnx_out, FDn, DMny_in, FDn, DMnz_in, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:696:                            FDn, DMnx_in, FDn, DMny_out, FDn, DMnz_in, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);      
lapVecNonOrth.c:701:                                FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, pSPARC->order, FDn, FDn, FDn, pSPARC->order, FDn,
lapVecNonOrth.c:775:    if (pSPARC->CyclixFlag) {
lapVecNonOrth.c:776:        if(pSPARC->cell_typ == 21){
lapVecNonOrth.c:786:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:790:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:797:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order,
lapVecNonOrth.c:798:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:801:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order,
lapVecNonOrth.c:802:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:809:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order,
lapVecNonOrth.c:810:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:813:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order,
lapVecNonOrth.c:814:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:821:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:824:        } else if(pSPARC->cell_typ > 21 && pSPARC->cell_typ < 30){
lapVecNonOrth.c:832:                            0, DMnx, 0, DMny_ex, 0, FDn, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:835:                            0, DMnx, 0, DMny_ex, DMnz_in, DMnz, FDn, 0, DMnz, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:842:                            0, DMnx, 0, FDn, FDn, DMnz_in, FDn, 0, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:845:                            0, DMnx, DMny_out, DMny_ex, FDn, DMnz_in, FDn, DMny_out, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:852:                            0, FDn, FDn, DMny_out, FDn, DMnz_in, FDn, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:855:                            DMnx_in, DMnx, FDn, DMny_out, FDn, DMnz_in, DMnx, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:866:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:870:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:877:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, 0, FDn, FDn,
lapVecNonOrth.c:878:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:881:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, 0, DMny, FDn,
lapVecNonOrth.c:882:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:889:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, 0, pSPARC->order, FDn,
lapVecNonOrth.c:890:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:893:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx_in, pSPARC->order, FDn,
lapVecNonOrth.c:894:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:899:                            0, DMnx, 0, DMny_ex, 0, DMnz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:905:                                Lap_wt, w2_diag, _b, pSPARC->xin + DMVertices[0] * pSPARC->delta_x, a, _v, y+n*DMnd);
lapVecNonOrth.c:912:        if(pSPARC->cell_typ == 11){
lapVecNonOrth.c:919:                            0, DMnx_ex, 0, DMny, 0, FDn, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_y, 0.0);
lapVecNonOrth.c:922:                            0, DMnx_ex, 0, DMny, DMnz_in, DMnz, 0, FDn, DMnz, pSPARC->D1_stencil_coeffs_y, 0.0);
lapVecNonOrth.c:928:                            0, DMnx_ex, 0, FDn, FDn, DMnz_in, 0, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_y, 0.0);
lapVecNonOrth.c:931:                            0, DMnx_ex, DMny_in, DMny, FDn, DMnz_in, 0, DMny, pSPARC->order, pSPARC->D1_stencil_coeffs_y, 0.0);
lapVecNonOrth.c:937:                            0, FDn, FDn, DMny_in, FDn, DMnz_in, 0, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_y, 0.0);
lapVecNonOrth.c:940:                            DMnx_out, DMnx_ex, FDn, DMny_in, FDn, DMnz_in, DMnx_out, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_y, 0.0);
lapVecNonOrth.c:958:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, FDn, 0, FDn,
lapVecNonOrth.c:962:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, FDn, DMny_in, FDn,
lapVecNonOrth.c:969:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, FDn, FDn, FDn,
lapVecNonOrth.c:973:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx, FDn, FDn,
lapVecNonOrth.c:979:                            0, DMnx_ex, 0, DMny, 0, DMnz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_y, 0.0);
lapVecNonOrth.c:989:        } else if(pSPARC->cell_typ == 12){
lapVecNonOrth.c:996:                            0, DMnx_ex, 0, DMny, 0, FDn, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:999:                            0, DMnx_ex, 0, DMny, DMnz_in, DMnz, 0, FDn, DMnz, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1005:                            0, DMnx_ex, 0, FDn, FDn, DMnz_in, 0, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1008:                            0, DMnx_ex, DMny_in, DMny, FDn, DMnz_in, 0, DMny, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1014:                            0, FDn, FDn, DMny_in, FDn, DMnz_in, 0, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1017:                            DMnx_out, DMnx_ex, FDn, DMny_in, FDn, DMnz_in, DMnx_out, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1035:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, FDn, 0, FDn,
lapVecNonOrth.c:1039:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, FDn, DMny_in, FDn,
lapVecNonOrth.c:1046:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, FDn, FDn, FDn,
lapVecNonOrth.c:1050:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx, FDn, FDn,
lapVecNonOrth.c:1056:                            0, DMnx_ex, 0, DMny, 0, DMnz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1066:        } else if(pSPARC->cell_typ == 13){
lapVecNonOrth.c:1073:                            0, DMnx, 0, DMny_ex, 0, FDn, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1076:                            0, DMnx, 0, DMny_ex, DMnz_in, DMnz, FDn, 0, DMnz, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1082:                            0, DMnx, 0, FDn, FDn, DMnz_in, FDn, 0, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1085:                            0, DMnx, DMny_out, DMny_ex, FDn, DMnz_in, FDn, DMny_out, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1091:                            0, FDn, FDn, DMny_out, FDn, DMnz_in, FDn, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1094:                            DMnx_in, DMnx, FDn, DMny_out, FDn, DMnz_in, DMnx, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1112:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, 0, FDn, FDn,
lapVecNonOrth.c:1116:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, 0, DMny, FDn,
lapVecNonOrth.c:1123:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, 0, pSPARC->order, FDn,
lapVecNonOrth.c:1127:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx_in, pSPARC->order, FDn,
lapVecNonOrth.c:1133:                            0, DMnx, 0, DMny_ex, 0, DMnz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1143:        } else if(pSPARC->cell_typ == 14){
lapVecNonOrth.c:1150:                                0, DMnx_ex, 0, DMny, 0, FDn, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1152:                                0, DMnx_ex, 0, DMny, DMnz_in, DMnz, 0, FDn, DMnz, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1158:                                0, DMnx_ex, 0, FDn, FDn, DMnz_in, 0, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1160:                                0, DMnx_ex, DMny_in, DMny, FDn, DMnz_in, 0, DMny, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1166:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, 0, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1168:                                DMnx_out, DMnx_ex, FDn, DMny_in, FDn, DMnz_in, DMnx_out, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1186:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, FDn, 0, FDn,
lapVecNonOrth.c:1190:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, FDn, DMny_in, FDn,
lapVecNonOrth.c:1197:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, FDn, FDn, FDn,
lapVecNonOrth.c:1200:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx, FDn, FDn,
lapVecNonOrth.c:1206:                                0, DMnx_ex, 0, DMny, 0, DMnz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1216:        } else if(pSPARC->cell_typ == 15){
lapVecNonOrth.c:1223:                                0, DMnx, 0, DMny, 0, FDn, FDn, FDn, 0, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
lapVecNonOrth.c:1225:                                0, DMnx, 0, DMny, DMnz_out, DMnz_ex, FDn, FDn, DMnz_out, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
lapVecNonOrth.c:1231:                                0, DMnx, 0, FDn, FDn, DMnz_out, FDn, FDn, FDn, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
lapVecNonOrth.c:1233:                                0, DMnx, DMny_in, DMny, FDn, DMnz_out, FDn, DMny, FDn, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
lapVecNonOrth.c:1239:                                0, FDn, FDn, DMny_in, FDn, DMnz_out, FDn, pSPARC->order, FDn, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
lapVecNonOrth.c:1241:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_out, DMnx, pSPARC->order, FDn, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
lapVecNonOrth.c:1259:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, 0, 0, pSPARC->order, 
lapVecNonOrth.c:1263:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, 0, DMny_in, pSPARC->order,
lapVecNonOrth.c:1270:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, 0, FDn, pSPARC->order, 
lapVecNonOrth.c:1274:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx_in, FDn, pSPARC->order,
lapVecNonOrth.c:1281:                                0, DMnx, 0, DMny, 0, DMnz_ex, FDn, FDn, 0, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy);
lapVecNonOrth.c:1291:        } else if(pSPARC->cell_typ == 16){
lapVecNonOrth.c:1298:                                0, DMnx, 0, DMny_ex, 0, FDn, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
lapVecNonOrth.c:1300:                                0, DMnx, 0, DMny_ex, DMnz_in, DMnz, FDn, 0, DMnz, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
lapVecNonOrth.c:1306:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, 0, pSPARC->order, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
lapVecNonOrth.c:1308:                                0, DMnx, DMny_out, DMny_ex, FDn, DMnz_in, FDn, DMny_out, pSPARC->order, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
lapVecNonOrth.c:1314:                                0, FDn, FDn, DMny_out, FDn, DMnz_in, FDn, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
lapVecNonOrth.c:1316:                                DMnx_in, DMnx, FDn, DMny_out, FDn, DMnz_in, DMnx, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
lapVecNonOrth.c:1334:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, 0, FDn, FDn, 
lapVecNonOrth.c:1338:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, 0, DMny, FDn,
lapVecNonOrth.c:1345:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, 0, pSPARC->order, FDn, 
lapVecNonOrth.c:1349:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx_in, pSPARC->order, FDn,
lapVecNonOrth.c:1355:                                0, DMnx, 0, DMny_ex, 0, DMnz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz);
lapVecNonOrth.c:1365:        } else if(pSPARC->cell_typ == 17){
lapVecNonOrth.c:1371:                                0, DMnx_ex, 0, DMny, 0, FDn, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1373:                                0, DMnx_ex, 0, DMny, DMnz_in, DMnz, 0, FDn, DMnz, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1379:                                0, DMnx_ex, 0, FDn, FDn, DMnz_in, 0, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1381:                                0, DMnx_ex, DMny_in, DMny, FDn, DMnz_in, 0, DMny, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1387:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, 0, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1389:                                DMnx_out, DMnx_ex, FDn, DMny_in, FDn, DMnz_in, DMnx_out, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1396:                            0, DMnx, 0, DMny_ex, 0, FDn, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1399:                            0, DMnx, 0, DMny_ex, DMnz_in, DMnz, FDn, 0, DMnz, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1405:                            0, DMnx, 0, FDn, FDn, DMnz_in, FDn, 0, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1408:                            0, DMnx, DMny_out, DMny_ex, FDn, DMnz_in, FDn, DMny_out, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1414:                            0, FDn, FDn, DMny_out, FDn, DMnz_in, FDn, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1417:                            DMnx_in, DMnx, FDn, DMny_out, FDn, DMnz_in, DMnx, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1435:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, FDn, 0, FDn, 0, FDn, FDn,
lapVecNonOrth.c:1439:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, FDn, DMny_in, FDn, 0, DMny, FDn,
lapVecNonOrth.c:1446:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, FDn, FDn, FDn, 0, pSPARC->order, FDn,
lapVecNonOrth.c:1450:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx, FDn, FDn, DMnx_in, pSPARC->order, FDn,
lapVecNonOrth.c:1456:                                0, DMnx_ex, 0, DMny, 0, DMnz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz);
lapVecNonOrth.c:1458:                            0, DMnx, 0, DMny_ex, 0, DMnz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0);
lapVecNonOrth.c:1492:    if (pSPARC->CyclixFlag) {
lapVecNonOrth.c:1493:        if(pSPARC->cell_typ == 21){
lapVecNonOrth.c:1496:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p]  * a;
lapVecNonOrth.c:1497:                (*Lap_stencil++) = pSPARC->D1_stencil_coeffs_x[p]  * a;
lapVecNonOrth.c:1498:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p]  * a;
lapVecNonOrth.c:1499:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p]  * a;
lapVecNonOrth.c:1501:        } else if(pSPARC->cell_typ > 21 && pSPARC->cell_typ < 30){
lapVecNonOrth.c:1504:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p]  * a;
lapVecNonOrth.c:1505:                (*Lap_stencil++) = pSPARC->D1_stencil_coeffs_x[p]  * a;
lapVecNonOrth.c:1506:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p]  * a;
lapVecNonOrth.c:1507:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p]  * a;
lapVecNonOrth.c:1508:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_yz[p] * a;
lapVecNonOrth.c:1512:        if(pSPARC->cell_typ == 0){
lapVecNonOrth.c:1515:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1516:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecNonOrth.c:1517:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecNonOrth.c:1519:        } else if(pSPARC->cell_typ == 11){
lapVecNonOrth.c:1522:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1523:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecNonOrth.c:1524:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecNonOrth.c:1525:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_xy[p] * a;
lapVecNonOrth.c:1527:        } else if(pSPARC->cell_typ == 12){
lapVecNonOrth.c:1530:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1531:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecNonOrth.c:1532:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecNonOrth.c:1533:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_xz[p] * a;
lapVecNonOrth.c:1535:        } else if(pSPARC->cell_typ == 13){
lapVecNonOrth.c:1538:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1539:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecNonOrth.c:1540:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecNonOrth.c:1541:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_yz[p] * a;
lapVecNonOrth.c:1543:        } else if(pSPARC->cell_typ == 14){
lapVecNonOrth.c:1546:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1547:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecNonOrth.c:1548:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecNonOrth.c:1549:                (*Lap_stencil++) = pSPARC->D1_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1551:        } else if(pSPARC->cell_typ == 15){
lapVecNonOrth.c:1554:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1555:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecNonOrth.c:1556:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecNonOrth.c:1557:                (*Lap_stencil++) = pSPARC->D1_stencil_coeffs_z[p] * a;
lapVecNonOrth.c:1559:        } else if(pSPARC->cell_typ == 16){
lapVecNonOrth.c:1562:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1563:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecNonOrth.c:1564:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecNonOrth.c:1565:                (*Lap_stencil++) = pSPARC->D1_stencil_coeffs_y[p] * a;
lapVecNonOrth.c:1567:        } else if(pSPARC->cell_typ == 17){
lapVecNonOrth.c:1570:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1571:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecNonOrth.c:1572:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecNonOrth.c:1573:                (*Lap_stencil++) = pSPARC->D1_stencil_coeffs_x[p] * a;
lapVecNonOrth.c:1574:                (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_yz[p] * a; 
lapVecNonOrthKpt.c:79:    periods[0] = 1 - pSPARC->BCx;
lapVecNonOrthKpt.c:80:    periods[1] = 1 - pSPARC->BCy;
lapVecNonOrthKpt.c:81:    periods[2] = 1 - pSPARC->BCz;
lapVecNonOrthKpt.c:83:    int FDn = pSPARC->order / 2;
lapVecNonOrthKpt.c:91:    int DMnx_ex = DMnx + pSPARC->order;
lapVecNonOrthKpt.c:92:    int DMny_ex = DMny + pSPARC->order;
lapVecNonOrthKpt.c:93:    int DMnz_ex = DMnz + pSPARC->order;
lapVecNonOrthKpt.c:110:    if (pSPARC->CyclixFlag) {
lapVecNonOrthKpt.c:111:        w2_diag  = (pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_z[0]) * a;
lapVecNonOrthKpt.c:113:        w2_diag  = (pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_y[0] + pSPARC->D2_stencil_coeffs_z[0]) * a;
lapVecNonOrthKpt.c:229:    int overlap_flag = (int) (nproc > 1 && DMnx > pSPARC->order
lapVecNonOrthKpt.c:230:                          && DMny > pSPARC->order && DMnz > pSPARC->order);
lapVecNonOrthKpt.c:239:    if (pSPARC->CyclixFlag) {
lapVecNonOrthKpt.c:240:        if(pSPARC->cell_typ == 21){
lapVecNonOrthKpt.c:247:        } else if(pSPARC->cell_typ > 21 && pSPARC->cell_typ < 30){
lapVecNonOrthKpt.c:254:            phase_fac_m1 = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) + sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I;
lapVecNonOrthKpt.c:255:            phase_fac_m2 = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) + sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecNonOrthKpt.c:260:                                FDn, DMnx_in, FDn, DMny_out, FDn, DMnz_in, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:261:                                0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:266:                                            FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, FDn, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:267:                                            pSPARC->order, phase_fac_m2, FDn, DMny_in, pSPARC->Ny, a);
lapVecNonOrthKpt.c:272:        if(pSPARC->cell_typ == 11){
lapVecNonOrthKpt.c:279:            phase_fac_m1 = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) + sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecNonOrthKpt.c:280:            phase_fac_m2 = cos(pSPARC->k1_loc[kpt] * pSPARC->range_x) + sin(pSPARC->k1_loc[kpt] * pSPARC->range_x) * I;
lapVecNonOrthKpt.c:285:                                FDn, DMnx_out, FDn, DMny_in, FDn, DMnz_in, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_y, 0.0,
lapVecNonOrthKpt.c:286:                                0, pSPARC->order, 0, phase_fac_m1, FDn, DMny_in, pSPARC->Ny);
lapVecNonOrthKpt.c:291:                                    FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, pSPARC->order, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:292:                                    pSPARC->order, 0, 0, phase_fac_m2, FDn, DMnx_in, pSPARC->Nx);
lapVecNonOrthKpt.c:296:        } else if(pSPARC->cell_typ == 12){
lapVecNonOrthKpt.c:303:            phase_fac_m1 = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) + sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I;
lapVecNonOrthKpt.c:304:            phase_fac_m2 = cos(pSPARC->k1_loc[kpt] * pSPARC->range_x) + sin(pSPARC->k1_loc[kpt] * pSPARC->range_x) * I;
lapVecNonOrthKpt.c:309:                                FDn, DMnx_out, FDn, DMny_in, FDn, DMnz_in, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:310:                                0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:315:                                    FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, pSPARC->order, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:316:                                    pSPARC->order, 0, 0, phase_fac_m2, FDn, DMnx_in, pSPARC->Nx);
lapVecNonOrthKpt.c:319:        } else if(pSPARC->cell_typ == 13){
lapVecNonOrthKpt.c:326:            phase_fac_m1 = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) + sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I;
lapVecNonOrthKpt.c:327:            phase_fac_m2 = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) + sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecNonOrthKpt.c:332:                                FDn, DMnx_in, FDn, DMny_out, FDn, DMnz_in, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:333:                                0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:338:                                    FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, FDn, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:339:                                    0, pSPARC->order, 0, phase_fac_m2, FDn, DMny_in, pSPARC->Ny);
lapVecNonOrthKpt.c:342:        } else if(pSPARC->cell_typ == 14){
lapVecNonOrthKpt.c:349:            phase_fac_m1 = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) + sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecNonOrthKpt.c:350:            phase_fac_m2 = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) + sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I;
lapVecNonOrthKpt.c:351:            phase_fac_m3 = cos(pSPARC->k1_loc[kpt] * pSPARC->range_x) + sin(pSPARC->k1_loc[kpt] * pSPARC->range_x) * I;
lapVecNonOrthKpt.c:356:                                    FDn, DMnx_out, FDn, DMny_in, FDn, DMnz_in, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:357:                                    0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, FDn, DMny_in, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:362:                                    FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, pSPARC->order, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:363:                                    pSPARC->order, 0, 0, phase_fac_m3, FDn, DMnx_in, pSPARC->Nx);
lapVecNonOrthKpt.c:366:        } else if(pSPARC->cell_typ == 15){
lapVecNonOrthKpt.c:373:            phase_fac_m1 = cos(pSPARC->k1_loc[kpt] * pSPARC->range_x) + sin(pSPARC->k1_loc[kpt] * pSPARC->range_x) * I;
lapVecNonOrthKpt.c:374:            phase_fac_m2 = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) + sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecNonOrthKpt.c:375:            phase_fac_m3 = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) + sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I;
lapVecNonOrthKpt.c:380:                                    FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_out, FDn, FDn, 0, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy,
lapVecNonOrthKpt.c:381:                                    pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m1, phase_fac_m2, FDn, DMnx_in, FDn, DMny_in, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:386:                                    FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, FDn, FDn, pSPARC->order, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:387:                                    0, 0, pSPARC->order, phase_fac_m3, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:390:        } else if(pSPARC->cell_typ == 16){
lapVecNonOrthKpt.c:397:            phase_fac_m1 = cos(pSPARC->k1_loc[kpt] * pSPARC->range_x) + sin(pSPARC->k1_loc[kpt] * pSPARC->range_x) * I;
lapVecNonOrthKpt.c:398:            phase_fac_m2 = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) + sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I;
lapVecNonOrthKpt.c:399:            phase_fac_m3 = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) + sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecNonOrthKpt.c:404:                                    FDn, DMnx_in, FDn, DMny_out, FDn, DMnz_in, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz,
lapVecNonOrthKpt.c:405:                                    pSPARC->order, 0, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, FDn, DMnx_in, FDn, DMnz_in, pSPARC->Nx, pSPARC->Nz);
lapVecNonOrthKpt.c:410:                                    FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, FDn, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:411:                                    0, pSPARC->order, 0, phase_fac_m3, FDn, DMny_in, pSPARC->Ny);
lapVecNonOrthKpt.c:414:        } else if(pSPARC->cell_typ == 17){
lapVecNonOrthKpt.c:427:            phase_fac_m1 = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) + sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecNonOrthKpt.c:428:            phase_fac_m2 = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) + sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I;
lapVecNonOrthKpt.c:429:            phase_fac_m3 = cos(pSPARC->k1_loc[kpt] * pSPARC->range_x) + sin(pSPARC->k1_loc[kpt] * pSPARC->range_x) * I;
lapVecNonOrthKpt.c:434:                                    FDn, DMnx_out, FDn, DMny_in, FDn, DMnz_in, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:435:                                    0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, FDn, DMny_in, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:438:                                FDn, DMnx_in, FDn, DMny_out, FDn, DMnz_in, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:439:                                0, 0, pSPARC->order, phase_fac_m2, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:445:                                    FDn, DMnx_in, FDn, DMny_in, FDn, DMnz_in, FDn, FDn, FDn, pSPARC->order, FDn, FDn, FDn, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:446:                                    pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m3, phase_fac_m1, FDn, DMnx_in, FDn, DMny_in, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:521:    if (pSPARC->CyclixFlag) {
lapVecNonOrthKpt.c:522:        if(pSPARC->cell_typ == 21){
lapVecNonOrthKpt.c:539:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt, a);
lapVecNonOrthKpt.c:542:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt, a);
lapVecNonOrthKpt.c:549:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt, a);
lapVecNonOrthKpt.c:552:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt, a);
lapVecNonOrthKpt.c:560:        } else if(pSPARC->cell_typ > 21 && pSPARC->cell_typ < 30){
lapVecNonOrthKpt.c:568:                                0, DMnx, 0, DMny_ex, 0, FDn, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:569:                                0, 0, pSPARC->order, phase_fac_m1, 0, FDn, pSPARC->Nz);
lapVecNonOrthKpt.c:572:                                0, DMnx, 0, DMny_ex, DMnz_in, DMnz, FDn, 0, DMnz, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:573:                                0, 0, pSPARC->order, phase_fac_m1, DMnz_in, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:580:                            0, DMnx, 0, FDn, FDn, DMnz_in, FDn, 0, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:581:                            0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:584:                            0, DMnx, DMny_out, DMny_ex, FDn, DMnz_in, FDn, DMny_out, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:585:                            0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:592:                            0, FDn, FDn, DMny_out, FDn, DMnz_in, FDn, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:593:                            0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:596:                            DMnx_in, DMnx, FDn, DMny_out, FDn, DMnz_in, DMnx, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:597:                            0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:608:                                pSPARC->order, phase_fac_m2, 0, DMny, pSPARC->Ny, a);
lapVecNonOrthKpt.c:612:                                pSPARC->order, phase_fac_m2, 0, DMny, pSPARC->Ny, a);
lapVecNonOrthKpt.c:619:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, 0, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:620:                                pSPARC->order, phase_fac_m2, 0, FDn, pSPARC->Ny, a);
lapVecNonOrthKpt.c:623:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, 0, DMny, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:624:                                pSPARC->order, phase_fac_m2, DMny_in, DMny, pSPARC->Ny, a);
lapVecNonOrthKpt.c:631:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, 0, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:632:                                pSPARC->order, phase_fac_m2, FDn, DMny_in, pSPARC->Ny, a);
lapVecNonOrthKpt.c:635:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx_in, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:636:                                pSPARC->order, phase_fac_m2, FDn, DMny_in, pSPARC->Ny, a);
lapVecNonOrthKpt.c:641:                            0, DMnx, 0, DMny_ex, 0, DMnz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:642:                            0, 0, pSPARC->order, phase_fac_m1, 0, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:648:                                pSPARC->order, phase_fac_m2, 0, DMny, pSPARC->Ny, a);
lapVecNonOrthKpt.c:655:        if(pSPARC->cell_typ == 11){
lapVecNonOrthKpt.c:662:                                0, DMnx_ex, 0, DMny, 0, FDn, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_y, 0.0,
lapVecNonOrthKpt.c:663:                                0, pSPARC->order, 0, phase_fac_m1, 0, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:666:                                0, DMnx_ex, 0, DMny, DMnz_in, DMnz, 0, FDn, DMnz, pSPARC->D1_stencil_coeffs_y, 0.0,
lapVecNonOrthKpt.c:667:                                0, pSPARC->order, 0, phase_fac_m1, 0, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:673:                                0, DMnx_ex, 0, FDn, FDn, DMnz_in, 0, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_y, 0.0,
lapVecNonOrthKpt.c:674:                                0, pSPARC->order, 0, phase_fac_m1, 0, FDn, pSPARC->Ny);
lapVecNonOrthKpt.c:677:                                0, DMnx_ex, DMny_in, DMny, FDn, DMnz_in, 0, DMny, pSPARC->order, pSPARC->D1_stencil_coeffs_y, 0.0,
lapVecNonOrthKpt.c:678:                                0, pSPARC->order, 0, phase_fac_m1, DMny_in, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:684:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, 0, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_y, 0.0,
lapVecNonOrthKpt.c:685:                                0, pSPARC->order, 0, phase_fac_m1, FDn, DMny_in, pSPARC->Ny);
lapVecNonOrthKpt.c:688:                                DMnx_out, DMnx_ex, FDn, DMny_in, FDn, DMnz_in, DMnx_out, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_y, 0.0,
lapVecNonOrthKpt.c:689:                                0, pSPARC->order, 0, phase_fac_m1, FDn, DMny_in, pSPARC->Ny);
lapVecNonOrthKpt.c:697:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:701:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:707:                                    0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, FDn, 0, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:708:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:711:                                    0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, FDn, DMny_in, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:712:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:718:                                    0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, FDn, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:719:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, FDn, pSPARC->Nx);
lapVecNonOrthKpt.c:722:                                    DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:723:                                    pSPARC->order, 0, 0, phase_fac_m2, DMnx_in, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:728:                                0, DMnx_ex, 0, DMny, 0, DMnz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_y, 0.0,
lapVecNonOrthKpt.c:729:                                0, pSPARC->order, 0, phase_fac_m1, 0, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:735:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:740:        } else if(pSPARC->cell_typ == 12){
lapVecNonOrthKpt.c:747:                                0, DMnx_ex, 0, DMny, 0, FDn, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:748:                                0, 0, pSPARC->order, phase_fac_m1, 0, FDn, pSPARC->Nz);
lapVecNonOrthKpt.c:751:                                0, DMnx_ex, 0, DMny, DMnz_in, DMnz, 0, FDn, DMnz, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:752:                                0, 0, pSPARC->order, phase_fac_m1, DMnz_in, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:758:                                0, DMnx_ex, 0, FDn, FDn, DMnz_in, 0, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:759:                                0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:762:                                0, DMnx_ex, DMny_in, DMny, FDn, DMnz_in, 0, DMny, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:763:                                0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:769:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, 0, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:770:                                0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:773:                                DMnx_out, DMnx_ex, FDn, DMny_in, FDn, DMnz_in, DMnx_out, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:774:                                0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:782:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:786:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:792:                                    0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, FDn, 0, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:793:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:796:                                    0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, FDn, DMny_in, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:797:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:803:                                    0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, FDn, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:804:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, FDn, pSPARC->Nx);
lapVecNonOrthKpt.c:807:                                    DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:808:                                    pSPARC->order, 0, 0, phase_fac_m2, DMnx_in, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:813:                                0, DMnx_ex, 0, DMny, 0, DMnz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:814:                                0, 0, pSPARC->order, phase_fac_m1, 0, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:820:                                    pSPARC->order, 0, 0, phase_fac_m2, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:825:        } else if(pSPARC->cell_typ == 13){
lapVecNonOrthKpt.c:832:                                0, DMnx, 0, DMny_ex, 0, FDn, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:833:                                0, 0, pSPARC->order, phase_fac_m1, 0, FDn, pSPARC->Nz);
lapVecNonOrthKpt.c:836:                                0, DMnx, 0, DMny_ex, DMnz_in, DMnz, FDn, 0, DMnz, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:837:                                0, 0, pSPARC->order, phase_fac_m1, DMnz_in, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:843:                            0, DMnx, 0, FDn, FDn, DMnz_in, FDn, 0, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:844:                            0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:847:                            0, DMnx, DMny_out, DMny_ex, FDn, DMnz_in, FDn, DMny_out, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:848:                            0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:854:                            0, FDn, FDn, DMny_out, FDn, DMnz_in, FDn, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:855:                            0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:858:                            DMnx_in, DMnx, FDn, DMny_out, FDn, DMnz_in, DMnx, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:859:                            0, 0, pSPARC->order, phase_fac_m1, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:867:                                0, pSPARC->order, 0, phase_fac_m2, 0, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:871:                                0, pSPARC->order, 0, phase_fac_m2, 0, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:877:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, 0, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:878:                                0, pSPARC->order, 0, phase_fac_m2, 0, FDn, pSPARC->Ny);
lapVecNonOrthKpt.c:881:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, 0, DMny, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:882:                                0, pSPARC->order, 0, phase_fac_m2, DMny_in, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:888:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, 0, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:889:                                0, pSPARC->order, 0, phase_fac_m2, FDn, DMny_in, pSPARC->Ny);
lapVecNonOrthKpt.c:892:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx_in, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:893:                                0, pSPARC->order, 0, phase_fac_m2, FDn, DMny_in, pSPARC->Ny);
lapVecNonOrthKpt.c:898:                            0, DMnx, 0, DMny_ex, 0, DMnz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:899:                            0, 0, pSPARC->order, phase_fac_m1, 0, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:905:                                0, pSPARC->order, 0, phase_fac_m2, 0, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:910:        } else if(pSPARC->cell_typ == 14){
lapVecNonOrthKpt.c:916:                                0, DMnx_ex, 0, DMny, 0, FDn, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:917:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMny, 0, FDn, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:919:                                0, DMnx_ex, 0, DMny, DMnz_in, DMnz, 0, FDn, DMnz, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:920:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMny, DMnz_in, DMnz, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:926:                                0, DMnx_ex, 0, FDn, FDn, DMnz_in, 0, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:927:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, FDn, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:929:                                0, DMnx_ex, DMny_in, DMny, FDn, DMnz_in, 0, DMny, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:930:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, DMny_in, DMny, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:936:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, 0, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:937:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, FDn, DMny_in, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:939:                                DMnx_out, DMnx_ex, FDn, DMny_in, FDn, DMnz_in, DMnx_out, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:940:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, FDn, DMny_in, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:948:                                pSPARC->order, 0, 0, phase_fac_m3, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:952:                                pSPARC->order, 0, 0, phase_fac_m3, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:958:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, FDn, 0, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:959:                                pSPARC->order, 0, 0, phase_fac_m3, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:962:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, FDn, DMny_in, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:963:                                pSPARC->order, 0, 0, phase_fac_m3, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:969:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, FDn, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:970:                                pSPARC->order, 0, 0, phase_fac_m3, 0, FDn, pSPARC->Nx);
lapVecNonOrthKpt.c:973:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:974:                                pSPARC->order, 0, 0, phase_fac_m3, DMnx_in, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:979:                                0, DMnx_ex, 0, DMny, 0, DMnz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:980:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMny, 0, DMnz, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:986:                                pSPARC->order, 0, 0, phase_fac_m3, 0, DMnx, pSPARC->Nx);
lapVecNonOrthKpt.c:990:        } else if(pSPARC->cell_typ == 15){
lapVecNonOrthKpt.c:996:                                0, DMnx, 0, DMny, 0, FDn, FDn, FDn, 0, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy,
lapVecNonOrthKpt.c:997:                                pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m1, phase_fac_m2, 0, DMnx, 0, DMny, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:999:                                0, DMnx, 0, DMny, DMnz_out, DMnz_ex, FDn, FDn, DMnz_out, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy,
lapVecNonOrthKpt.c:1000:                                pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m1, phase_fac_m2, 0, DMnx, 0, DMny, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1006:                                0, DMnx, 0, FDn, FDn, DMnz_out, FDn, FDn, FDn, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy,
lapVecNonOrthKpt.c:1007:                                pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m1, phase_fac_m2, 0, DMnx, 0, FDn, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1009:                                0, DMnx, DMny_in, DMny, FDn, DMnz_out, FDn, DMny, FDn, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy,
lapVecNonOrthKpt.c:1010:                                pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m1, phase_fac_m2, 0, DMnx, DMny_in, DMny, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1016:                                0, FDn, FDn, DMny_in, FDn, DMnz_out, FDn, pSPARC->order, FDn, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy,
lapVecNonOrthKpt.c:1017:                                pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m1, phase_fac_m2, 0, FDn, FDn, DMny_in, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1019:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_out, DMnx, pSPARC->order, FDn, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy,
lapVecNonOrthKpt.c:1020:                                pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m1, phase_fac_m2, DMnx_in, DMnx, FDn, DMny_in, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1028:                                0, 0, pSPARC->order, phase_fac_m3, 0, FDn, pSPARC->Nz);
lapVecNonOrthKpt.c:1032:                                0, 0, pSPARC->order, phase_fac_m3, DMnz_in, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:1038:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, 0, 0, pSPARC->order, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1039:                                0, 0, pSPARC->order, phase_fac_m3, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:1042:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, 0, DMny_in, pSPARC->order, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1043:                                0, 0, pSPARC->order, phase_fac_m3, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:1049:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, 0, FDn, pSPARC->order, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1050:                                0, 0, pSPARC->order, phase_fac_m3, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:1053:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx_in, FDn, pSPARC->order, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1054:                                0, 0, pSPARC->order, phase_fac_m3, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:1059:                                0, DMnx, 0, DMny, 0, DMnz_ex, FDn, FDn, 0, pSPARC->D1_stencil_coeffs_zx, pSPARC->D1_stencil_coeffs_zy,
lapVecNonOrthKpt.c:1060:                                pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m1, phase_fac_m2, 0, DMnx, 0, DMny, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1066:                                0, 0, pSPARC->order, phase_fac_m3, 0, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:1070:        } else if(pSPARC->cell_typ == 16){
lapVecNonOrthKpt.c:1076:                                0, DMnx, 0, DMny_ex, 0, FDn, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz,
lapVecNonOrthKpt.c:1077:                                pSPARC->order, 0, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMnx, 0, FDn, pSPARC->Nx, pSPARC->Nz);
lapVecNonOrthKpt.c:1079:                                0, DMnx, 0, DMny_ex, DMnz_in, DMnz, FDn, 0, DMnz, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz,
lapVecNonOrthKpt.c:1080:                                pSPARC->order, 0, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMnx, DMnz_in, DMnz, pSPARC->Nx, pSPARC->Nz);
lapVecNonOrthKpt.c:1086:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, 0, pSPARC->order, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz,
lapVecNonOrthKpt.c:1087:                                pSPARC->order, 0, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMnx, FDn, DMnz_in, pSPARC->Nx, pSPARC->Nz);
lapVecNonOrthKpt.c:1089:                                0, DMnx, DMny_out, DMny_ex, FDn, DMnz_in, FDn, DMny_out, pSPARC->order, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz,
lapVecNonOrthKpt.c:1090:                                pSPARC->order, 0, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMnx, FDn, DMnz_in, pSPARC->Nx, pSPARC->Nz);
lapVecNonOrthKpt.c:1096:                                0, FDn, FDn, DMny_out, FDn, DMnz_in, FDn, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz,
lapVecNonOrthKpt.c:1097:                                pSPARC->order, 0, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, FDn, FDn, DMnz_in, pSPARC->Nx, pSPARC->Nz);
lapVecNonOrthKpt.c:1099:                                DMnx_in, DMnx, FDn, DMny_out, FDn, DMnz_in, DMnx, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz,
lapVecNonOrthKpt.c:1100:                                pSPARC->order, 0, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, DMnx_in, DMnx, FDn, DMnz_in, pSPARC->Nx, pSPARC->Nz);
lapVecNonOrthKpt.c:1108:                                0, pSPARC->order, 0, phase_fac_m3, 0, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:1112:                                0, pSPARC->order, 0, phase_fac_m3, 0, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:1118:                                0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, 0, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1119:                                0, pSPARC->order, 0, phase_fac_m3, 0, FDn, pSPARC->Ny);
lapVecNonOrthKpt.c:1122:                                0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, 0, DMny, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1123:                                0, pSPARC->order, 0, phase_fac_m3, DMny_in, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:1129:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, 0, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1130:                                0, pSPARC->order, 0, phase_fac_m3, FDn, DMny_in, pSPARC->Ny);
lapVecNonOrthKpt.c:1133:                                DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx_in, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1134:                                0, pSPARC->order, 0, phase_fac_m3, FDn, DMny_in, pSPARC->Ny);
lapVecNonOrthKpt.c:1139:                                0, DMnx, 0, DMny_ex, 0, DMnz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_yx, pSPARC->D1_stencil_coeffs_yz,
lapVecNonOrthKpt.c:1140:                                pSPARC->order, 0, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMnx, 0, DMnz, pSPARC->Nx, pSPARC->Nz);
lapVecNonOrthKpt.c:1146:                                0, pSPARC->order, 0, phase_fac_m3, 0, DMny, pSPARC->Ny);
lapVecNonOrthKpt.c:1150:        } else if(pSPARC->cell_typ == 17){
lapVecNonOrthKpt.c:1156:                                0, DMnx_ex, 0, DMny, 0, FDn, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:1157:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMny, 0, FDn, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:1159:                                0, DMnx_ex, 0, DMny, DMnz_in, DMnz, 0, FDn, DMnz, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:1160:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMny, DMnz_in, DMnz, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:1166:                                0, DMnx_ex, 0, FDn, FDn, DMnz_in, 0, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:1167:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, FDn, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:1169:                                0, DMnx_ex, DMny_in, DMny, FDn, DMnz_in, 0, DMny, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:1170:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, DMny_in, DMny, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:1176:                                0, FDn, FDn, DMny_in, FDn, DMnz_in, 0, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:1177:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, FDn, DMny_in, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:1179:                                DMnx_out, DMnx_ex, FDn, DMny_in, FDn, DMnz_in, DMnx_out, pSPARC->order, pSPARC->order, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:1180:                                0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, FDn, DMny_in, FDn, DMnz_in, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:1187:                            0, DMnx, 0, DMny_ex, 0, FDn, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:1188:                            0, 0, pSPARC->order, phase_fac_m2, 0, FDn, pSPARC->Nz);
lapVecNonOrthKpt.c:1191:                            0, DMnx, 0, DMny_ex, DMnz_in, DMnz, FDn, 0, DMnz, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:1192:                            0, 0, pSPARC->order, phase_fac_m2, DMnz_in, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:1198:                            0, DMnx, 0, FDn, FDn, DMnz_in, FDn, 0, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:1199:                            0, 0, pSPARC->order, phase_fac_m2, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:1202:                            0, DMnx, DMny_out, DMny_ex, FDn, DMnz_in, FDn, DMny_out, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:1203:                            0, 0, pSPARC->order, phase_fac_m2, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:1209:                            0, FDn, FDn, DMny_out, FDn, DMnz_in, FDn, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:1210:                            0, 0, pSPARC->order, phase_fac_m2, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:1213:                            DMnx_in, DMnx, FDn, DMny_out, FDn, DMnz_in, DMnx, FDn, pSPARC->order, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:1214:                            0, 0, pSPARC->order, phase_fac_m2, FDn, DMnz_in, pSPARC->Nz);
lapVecNonOrthKpt.c:1223:                                    pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m3, phase_fac_m1, 0, DMnx, 0, DMny, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1228:                                    pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m3, phase_fac_m1, 0, DMnx, 0, DMny, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1235:                                    0, DMnx, 0, FDn, FDn, DMnz_in, FDn, FDn, pSPARC->order, FDn, 0, FDn, 0, FDn, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1236:                                    pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m3, phase_fac_m1, 0, DMnx, 0, FDn, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1240:                                    0, DMnx, DMny_in, DMny, FDn, DMnz_in, FDn, DMny, pSPARC->order, FDn, DMny_in, FDn, 0, DMny, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1241:                                    pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m3, phase_fac_m1, 0, DMnx, DMny_in, DMny, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1248:                                    0, FDn, FDn, DMny_in, FDn, DMnz_in, FDn, pSPARC->order, pSPARC->order, FDn, FDn, FDn, 0, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1249:                                    pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m3, phase_fac_m1, 0, FDn, FDn, DMny_in, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1253:                                    DMnx_in, DMnx, FDn, DMny_in, FDn, DMnz_in, DMnx, pSPARC->order, pSPARC->order, DMnx, FDn, FDn, DMnx_in, pSPARC->order, FDn, Lap_wt, w2_diag, _b, _v, y+n*DMnd, kpt,
lapVecNonOrthKpt.c:1254:                                    pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m3, phase_fac_m1, DMnx_in, DMnx, FDn, DMny_in, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1259:                                    0, DMnx_ex, 0, DMny, 0, DMnz, 0, FDn, FDn, pSPARC->D1_stencil_coeffs_xy, pSPARC->D1_stencil_coeffs_xz,
lapVecNonOrthKpt.c:1260:                                    0, pSPARC->order, 0, 0, 0, pSPARC->order, phase_fac_m1, phase_fac_m2, 0, DMny, 0, DMnz, pSPARC->Ny, pSPARC->Nz);
lapVecNonOrthKpt.c:1263:                                0, DMnx, 0, DMny_ex, 0, DMnz, FDn, 0, FDn, pSPARC->D1_stencil_coeffs_z, 0.0,
lapVecNonOrthKpt.c:1264:                                0, 0, pSPARC->order, phase_fac_m2, 0, DMnz, pSPARC->Nz);
lapVecNonOrthKpt.c:1271:                                    pSPARC->order, 0, 0, 0, pSPARC->order, 0, phase_fac_m3, phase_fac_m1, 0, DMnx, 0, DMny, pSPARC->Nx, pSPARC->Ny);
lapVecNonOrthKpt.c:1439:    double complex phase_fac_l_x = cos(pSPARC->k1_loc[kpt] * pSPARC->range_x) - sin(pSPARC->k1_loc[kpt] * pSPARC->range_x) * I;
lapVecNonOrthKpt.c:1440:    double complex phase_fac_l_y = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) - sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecNonOrthKpt.c:1441:    double complex phase_fac_l_z = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) - sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I;
lapVecNonOrthKpt.c:1469:            if((global_i + r) >= pSPARC->Nx)
lapVecNonOrthKpt.c:1487:            if((global_j + r) >= pSPARC->Ny)
lapVecNonOrthKpt.c:1505:            if((global_k + r) >= pSPARC->Nz)
lapVecNonOrthKpt.c:1625:    double complex phase_fac_l_x = cos(pSPARC->k1_loc[kpt] * pSPARC->range_x) - sin(pSPARC->k1_loc[kpt] * pSPARC->range_x) * I;
lapVecNonOrthKpt.c:1626:    double complex phase_fac_l_y = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) - sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecNonOrthKpt.c:1627:    double complex phase_fac_l_z = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) - sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I;
lapVecNonOrthKpt.c:1657:            if((global_i + r) >= pSPARC->Nx)
lapVecNonOrthKpt.c:1675:            if((global_j + r) >= pSPARC->Ny)
lapVecNonOrthKpt.c:1693:            if((global_k + r) >= pSPARC->Nz)
lapVecOrth.c:245:    periods[0] = 1 - pSPARC->BCx;
lapVecOrth.c:246:    periods[1] = 1 - pSPARC->BCy;
lapVecOrth.c:247:    periods[2] = 1 - pSPARC->BCz;
lapVecOrth.c:249:    int FDn = pSPARC->order / 2;
lapVecOrth.c:257:    int DMnx_ex = DMnx + pSPARC->order;
lapVecOrth.c:258:    int DMny_ex = DMny + pSPARC->order;
lapVecOrth.c:259:    int DMnz_ex = DMnz + pSPARC->order;
lapVecOrth.c:270:    // int Nx = pSPARC->Nx;
lapVecOrth.c:271:    // int Ny = pSPARC->Ny;
lapVecOrth.c:283:        (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecOrth.c:284:        (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecOrth.c:285:        (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecOrth.c:308:        int nd_in = ncol * pSPARC->order * (DMnx*DMny + DMny*DMnz + DMnx*DMnz);
lapVecOrth.c:404:    overlap_flag = (int) (nproc > 1 && DMnx > pSPARC->order 
lapVecOrth.c:405:                          && DMny > pSPARC->order && DMnz > pSPARC->order);
lapVecOrthKpt.c:115:    double complex phase_fac_l_x = cos(pSPARC->k1_loc[kpt] * pSPARC->range_x) - sin(pSPARC->k1_loc[kpt] * pSPARC->range_x) * I;
lapVecOrthKpt.c:116:    double complex phase_fac_l_y = cos(pSPARC->k2_loc[kpt] * pSPARC->range_y) - sin(pSPARC->k2_loc[kpt] * pSPARC->range_y) * I;
lapVecOrthKpt.c:117:    double complex phase_fac_l_z = cos(pSPARC->k3_loc[kpt] * pSPARC->range_z) - sin(pSPARC->k3_loc[kpt] * pSPARC->range_z) * I; 
lapVecOrthKpt.c:140:            if((global_i + r) >= pSPARC->Nx)
lapVecOrthKpt.c:158:            if((global_j + r) >= pSPARC->Ny)
lapVecOrthKpt.c:176:            if((global_k + r) >= pSPARC->Nz)
lapVecOrthKpt.c:226:                    /*int indx_l = (global_i - r + pSPARC->Nx)/pSPARC->Nx;
lapVecOrthKpt.c:227:                    int indx_r = (global_i + r)/pSPARC->Nx;
lapVecOrthKpt.c:228:                    int indy_l = (global_j - r + pSPARC->Ny)/pSPARC->Ny;
lapVecOrthKpt.c:229:                    int indy_r = (global_j + r)/pSPARC->Ny;
lapVecOrthKpt.c:230:                    int indz_l = (global_k - r + pSPARC->Nz)/pSPARC->Nz;
lapVecOrthKpt.c:231:                    int indz_r = (global_k + r)/pSPARC->Nz;
lapVecOrthKpt.c:285:    periods[0] = 1 - pSPARC->BCx;
lapVecOrthKpt.c:286:    periods[1] = 1 - pSPARC->BCy;
lapVecOrthKpt.c:287:    periods[2] = 1 - pSPARC->BCz;
lapVecOrthKpt.c:289:    int FDn = pSPARC->order / 2;
lapVecOrthKpt.c:297:    int DMnx_ex = DMnx + pSPARC->order;
lapVecOrthKpt.c:298:    int DMny_ex = DMny + pSPARC->order;
lapVecOrthKpt.c:299:    int DMnz_ex = DMnz + pSPARC->order;
lapVecOrthKpt.c:310:    // int Nx = pSPARC->Nx;
lapVecOrthKpt.c:311:    // int Ny = pSPARC->Ny;
lapVecOrthKpt.c:323:        (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_x[p] * a;
lapVecOrthKpt.c:324:        (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_y[p] * a;
lapVecOrthKpt.c:325:        (*Lap_stencil++) = pSPARC->D2_stencil_coeffs_z[p] * a;
lapVecOrthKpt.c:348:        int nd_in = ncol * pSPARC->order * (DMnx*DMny + DMny*DMnz + DMnx*DMnz);
lapVecOrthKpt.c:444:    overlap_flag = (int) (nproc > 1 && DMnx > pSPARC->order 
lapVecOrthKpt.c:445:                          && DMny > pSPARC->order && DMnz > pSPARC->order);
lapVecRoutines.c:38:    if(pSPARC->cell_typ == 0) {
lapVecRoutines.c:42:        if (comm == pSPARC->kptcomm_topo)
lapVecRoutines.c:43:            comm2 = pSPARC->kptcomm_topo_dist_graph; // pSPARC->comm_dist_graph_phi
lapVecRoutines.c:44:        else if (comm == pSPARC->dmcomm_phi)
lapVecRoutines.c:45:            comm2 = pSPARC->comm_dist_graph_phi;
lapVecRoutines.c:46:        else if (comm == pSPARC->dmcomm)
lapVecRoutines.c:47:            comm2 = pSPARC->comm_dist_graph_psi;
lapVecRoutines.c:49:        //comm2 = pSPARC->comm_dist_graph_phi;
lapVecRoutines.c:68:    if(pSPARC->cell_typ == 0) {
lapVecRoutines.c:72:        if (comm == pSPARC->kptcomm_topo)
lapVecRoutines.c:73:            comm2 = pSPARC->kptcomm_topo_dist_graph; 
lapVecRoutines.c:74:        else if (comm == pSPARC->dmcomm)
lapVecRoutines.c:75:            comm2 = pSPARC->comm_dist_graph_psi;
lapVecRoutines.c:94:    Lap_vec_mult(pSPARC, N, pSPARC->DMVertices, 1, c, x, r, comm);
md.c:41:	avgvel = (double *)malloc(pSPARC->Ntypes * sizeof(double) );
md.c:42:	maxvel = (double *)malloc(pSPARC->Ntypes * sizeof(double) );
md.c:43:	mindis = (double *)malloc(pSPARC->Ntypes*(pSPARC->Ntypes+1)/2 * sizeof(double) );
md.c:46:	if(pSPARC->RestartFlag != 0){
md.c:50:		    if( access(pSPARC->restart_Filename, F_OK ) != -1 )
md.c:51:				rst_fp = fopen(pSPARC->restart_Filename,"r");
md.c:52:			else if( access(pSPARC->restartC_Filename, F_OK ) != -1 )
md.c:53:				rst_fp = fopen(pSPARC->restartC_Filename,"r");
md.c:55:				rst_fp = fopen(pSPARC->restartP_Filename,"r");
md.c:58:	        	pSPARC->RestartFlag = 0;
md.c:60:	    MPI_Bcast(&pSPARC->RestartFlag, 1, MPI_INT, 0, MPI_COMM_WORLD);
md.c:62:	    if (pSPARC->RestartFlag != 0) {
md.c:65:			if(pSPARC->cell_typ != 0){
md.c:66:	            for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:67:	                Cart2nonCart_coord(pSPARC, &pSPARC->atom_pos[3*atm], &pSPARC->atom_pos[3*atm+1], &pSPARC->atom_pos[3*atm+2]);
md.c:77:	pSPARC->MD_maxStep = pSPARC->restartCount + pSPARC->MD_Nstep;
md.c:81:	if (pSPARC->PrintMDout == 1 && !rank && pSPARC->MD_Nstep > 0){
md.c:82:        output_md = fopen(pSPARC->MDFilename,"w");
md.c:84:            printf("\nCannot open file \"%s\"\n",pSPARC->MDFilename);
md.c:87:        pSPARC->MDCount = -1;
md.c:89:        pSPARC->MDCount++;
md.c:91:        if(pSPARC->RestartFlag == 0){
md.c:101:    if (!rank && pSPARC->MD_Nstep > 0) {
md.c:102:        output_fp = fopen(pSPARC->OutFilename,"a");
md.c:104:            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
md.c:111:    pSPARC->MDCount++;
md.c:112:	pSPARC->elecgs_Count++;
md.c:115:	int Count = pSPARC->MDCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0); // Count is the MD step no. to be performed
md.c:116:	int check1 = (pSPARC->PrintMDout == 1 && !rank);
md.c:117:	int check2 = (pSPARC->Printrestart == 1 && !rank);
md.c:119:   	while(Count <= pSPARC->MD_maxStep && (t_acc + 1.0*(MPI_Wtime() - t_init)/60) < pSPARC->TWtime){
md.c:125:			output_md = fopen(pSPARC->MDFilename,"a+");
md.c:127:			    printf("\nCannot open file \"%s\"\n",pSPARC->MDFilename);
md.c:133:		if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0)
md.c:135:		else if(strcmpi(pSPARC->MDMeth,"NVE") == 0)
md.c:137:		else if(strcmpi(pSPARC->MDMeth,"NVK_G") == 0)
md.c:139:		else if(strcmpi(pSPARC->MDMeth,"NPT_NH") == 0)
md.c:141:		else if(strcmpi(pSPARC->MDMeth,"NPT_NP") == 0)
md.c:145:				printf("\nCannot recognize MDMeth = \"%s\"\n",pSPARC->MDMeth);
md.c:156:        } if(check2 && !(Count % pSPARC->Printrestart_fq)) // printrestart_fq is the frequency at which the restart file is written
md.c:160:			pSPARC->MDCount++;
md.c:169:			output_fp = fopen(pSPARC->OutFilename,"a");
md.c:171:	            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
md.c:178:		pSPARC->MDCount ++;
md.c:183:		pSPARC->MDCount --;
md.c:198:	if (pSPARC->ion_vel_dstr_rand == 1) {
md.c:203:	pSPARC->ion_accel = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
md.c:204:	if (pSPARC->ion_accel == NULL) {
md.c:213:    for (atm = 0; atm < pSPARC->n_atom; atm++) {
md.c:214:        count_x += pSPARC->mvAtmConstraint[3 * count];
md.c:215:        count_y += pSPARC->mvAtmConstraint[3 * count + 1];
md.c:216:        count_z += pSPARC->mvAtmConstraint[3 * count + 2];
md.c:219:    pSPARC->dof = (count_x - (count_x == pSPARC->n_atom)) + (count_y - (count_y == pSPARC->n_atom))
md.c:220:                + (count_z - (count_z == pSPARC->n_atom)); // TODO: Create a user defined variable dof with this as a default value
md.c:222:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++)
md.c:223:		pSPARC->Mass[ityp] *= pSPARC->amu2au; // mass in atomic units
md.c:225:    pSPARC->MD_dt *= pSPARC->fs2atu; // time in atomic time units
md.c:228:	if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0 && pSPARC->RestartFlag != 1){
md.c:229:		pSPARC->snose = 0.0;
md.c:230:		pSPARC->xi_nose = 0.0;
md.c:231:		pSPARC->thermos_Ti = pSPARC->ion_T;
md.c:232:		pSPARC->thermos_T  = pSPARC->thermos_Ti;
md.c:235:	if(strcmpi(pSPARC->MDMeth,"NPT_NH") == 0 && pSPARC->RestartFlag != 1){
md.c:239:		if((pSPARC->NPT_NHnnos == 0) || (pSPARC->NPT_NHnnos > L_QMASS)) {
md.c:247:        for (int subscript_NPTNH_qmass = 0; subscript_NPTNH_qmass < pSPARC->NPT_NHnnos; subscript_NPTNH_qmass++){
md.c:248:            if (pSPARC->NPT_NHqmass[subscript_NPTNH_qmass] == 0.0 && !rank){
md.c:253:        if(pSPARC->NPT_NHbmass == 0.0) {
md.c:259:		if ((pSPARC->NPTscaleVecs[0] == 1) && (pSPARC->NPTscaleVecs[1] == 1) && (pSPARC->NPTscaleVecs[2] == 1)) pSPARC->NPTisotropicFlag = 1;
md.c:260:		else pSPARC->NPTisotropicFlag = 0;
md.c:262:		for (i = 0; i < pSPARC->NPT_NHnnos; i++) {
md.c:263:			pSPARC->glogs[i] = 0.0;
md.c:264:			pSPARC->vlogs[i] = 0.0;
md.c:265:			pSPARC->xlogs[i] = 0.0;
md.c:267:		pSPARC->vlogv = 0.0;
md.c:268:		pSPARC->thermos_Ti = pSPARC->ion_T;
md.c:269:		pSPARC->thermos_T  = pSPARC->thermos_Ti;
md.c:270:		pSPARC->prtarget /= 29421.02648438959; // transfer from GPa to Ha/Bohr^3
md.c:271:		pSPARC->scale = 1.0;
md.c:273:	    pSPARC->volumeCell = pSPARC->Jacbdet*pSPARC->range_x * pSPARC->range_y * pSPARC->range_z;
md.c:274:		pSPARC->initialLatVecLength[0] = sqrt(pSPARC->LatVec[0]*pSPARC->LatVec[0] + pSPARC->LatVec[1]*pSPARC->LatVec[1] + pSPARC->LatVec[2]*pSPARC->LatVec[2]);
md.c:275:		pSPARC->initialLatVecLength[1] = sqrt(pSPARC->LatVec[3]*pSPARC->LatVec[3] + pSPARC->LatVec[4]*pSPARC->LatVec[4] + pSPARC->LatVec[5]*pSPARC->LatVec[5]);
md.c:276:		pSPARC->initialLatVecLength[2] = sqrt(pSPARC->LatVec[6]*pSPARC->LatVec[6] + pSPARC->LatVec[7]*pSPARC->LatVec[7] + pSPARC->LatVec[8]*pSPARC->LatVec[8]);
md.c:278:	else if(strcmpi(pSPARC->MDMeth,"NPT_NH") == 0) { // restart
md.c:279:		if ((pSPARC->NPTscaleVecs[0] == 1) && (pSPARC->NPTscaleVecs[1] == 1) && (pSPARC->NPTscaleVecs[2] == 1)) pSPARC->NPTisotropicFlag = 1;
md.c:280:		else pSPARC->NPTisotropicFlag = 0;
md.c:282:		for (i = 0; i < pSPARC->NPT_NHnnos; i++) {
md.c:283:			pSPARC->glogs[i] = 0.0;
md.c:285:		// pSPARC->thermos_Ti = pSPARC->ion_T; // ion_T is decided by the kinetic energy of particles at that time step, changing with time
md.c:286:		pSPARC->thermos_Ti = pSPARC->elec_T;
md.c:287:		pSPARC->thermos_T  = pSPARC->thermos_Ti;
md.c:288:		pSPARC->prtarget /= 29421.02648438959; // transfer from GPa to Ha/Bohr^3
md.c:290:		pSPARC->volumeCell = pSPARC->Jacbdet*pSPARC->range_x * pSPARC->range_y * pSPARC->range_z;
md.c:291:		pSPARC->initialLatVecLength[0] = sqrt(pSPARC->LatVec[0]*pSPARC->LatVec[0] + pSPARC->LatVec[1]*pSPARC->LatVec[1] + pSPARC->LatVec[2]*pSPARC->LatVec[2]);
md.c:292:		pSPARC->initialLatVecLength[1] = sqrt(pSPARC->LatVec[3]*pSPARC->LatVec[3] + pSPARC->LatVec[4]*pSPARC->LatVec[4] + pSPARC->LatVec[5]*pSPARC->LatVec[5]);
md.c:293:		pSPARC->initialLatVecLength[2] = sqrt(pSPARC->LatVec[6]*pSPARC->LatVec[6] + pSPARC->LatVec[7]*pSPARC->LatVec[7] + pSPARC->LatVec[8]*pSPARC->LatVec[8]);
md.c:297:	if(strcmpi(pSPARC->MDMeth,"NPT_NP") == 0 && pSPARC->RestartFlag != 1){
md.c:302:        pSPARC->volumeCell = pSPARC->Jacbdet*pSPARC->range_x*pSPARC->range_y*pSPARC->range_z;
md.c:303:		pSPARC->initialLatVecLength[0] = sqrt(pSPARC->LatVec[0]*pSPARC->LatVec[0] + pSPARC->LatVec[1]*pSPARC->LatVec[1] + pSPARC->LatVec[2]*pSPARC->LatVec[2]);
md.c:304:		pSPARC->initialLatVecLength[1] = sqrt(pSPARC->LatVec[3]*pSPARC->LatVec[3] + pSPARC->LatVec[4]*pSPARC->LatVec[4] + pSPARC->LatVec[5]*pSPARC->LatVec[5]);
md.c:305:		pSPARC->initialLatVecLength[2] = sqrt(pSPARC->LatVec[6]*pSPARC->LatVec[6] + pSPARC->LatVec[7]*pSPARC->LatVec[7] + pSPARC->LatVec[8]*pSPARC->LatVec[8]);
md.c:306:        pSPARC->maxTimeIter = 30;
md.c:308:        if(pSPARC->NPT_NP_bmass == 0.0) {
md.c:314:        pSPARC->range_x_velo = 0.0; 
md.c:315:        pSPARC->G_NPT_NP[0] = pow(pSPARC->range_x, 2.0);
md.c:316:        pSPARC->range_y_velo = 0.0; 
md.c:317:        pSPARC->G_NPT_NP[1] = pow(pSPARC->range_y, 2.0);
md.c:318:        pSPARC->range_z_velo = 0.0; 
md.c:319:        pSPARC->G_NPT_NP[2] = pow(pSPARC->range_z, 2.0);
md.c:321:	    pSPARC->scale = 1.0; // better to move to initialization.c
md.c:322:	    // pSPARC->prtarget = 6.0 // input variable, unit in GPa
md.c:323:	    pSPARC->prtarget /= 29421.02648438959; // transfer from GPa to Ha/Bohr^3
md.c:325:	    if(pSPARC->NPT_NP_qmass == 0.0) {
md.c:331:		if ((pSPARC->NPTscaleVecs[0] == 0) || (pSPARC->NPTscaleVecs[1] == 0) || (pSPARC->NPTscaleVecs[2] == 0)) {
md.c:338:        pSPARC->S_NPT_NP = 1.0; 
md.c:339:        pSPARC->Sv_NPT_NP = 0.0; 
md.c:341:        pSPARC->thermos_Ti = pSPARC->ion_T;
md.c:342:		pSPARC->thermos_T  = pSPARC->thermos_Ti;
md.c:344:		pSPARC->Pm_NPT_NP[0] = pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0)/pSPARC->S_NPT_NP*2*pSPARC->range_x*pSPARC->range_x_velo/pSPARC->G_NPT_NP[0];
md.c:345:		pSPARC->Pm_NPT_NP[1] = pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0)/pSPARC->S_NPT_NP*2*pSPARC->range_y*pSPARC->range_y_velo/pSPARC->G_NPT_NP[1];
md.c:346:		pSPARC->Pm_NPT_NP[2] = pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0)/pSPARC->S_NPT_NP*2*pSPARC->range_z*pSPARC->range_z_velo/pSPARC->G_NPT_NP[2];
md.c:348:    else if(strcmpi(pSPARC->MDMeth,"NPT_NP") == 0) { // restart
md.c:353:        pSPARC->volumeCell = pSPARC->Jacbdet*pSPARC->range_x*pSPARC->range_y*pSPARC->range_z;
md.c:354:		pSPARC->initialLatVecLength[0] = sqrt(pSPARC->LatVec[0]*pSPARC->LatVec[0] + pSPARC->LatVec[1]*pSPARC->LatVec[1] + pSPARC->LatVec[2]*pSPARC->LatVec[2]);
md.c:355:		pSPARC->initialLatVecLength[1] = sqrt(pSPARC->LatVec[3]*pSPARC->LatVec[3] + pSPARC->LatVec[4]*pSPARC->LatVec[4] + pSPARC->LatVec[5]*pSPARC->LatVec[5]);
md.c:356:		pSPARC->initialLatVecLength[2] = sqrt(pSPARC->LatVec[6]*pSPARC->LatVec[6] + pSPARC->LatVec[7]*pSPARC->LatVec[7] + pSPARC->LatVec[8]*pSPARC->LatVec[8]);
md.c:357:        pSPARC->maxTimeIter = 30;
md.c:358:        pSPARC->G_NPT_NP[0] = pSPARC->range_x * pSPARC->range_x;
md.c:359:        pSPARC->G_NPT_NP[1] = pSPARC->range_y * pSPARC->range_y;
md.c:360:        pSPARC->G_NPT_NP[2] = pSPARC->range_z * pSPARC->range_z;
md.c:362:        pSPARC->thermos_Ti = pSPARC->elec_T;
md.c:363:		pSPARC->thermos_T  = pSPARC->thermos_Ti;
md.c:364:        pSPARC->prtarget /= 29421.02648438959; // transfer from GPa to Ha/Bohr^3
md.c:368:	if(pSPARC->RestartFlag == 0){
md.c:371:	    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:372:		    mass_sum += pSPARC->Mass[ityp] * pSPARC->nAtomv[ityp];
md.c:374:	    if(pSPARC->ion_vel_dstr != 3){ // initial velocity of ions is not explicitly provided by the user
md.c:375:		    pSPARC->ion_vel = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
md.c:376:		    if (pSPARC->ion_vel == NULL) {
md.c:382:	    if(pSPARC->ion_vel_dstr == 1){
md.c:384:		    vel_cm = sqrt((pSPARC->dof * pSPARC->ion_T * pSPARC->kB)/mass_sum);
md.c:386:		    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:388:			    for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:394:				    pSPARC->ion_vel[count * 3 + 2] = vel_cm * (1.0 - 2.0 * s);
md.c:396:				    pSPARC->ion_vel[count * 3 + 1] = s * y * vel_cm;
md.c:397:				    pSPARC->ion_vel[count * 3] = s * x * vel_cm;
md.c:398:				    mvsum_x += pSPARC->Mass[ityp] * pSPARC->ion_vel[count * 3];
md.c:399:				    mvsum_y += pSPARC->Mass[ityp] * pSPARC->ion_vel[count * 3 + 1];
md.c:400:				    mvsum_z += pSPARC->Mass[ityp] * pSPARC->ion_vel[count * 3 + 2];
md.c:404:	    }else if(pSPARC->ion_vel_dstr == 2) // Maxwell-Boltzmann distribution of velocity (Default!)
md.c:407:		    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:409:			    for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:410:				    pSPARC->ion_vel[count * 3] = sqrt(pSPARC->kB * pSPARC->ion_T/pSPARC->Mass[ityp]) * cos(2 * M_PI * ((double)(rand()) / (double)(RAND_MAX)));
md.c:411:				    pSPARC->ion_vel[count * 3] *= sqrt(-2.0 * log((double)(rand()) / (double)(RAND_MAX)));
md.c:412:				    pSPARC->ion_vel[count * 3 + 1] = sqrt(pSPARC->kB * pSPARC->ion_T/pSPARC->Mass[ityp]) * cos(2 * M_PI * ((double)(rand()) / (double)(RAND_MAX)));
md.c:413:				    pSPARC->ion_vel[count * 3 + 1] *= sqrt(-2.0 * log((double)(rand()) / (double)(RAND_MAX)));
md.c:414:				    pSPARC->ion_vel[count * 3 + 2] = sqrt(pSPARC->kB * pSPARC->ion_T/pSPARC->Mass[ityp]) * cos( 2 * M_PI * ((double)(rand()) / (double)(RAND_MAX)));
md.c:415:				    pSPARC->ion_vel[count * 3 + 2] *= sqrt(-2.0 * log((double)(rand()) / (double)(RAND_MAX)));
md.c:416:				    mvsum_x += pSPARC->Mass[ityp] * pSPARC->ion_vel[count * 3];
md.c:417:				    mvsum_y += pSPARC->Mass[ityp] * pSPARC->ion_vel[count * 3 + 1];
md.c:418:				    mvsum_z += pSPARC->Mass[ityp] * pSPARC->ion_vel[count * 3 + 2];
md.c:425:	    pSPARC->KE = 0.0;
md.c:427:	    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:428:		    for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:429:			    pSPARC->ion_vel[count * 3] -= mvsum_x/mass_sum;
md.c:430:			    pSPARC->ion_vel[count * 3 + 1] -= mvsum_y/mass_sum;
md.c:431:			    pSPARC->ion_vel[count * 3 + 2] -= mvsum_z/mass_sum;
md.c:438:	    pSPARC->KE = 0.0;
md.c:439:	    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:440:		    for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:441:			    pSPARC->ion_vel[count * 3] *= pSPARC->mvAtmConstraint[count * 3];
md.c:442:			    pSPARC->ion_vel[count * 3 + 1] *= pSPARC->mvAtmConstraint[count * 3 + 1];
md.c:443:			    pSPARC->ion_vel[count * 3 + 2] *= pSPARC->mvAtmConstraint[count * 3 + 2];
md.c:444:			    pSPARC->KE += 0.5 * pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:451:	    rescal_fac = sqrt(pSPARC->dof * pSPARC->kB * pSPARC->ion_T/(2.0 * pSPARC->KE)) ;
md.c:452:	    pSPARC->KE = 0.0;
md.c:454:	    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:455:		    for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:456:			    pSPARC->ion_vel[count * 3] *= rescal_fac;
md.c:457:			    pSPARC->ion_vel[count * 3 + 1] *= rescal_fac;
md.c:458:			    pSPARC->ion_vel[count * 3 + 2] *= rescal_fac;
md.c:459:			    pSPARC->KE += 0.5 * pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:465:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:466:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:467:			pSPARC->ion_accel[count * 3] = pSPARC->forces[count * 3]/pSPARC->Mass[ityp];
md.c:468:			pSPARC->ion_accel[count * 3 + 1] = pSPARC->forces[count * 3 + 1]/pSPARC->Mass[ityp];
md.c:469:			pSPARC->ion_accel[count * 3 + 2] = pSPARC->forces[count * 3 + 2]/pSPARC->Mass[ityp];
md.c:476:	pSPARC->mean_TE_ext = pSPARC->std_TE_ext = 0.0;
md.c:477:	pSPARC->mean_elec_T = pSPARC->mean_ion_T = pSPARC->mean_TE = pSPARC->mean_KE = pSPARC->mean_PE = pSPARC->mean_U = pSPARC->mean_Entropy = 0.0;
md.c:478:	pSPARC->std_elec_T = pSPARC->std_ion_T = pSPARC->std_TE = pSPARC->std_KE = pSPARC->std_PE = pSPARC->std_U = pSPARC->std_Entropy = 0.0;
md.c:490:	pSPARC->thermos_T = pSPARC->thermos_Ti + ((pSPARC->thermos_Tf - pSPARC->thermos_Ti)/(pSPARC->MD_Nstep)) * (pSPARC->MDCount);
md.c:491:	fsnose = (pSPARC->v2nose - pSPARC->dof * pSPARC->kB * pSPARC->thermos_T)/pSPARC->qmass;
md.c:492:	pSPARC->snose += pSPARC->MD_dt * (pSPARC->xi_nose + 0.5 * pSPARC->MD_dt * fsnose);
md.c:493:	pSPARC->xi_nose += 0.5 * pSPARC->MD_dt * fsnose;
md.c:500:	pSPARC->elecgs_Count++;
md.c:510:	pSPARC->v2nose = 0.0;
md.c:511:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:512:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:513:			pSPARC->v2nose += pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:514:			pSPARC->ion_vel[count * 3] += 0.5 * pSPARC->MD_dt * (pSPARC->ion_accel[count * 3] - pSPARC->xi_nose * pSPARC->ion_vel[count * 3]);
md.c:515:			pSPARC->ion_vel[count * 3 + 1] += 0.5 * pSPARC->MD_dt * (pSPARC->ion_accel[count * 3 + 1] - pSPARC->xi_nose * pSPARC->ion_vel[count * 3 + 1]);
md.c:516:			pSPARC->ion_vel[count * 3 + 2] += 0.5 * pSPARC->MD_dt * (pSPARC->ion_accel[count * 3 + 2] - pSPARC->xi_nose * pSPARC->ion_vel[count * 3 + 2]);
md.c:518:			pSPARC->atom_pos[count * 3] += pSPARC->MD_dt * pSPARC->ion_vel[count * 3];
md.c:519:			pSPARC->atom_pos[count * 3 + 1] += pSPARC->MD_dt * pSPARC->ion_vel[count * 3 + 1];
md.c:520:			pSPARC->atom_pos[count * 3 + 2] += pSPARC->MD_dt * pSPARC->ion_vel[count * 3 + 2];
md.c:532:	vel_temp = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
md.c:533:	vonose = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
md.c:534:	hnose = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
md.c:535:	binose = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
md.c:536:	xin_nose = pSPARC->xi_nose;
md.c:537:	pSPARC->v2nose = 0.0;
md.c:538:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:539:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:540:			pSPARC->v2nose += pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:542:			pSPARC->ion_accel[count * 3] = pSPARC->forces[count * 3]/pSPARC->Mass[ityp];
md.c:543:			pSPARC->ion_accel[count * 3 + 1] = pSPARC->forces[count * 3 + 1]/pSPARC->Mass[ityp];
md.c:544:			pSPARC->ion_accel[count * 3 + 2] = pSPARC->forces[count * 3 + 2]/pSPARC->Mass[ityp];
md.c:545:			vel_temp[count * 3] = pSPARC->ion_vel[count * 3];
md.c:546:			vel_temp[count * 3 + 1] = pSPARC->ion_vel[count * 3 + 1];
md.c:547:			vel_temp[count * 3 + 2] = pSPARC->ion_vel[count * 3 + 2];
md.c:555:		for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:556:			for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:560:				hnose[count * 3] = -0.5 * pSPARC->MD_dt * (pSPARC->ion_accel[count * 3] - xio * vonose[count * 3]) - (pSPARC->ion_vel[count * 3] - vonose[count * 3]);
md.c:561:				hnose[count * 3 + 1] = -0.5 * pSPARC->MD_dt * (pSPARC->ion_accel[count * 3 + 1] - xio * vonose[count * 3 + 1]) - (pSPARC->ion_vel[count * 3 + 1] - vonose[count * 3 + 1]);
md.c:562:				hnose[count * 3 + 2] = -0.5 * pSPARC->MD_dt * (pSPARC->ion_accel[count * 3 + 2] - xio * vonose[count * 3 + 2]) - (pSPARC->ion_vel[count * 3 + 2] - vonose[count * 3 + 2]);
md.c:563:				binose[count * 3] = vonose[count * 3] * pSPARC->MD_dt * pSPARC->Mass[ityp]/pSPARC->qmass ;
md.c:565:				binose[count * 3 + 1] = vonose[count * 3 + 1] * pSPARC->MD_dt * pSPARC->Mass[ityp]/pSPARC->qmass ;
md.c:567:				binose[count * 3 + 2] = vonose[count * 3 + 2] * pSPARC->MD_dt * pSPARC->Mass[ityp]/pSPARC->qmass ;
md.c:572:		dnose = -1.0 * (0.5 * xio * pSPARC->MD_dt + 1.0) ;
md.c:573:		delxi += -1.0 * dnose * ((-1.0 * pSPARC->v2nose + pSPARC->dof * pSPARC->kB * pSPARC->thermos_T) * 0.5 * pSPARC->MD_dt/pSPARC->qmass - (pSPARC->xi_nose - xio)) ;
md.c:574:		delxi /= (-0.5 * pow(pSPARC->MD_dt,2.0) * pSPARC->v2nose/pSPARC->qmass + dnose) ;
md.c:575:		pSPARC->v2nose = 0.0 ;
md.c:577:		for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:578:			for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:579:				vel_temp[count * 3] += (hnose[count * 3] + 0.5 * pSPARC->MD_dt * vonose[count * 3] * delxi)/dnose ;
md.c:580:				vel_temp[count * 3 + 1] += (hnose[count * 3 + 1] + 0.5 * pSPARC->MD_dt * vonose[count * 3 + 1] * delxi)/dnose ;
md.c:581:				vel_temp[count * 3 + 2] += (hnose[count * 3 + 2] + 0.5 * pSPARC->MD_dt * vonose[count * 3 + 2] * delxi)/dnose ;
md.c:582:				pSPARC->v2nose += pSPARC->Mass[ityp] * (pow(vel_temp[count * 3], 2.0) + pow(vel_temp[count * 3 + 1], 2.0) + pow(vel_temp[count * 3 + 2], 2.0));
md.c:592:			if(kk >= pSPARC->n_atom){
md.c:596:			if(kk < pSPARC->n_atom && jj < 3){
md.c:597:				//if (fabs(vel_temp[kk + jj*pSPARC->n_atom]) < 1e-50)
md.c:598:				// vel_temp[kk + jj*pSPARC->n_atom] = 1e-50 ;
md.c:599:				if(fabs((vel_temp[kk + jj * pSPARC->n_atom] - vonose[kk + jj * pSPARC->n_atom])/vel_temp[kk + jj * pSPARC->n_atom]) > 1e-7)
md.c:608:		} while(kk < pSPARC->n_atom && jj < 3 && ready);
md.c:611:	pSPARC->xi_nose = xin_nose ;
md.c:613:	pSPARC->KE = 0.0;
md.c:614:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:615:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:616:			pSPARC->ion_vel[count * 3] = vel_temp[count * 3];
md.c:617:			pSPARC->ion_vel[count * 3 + 1] = vel_temp[count * 3 + 1];
md.c:618:			pSPARC->ion_vel[count * 3 + 2] = vel_temp[count * 3 + 2];
md.c:619:			pSPARC->KE += 0.5 * pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:641:	pSPARC->elecgs_Count++;
md.c:661:	for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:663:		pSPARC->ion_vel[count * 3] += 0.5 * pSPARC->MD_dt * pSPARC->ion_accel[count * 3];
md.c:664:		pSPARC->ion_vel[count * 3 + 1] += 0.5 * pSPARC->MD_dt * pSPARC->ion_accel[count * 3 + 1];
md.c:665:		pSPARC->ion_vel[count * 3 + 2] += 0.5 * pSPARC->MD_dt * pSPARC->ion_accel[count * 3 + 2];
md.c:667:		pSPARC->atom_pos[count * 3] += pSPARC->MD_dt * pSPARC->ion_vel[count * 3];
md.c:668:		pSPARC->atom_pos[count * 3 + 1] += pSPARC->MD_dt * pSPARC->ion_vel[count * 3 + 1];
md.c:669:		pSPARC->atom_pos[count * 3 + 2] += pSPARC->MD_dt * pSPARC->ion_vel[count * 3 + 2];
md.c:684:	pSPARC->KE = 0.0;
md.c:685:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:686:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:687:			pSPARC->ion_accel[count * 3] = pSPARC->forces[count * 3]/pSPARC->Mass[ityp];
md.c:688:			pSPARC->ion_accel[count * 3 + 1] = pSPARC->forces[count * 3 + 1]/pSPARC->Mass[ityp];
md.c:689:			pSPARC->ion_accel[count * 3 + 2] = pSPARC->forces[count * 3 + 2]/pSPARC->Mass[ityp];
md.c:690:			pSPARC->ion_vel[count * 3] += 0.5 * pSPARC->MD_dt * pSPARC->ion_accel[count * 3];
md.c:691:			pSPARC->ion_vel[count * 3 + 1] += 0.5 * pSPARC->MD_dt * pSPARC->ion_accel[count * 3 + 1];
md.c:692:			pSPARC->ion_vel[count * 3 + 2] += 0.5 * pSPARC->MD_dt * pSPARC->ion_accel[count * 3 + 2];
md.c:693:			pSPARC->KE += 0.5 * pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:717:	pSPARC->elecgs_Count++;
md.c:734:    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:735:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:736:		    v2gauss += (pSPARC->ion_vel[count * 3] * pSPARC->ion_vel[count * 3] +
md.c:737:		                pSPARC->ion_vel[count * 3 + 1] * pSPARC->ion_vel[count * 3 + 1] +
md.c:738:		                pSPARC->ion_vel[count * 3 + 2] * pSPARC->ion_vel[count * 3 + 2]) * pSPARC->Mass[ityp] ;
md.c:740:		    a += pSPARC->forces[count * 3] * pSPARC->ion_vel[count * 3] +
md.c:741:		         pSPARC->forces[count * 3 + 1] * pSPARC->ion_vel[count * 3 + 1] +
md.c:742:		         pSPARC->forces[count * 3 + 2] * pSPARC->ion_vel[count * 3 + 2] ;
md.c:744:		    b += pSPARC->forces[count * 3] * pSPARC->ion_accel[count * 3] +
md.c:745:		         pSPARC->forces[count * 3 + 1] * pSPARC->ion_accel[count * 3 + 1] +
md.c:746:		         pSPARC->forces[count * 3 + 2] * pSPARC->ion_accel[count * 3 + 2] ;
md.c:756:	double as = sqb * pSPARC->MD_dt/2.0;
md.c:766:    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:767:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:768:		    pSPARC->ion_vel[count * 3] = (pSPARC->ion_vel[count * 3] + pSPARC->ion_accel[count * 3] * s)/scdot;
md.c:769:		    pSPARC->ion_vel[count * 3 + 1] = (pSPARC->ion_vel[count * 3 + 1] + pSPARC->ion_accel[count * 3 + 1] * s)/scdot;
md.c:770:		    pSPARC->ion_vel[count * 3 + 2] = (pSPARC->ion_vel[count * 3 + 2] + pSPARC->ion_accel[count * 3 + 2] * s)/scdot;
md.c:772:		    pSPARC->atom_pos[count * 3] += pSPARC->ion_vel[count * 3] * pSPARC->MD_dt;
md.c:773:		    pSPARC->atom_pos[count * 3 + 1] += pSPARC->ion_vel[count * 3 + 1] * pSPARC->MD_dt;
md.c:774:		    pSPARC->atom_pos[count * 3 + 2] += pSPARC->ion_vel[count * 3 + 2] * pSPARC->MD_dt;
md.c:791:    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:792:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:793:		    pSPARC->ion_accel[count * 3] = pSPARC->forces[count * 3]/pSPARC->Mass[ityp];
md.c:794:			pSPARC->ion_accel[count * 3 + 1] = pSPARC->forces[count * 3 + 1]/pSPARC->Mass[ityp];
md.c:795:			pSPARC->ion_accel[count * 3 + 2] = pSPARC->forces[count * 3 + 2]/pSPARC->Mass[ityp];
md.c:797:		    v2gauss += (pSPARC->ion_vel[count * 3] * pSPARC->ion_vel[count * 3] +
md.c:798:		                pSPARC->ion_vel[count * 3 + 1] * pSPARC->ion_vel[count * 3 + 1] +
md.c:799:		                pSPARC->ion_vel[count * 3 + 2] * pSPARC->ion_vel[count * 3 + 2]) * pSPARC->Mass[ityp] ;
md.c:801:		    a += pSPARC->forces[count * 3] * pSPARC->ion_vel[count * 3] +
md.c:802:		         pSPARC->forces[count * 3 + 1] * pSPARC->ion_vel[count * 3 + 1] +
md.c:803:		         pSPARC->forces[count * 3 + 2] * pSPARC->ion_vel[count * 3 + 2] ;
md.c:805:		    b += pSPARC->forces[count * 3] * pSPARC->ion_accel[count * 3] +
md.c:806:		         pSPARC->forces[count * 3 + 1] * pSPARC->ion_accel[count * 3 + 1] +
md.c:807:		         pSPARC->forces[count * 3 + 2] * pSPARC->ion_accel[count * 3 + 2] ;
md.c:817:	double as = sqb * pSPARC->MD_dt/2.0;
md.c:827:    pSPARC->KE = 0.0;
md.c:828:    for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:829:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:830:		    pSPARC->ion_vel[count * 3] = (pSPARC->ion_vel[count * 3] + pSPARC->ion_accel[count * 3] * s)/scdot;
md.c:831:		    pSPARC->ion_vel[count * 3 + 1] = (pSPARC->ion_vel[count * 3 + 1] + pSPARC->ion_accel[count * 3 + 1] * s)/scdot;
md.c:832:		    pSPARC->ion_vel[count * 3 + 2] = (pSPARC->ion_vel[count * 3 + 2] + pSPARC->ion_accel[count * 3 + 2] * s)/scdot;
md.c:833:		    pSPARC->KE += 0.5 * pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:851:    MPI_Bcast(&pSPARC->pres, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
md.c:852:	MPI_Bcast(&pSPARC->pres_i, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
md.c:854:	if ((pSPARC->MDCount != 1) || (pSPARC->RestartFlag == 1)) {
md.c:876:	pSPARC->elecgs_Count++;
md.c:881:            printf("\nend NPT timestep %d\n", pSPARC->MDCount + 1);
md.c:892:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:893:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:894:			pSPARC->ion_accel[count * 3] = pSPARC->forces[count * 3]/pSPARC->Mass[ityp];
md.c:895:			pSPARC->ion_accel[count * 3 + 1] = pSPARC->forces[count * 3 + 1]/pSPARC->Mass[ityp];
md.c:896:			pSPARC->ion_accel[count * 3 + 2] = pSPARC->forces[count * 3 + 2]/pSPARC->Mass[ityp];
md.c:897:			pSPARC->ion_vel[count * 3] += 0.5 * pSPARC->MD_dt * pSPARC->ion_accel[count * 3];
md.c:898:			pSPARC->ion_vel[count * 3 + 1] += 0.5 * pSPARC->MD_dt * pSPARC->ion_accel[count * 3 + 1];
md.c:899:			pSPARC->ion_vel[count * 3 + 2] += 0.5 * pSPARC->MD_dt * pSPARC->ion_accel[count * 3 + 2];
md.c:917:    pSPARC->KE = 0.0;
md.c:918:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:919:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:920:			pSPARC->KE += 0.5 * pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:925:	pSPARC->volumeCell = pSPARC->Jacbdet*pSPARC->range_x * pSPARC->range_y * pSPARC->range_z;
md.c:927:	ktemp = pSPARC->kB * pSPARC->thermos_T;
md.c:928:    gn1kt = (double)(pSPARC->dof + 1) * ktemp;
md.c:930:    modnf = 3.0/(double)pSPARC->dof;
md.c:931:    odnf = 1.0 + 3.0/(double)pSPARC->dof;
md.c:934:	pSPARC->glogs[0] = ((2.0*pSPARC->KE + pSPARC->NPT_NHbmass * pow(pSPARC->vlogv, 2.0) - gn1kt) - pSPARC->vlogs[1]*pSPARC->vlogs[0]*pSPARC->NPT_NHqmass[0]) / pSPARC->NPT_NHqmass[0];
md.c:935:	glogv = (3*pSPARC->volumeCell*((pSPARC->pres - pSPARC->pres_i) - pSPARC->prtarget) + modnf*2*pSPARC->KE - pSPARC->vlogs[0]*pSPARC->vlogv*pSPARC->NPT_NHbmass) / pSPARC->NPT_NHbmass;
md.c:936:    // printf("\nrank %d glogv%12.9f = (odnf%12.6f*2*KE%12.9f+3*(pres%12.9f-prtarget%12.6f)*ucvol%12.9f)/bmass%12.6f\n", rank, glogv,odnf,pSPARC->KE,(pSPARC->pres - pSPARC->pres_i),pSPARC->prtarget,ucvol,pSPARC->NPT_NHbmass);
md.c:940:    double nowvlogv = pSPARC->vlogv;
md.c:941:	for (i = 0; i < pSPARC->NPT_NHnnos; i++){
md.c:942:        pSPARC->vlogs[i] += pSPARC->MD_dt / 4.0 * pSPARC->glogs[i];
md.c:944:	nowvlogv += pSPARC->MD_dt / 4.0 * glogv;
md.c:946:    alocal = exp(-pSPARC->MD_dt / 2.0 * (pSPARC->vlogs[0] + odnf * nowvlogv));
md.c:948:    pSPARC->KE = pSPARC->KE * pow(alocal, 2.0);
md.c:949:	glogv = (3*pSPARC->volumeCell*((pSPARC->pres - pSPARC->pres_i) - pSPARC->prtarget) + modnf*2*pSPARC->KE - pSPARC->vlogs[0]*nowvlogv*pSPARC->NPT_NHbmass) / pSPARC->NPT_NHbmass;
md.c:950:    // printf("\nrank %d glogv%12.9f = (odnf%12.6f*2*KE%12.9f+3*(pres%12.9f-prtarget%12.6f)*ucvol%12.9f)/bmass%12.6f\n", rank, glogv,odnf,pSPARC->KE,(pSPARC->pres - pSPARC->pres_i),pSPARC->prtarget,ucvol,pSPARC->NPT_NHbmass);
md.c:952:    for (i = 0; i < pSPARC->NPT_NHnnos; i++){
md.c:953:    	pSPARC->xlogs[i] += pSPARC->vlogs[i] * pSPARC->MD_dt / 2;
md.c:956:	nowvlogv += pSPARC->MD_dt / 4.0 * glogv;
md.c:958:	pSPARC->glogs[0] = ((2.0*pSPARC->KE + pSPARC->NPT_NHbmass * pow(pSPARC->vlogv, 2.0) - gn1kt) - pSPARC->vlogs[1]*pSPARC->vlogs[0]*pSPARC->NPT_NHqmass[0]) / pSPARC->NPT_NHqmass[0];
md.c:959:	for (i = 0; i < pSPARC->NPT_NHnnos; i++) {
md.c:960:    	pSPARC->vlogs[i] += pSPARC->MD_dt / 4.0 * pSPARC->glogs[i];
md.c:962:    for (i = 1; i < pSPARC->NPT_NHnnos - 1; i++) {
md.c:963:		pSPARC->glogs[i] = (pSPARC->NPT_NHqmass[i - 1] * pow(pSPARC->vlogs[i - 1], 2.0) - ktemp - pSPARC->vlogs[i + 1]*pSPARC->vlogs[i]*pSPARC->NPT_NHqmass[i]) / pSPARC->NPT_NHqmass[i];
md.c:965:	pSPARC->glogs[pSPARC->NPT_NHnnos - 1] = (pSPARC->NPT_NHqmass[pSPARC->NPT_NHnnos - 2]*pow(pSPARC->vlogs[pSPARC->NPT_NHnnos - 2], 2.0) - ktemp) / pSPARC->NPT_NHqmass[pSPARC->NPT_NHnnos - 1];
md.c:968:    for (atm = 0; atm < pSPARC->n_atom; atm++){
md.c:969:		pSPARC->ion_vel[count * 3] *= scale;
md.c:970:		pSPARC->ion_vel[count * 3 + 1] *= scale;
md.c:971:		pSPARC->ion_vel[count * 3 + 2] *= scale;
md.c:975:    pSPARC->vlogv = nowvlogv;
md.c:979:        for (i = 0; i < pSPARC->NPT_NHnnos; i++){
md.c:980:            printf("\nvlogs[%d] is  %12.9f; glogs[%d] is  %12.9f \n", i, pSPARC->vlogs[i], i, pSPARC->glogs[i]);
md.c:995:	if (pSPARC->NPTisotropicFlag == 1) {
md.c:998:		mttk_aloc = exp(pSPARC->MD_dt / 2.0 * pSPARC->vlogv);
md.c:999:		mttk_aloc2 = pow(pSPARC->vlogv * pSPARC->MD_dt / 2.0, 2.0);
md.c:1002:		mttk_bloc = mttk_aloc * polysh * pSPARC->MD_dt;
md.c:1004:		for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:1005:			pSPARC->atom_pos[count * 3] = pSPARC->atom_pos[count * 3] * pow(mttk_aloc, 2.0) + pSPARC->ion_vel[count * 3] * mttk_bloc;
md.c:1006:			pSPARC->atom_pos[count * 3 + 1] = pSPARC->atom_pos[count * 3 + 1] * pow(mttk_aloc, 2.0) + pSPARC->ion_vel[count * 3 + 1] * mttk_bloc;
md.c:1007:			pSPARC->atom_pos[count * 3 + 2] = pSPARC->atom_pos[count * 3 + 2] * pow(mttk_aloc, 2.0) + pSPARC->ion_vel[count * 3 + 2] * mttk_bloc;
md.c:1011:    	pSPARC->scale = exp(pSPARC->MD_dt * pSPARC->vlogv);
md.c:1012:		pSPARC->range_x *= pSPARC->scale;
md.c:1013:    	pSPARC->range_y *= pSPARC->scale;
md.c:1014:    	pSPARC->range_z *= pSPARC->scale;
md.c:1017:		int dim = pSPARC->NPTscaleVecs[0] + pSPARC->NPTscaleVecs[1] + pSPARC->NPTscaleVecs[2];
md.c:1022:		mttk_aloc = exp(pSPARC->MD_dt / 2.0 * pSPARC->vlogv * rescale);
md.c:1023:		mttk_aloc2 = pow(pSPARC->vlogv * pSPARC->MD_dt / 2.0 * rescale, 2.0);
md.c:1026:		mttk_bloc = mttk_aloc * polysh * pSPARC->MD_dt;
md.c:1028:		double *LatUVec = pSPARC->LatUVec; double *gradT = pSPARC->gradT;
md.c:1032:		for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:1033:			carCoord[0] = pSPARC->atom_pos[count * 3]; carCoord[1] = pSPARC->atom_pos[count * 3 + 1]; carCoord[2] = pSPARC->atom_pos[count * 3 + 2];
md.c:1034:			carVelo[0] = pSPARC->ion_vel[count * 3]; carVelo[1] = pSPARC->ion_vel[count * 3 + 1]; carVelo[2] = pSPARC->ion_vel[count * 3 + 2];
md.c:1039:			if (pSPARC->NPTscaleVecs[0] == 1) nonCarCoord[0] = nonCarCoord[0] * pow(mttk_aloc, 2.0) + nonCarVelo[0] * mttk_bloc;
md.c:1040:			else nonCarCoord[0] = nonCarCoord[0] + nonCarVelo[0]*pSPARC->MD_dt;
md.c:1042:			if (pSPARC->NPTscaleVecs[1] == 1) nonCarCoord[1] = nonCarCoord[1] * pow(mttk_aloc, 2.0) + nonCarVelo[1] * mttk_bloc;
md.c:1043:			else nonCarCoord[1] = nonCarCoord[1] + nonCarVelo[1]*pSPARC->MD_dt;
md.c:1045:			if (pSPARC->NPTscaleVecs[2] == 1) nonCarCoord[2] = nonCarCoord[2] * pow(mttk_aloc, 2.0) + nonCarVelo[2] * mttk_bloc;
md.c:1046:			else nonCarCoord[2] = nonCarCoord[2] + nonCarVelo[2]*pSPARC->MD_dt;
md.c:1050:			pSPARC->atom_pos[count * 3] = carCoord[0]; pSPARC->atom_pos[count * 3 + 1] = carCoord[1]; pSPARC->atom_pos[count * 3 + 2] = carCoord[2];
md.c:1054:    	pSPARC->scale = exp(pSPARC->MD_dt * pSPARC->vlogv * rescale);
md.c:1055:		if (pSPARC->NPTscaleVecs[0] == 1) pSPARC->range_x *= pSPARC->scale;
md.c:1056:    	if (pSPARC->NPTscaleVecs[1] == 1) pSPARC->range_y *= pSPARC->scale;
md.c:1057:    	if (pSPARC->NPTscaleVecs[2] == 1) pSPARC->range_z *= pSPARC->scale;
md.c:1062:	        printf("scale of cell is %12.9f\n", pSPARC->scale);
md.c:1063:	        printf("pSPARC->range is (%12.9f, %12.9f, %12.9f)\n", pSPARC->range_x,pSPARC->range_y,pSPARC->range_z);
md.c:1075:    FILE *output_fp = fopen(pSPARC->OutFilename,"a");
md.c:1077:        printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
md.c:1083:	if (pSPARC->Flag_latvec_scale == 0)
md.c:1084:		fprintf(output_fp,"CELL: %.15g %.15g %.15g \n",pSPARC->range_x,pSPARC->range_y,pSPARC->range_z);
md.c:1086:		fprintf(output_fp,"LATVEC_SCALE: %.15g %.15g %.15g \n",pSPARC->range_x/pSPARC->initialLatVecLength[0],pSPARC->range_y/pSPARC->initialLatVecLength[1],pSPARC->range_z/pSPARC->initialLatVecLength[2]);
md.c:1087:    fprintf(output_fp,"CHEB_DEGREE: %d\n",pSPARC->ChebDegree);
md.c:1091:    if ( (fabs(pSPARC->delta_x-pSPARC->delta_y) <=1e-12) && (fabs(pSPARC->delta_x-pSPARC->delta_z) <=1e-12)
md.c:1092:        && (fabs(pSPARC->delta_y-pSPARC->delta_z) <=1e-12) ) {
md.c:1093:        fprintf(output_fp,"Mesh spacing                       :  %.6g (Bohr)\n",pSPARC->delta_x);
md.c:1095:        fprintf(output_fp,"Mesh spacing in x-direction        :  %.6g (Bohr)\n",pSPARC->delta_x);
md.c:1096:        fprintf(output_fp,"Mesh spacing in y-direction        :  %.6g (Bohr)\n",pSPARC->delta_y);
md.c:1097:        fprintf(output_fp,"Mesh spacing in z direction        :  %.6g (Bohr)\n",pSPARC->delta_z);
md.c:1118:    double scal = pSPARC->scale; // the ratio between length
md.c:1125:	// if (strcmpi(pSPARC->MDMeth,"NPT_NH") == 0) { // Maybe this condition can be removed
md.c:1126:		// if (pSPARC->NPTscaleVecs[0] == 1) pSPARC->delta_x *= scal; //if (pSPARC->cellrelax_dims[0] == 1) Dirichlet boundary condition
md.c:1127:    	// if (pSPARC->NPTscaleVecs[1] == 1) pSPARC->delta_y *= scal; //if (pSPARC->cellrelax_dims[1] == 1) 
md.c:1128:    	// if (pSPARC->NPTscaleVecs[2] == 1) pSPARC->delta_z *= scal; //if (pSPARC->cellrelax_dims[2] == 1) 
md.c:1129:		pSPARC->delta_x = pSPARC->range_x/(pSPARC->numIntervals_x);
md.c:1130:		pSPARC->delta_y = pSPARC->range_y/(pSPARC->numIntervals_y);
md.c:1131:		pSPARC->delta_z = pSPARC->range_z/(pSPARC->numIntervals_z);
md.c:1134:	// 	pSPARC->delta_x *= scal; //if (pSPARC->cellrelax_dims[0] == 1) Dirichlet boundary condition
md.c:1135:    // 	pSPARC->delta_y *= scal; //if (pSPARC->cellrelax_dims[1] == 1) 
md.c:1136:    // 	pSPARC->delta_z *= scal; //if (pSPARC->cellrelax_dims[2] == 1) 
md.c:1140:    pSPARC->dV = pSPARC->delta_x * pSPARC->delta_y * pSPARC->delta_z * pSPARC->Jacbdet;
md.c:1145:        printf("CELL  : %12.6f\t%12.6f\t%12.6f\n",pSPARC->range_x,pSPARC->range_y,pSPARC->range_z);
md.c:1147:        for (i = 0; i < 3 * pSPARC->n_atom; i++) {
md.c:1148:            printf("%12.6f\t",pSPARC->atom_pos[i]);
md.c:1155:    int FDn = pSPARC->order / 2;
md.c:1159:    dx_inv = 1.0 / pSPARC->delta_x;
md.c:1160:    dy_inv = 1.0 / pSPARC->delta_y;
md.c:1161:    dz_inv = 1.0 / pSPARC->delta_z;
md.c:1163:        pSPARC->D1_stencil_coeffs_x[p] = pSPARC->FDweights_D1[p] * dx_inv;
md.c:1164:        pSPARC->D1_stencil_coeffs_y[p] = pSPARC->FDweights_D1[p] * dy_inv;
md.c:1165:        pSPARC->D1_stencil_coeffs_z[p] = pSPARC->FDweights_D1[p] * dz_inv;
md.c:1170:    dx2_inv = 1.0 / (pSPARC->delta_x * pSPARC->delta_x);
md.c:1171:    dy2_inv = 1.0 / (pSPARC->delta_y * pSPARC->delta_y);
md.c:1172:    dz2_inv = 1.0 / (pSPARC->delta_z * pSPARC->delta_z);
md.c:1175:    if (pSPARC->cell_typ == 0) {
md.c:1177:            pSPARC->D2_stencil_coeffs_x[p] = pSPARC->FDweights_D2[p] * dx2_inv;
md.c:1178:            pSPARC->D2_stencil_coeffs_y[p] = pSPARC->FDweights_D2[p] * dy2_inv;
md.c:1179:            pSPARC->D2_stencil_coeffs_z[p] = pSPARC->FDweights_D2[p] * dz2_inv;
md.c:1181:    } else if (pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
md.c:1183:            pSPARC->D2_stencil_coeffs_x[p] = pSPARC->lapcT[0] * pSPARC->FDweights_D2[p] * dx2_inv;
md.c:1184:            pSPARC->D2_stencil_coeffs_y[p] = pSPARC->lapcT[4] * pSPARC->FDweights_D2[p] * dy2_inv;
md.c:1185:            pSPARC->D2_stencil_coeffs_z[p] = pSPARC->lapcT[8] * pSPARC->FDweights_D2[p] * dz2_inv;
md.c:1186:            pSPARC->D2_stencil_coeffs_xy[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dx_inv; // 2*T_12 d/dx(df/dy)
md.c:1187:            pSPARC->D2_stencil_coeffs_xz[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dx_inv; // 2*T_13 d/dx(df/dz)
md.c:1188:            pSPARC->D2_stencil_coeffs_yz[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dy_inv; // 2*T_23 d/dy(df/dz)
md.c:1189:            pSPARC->D1_stencil_coeffs_xy[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dy_inv; // d/dx(2*T_12 df/dy) used in d/dx(2*T_12 df/dy + 2*T_13 df/dz)
md.c:1190:            pSPARC->D1_stencil_coeffs_yx[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dx_inv; // d/dy(2*T_12 df/dx) used in d/dy(2*T_12 df/dx + 2*T_23 df/dz)
md.c:1191:            pSPARC->D1_stencil_coeffs_xz[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dz_inv; // d/dx(2*T_13 df/dz) used in d/dx(2*T_12 df/dy + 2*T_13 df/dz)
md.c:1192:            pSPARC->D1_stencil_coeffs_zx[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dx_inv; // d/dz(2*T_13 df/dx) used in d/dz(2*T_13 df/dz + 2*T_23 df/dy)
md.c:1193:            pSPARC->D1_stencil_coeffs_yz[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dz_inv; // d/dy(2*T_23 df/dz) used in d/dy(2*T_12 df/dx + 2*T_23 df/dz)
md.c:1194:            pSPARC->D1_stencil_coeffs_zy[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dy_inv; // d/dz(2*T_23 df/dy) used in d/dz(2*T_12 df/dx + 2*T_23 df/dy)
md.c:1199:    if(pSPARC->cell_typ == 0) {
md.c:1203:        pSPARC->MaxEigVal_mhalfLap = pSPARC->D2_stencil_coeffs_x[0]
md.c:1204:                                   + pSPARC->D2_stencil_coeffs_y[0]
md.c:1205:                                   + pSPARC->D2_stencil_coeffs_z[0];
md.c:1207:        scal_x = (pSPARC->Nx - pSPARC->Nx % 2) / (double) pSPARC->Nx;
md.c:1208:        scal_y = (pSPARC->Ny - pSPARC->Ny % 2) / (double) pSPARC->Ny;
md.c:1209:        scal_z = (pSPARC->Nz - pSPARC->Nz % 2) / (double) pSPARC->Nz;
md.c:1211:            pSPARC->MaxEigVal_mhalfLap += 2.0 * (pSPARC->D2_stencil_coeffs_x[p] * cos(M_PI*p*scal_x)
md.c:1212:                                               + pSPARC->D2_stencil_coeffs_y[p] * cos(M_PI*p*scal_y)
md.c:1213:                                               + pSPARC->D2_stencil_coeffs_z[p] * cos(M_PI*p*scal_z));
md.c:1215:        pSPARC->MaxEigVal_mhalfLap *= -0.5;
md.c:1219:            pSPARC->MaxEigVal_mhalfLap, (t2-t1)*1e3);
md.c:1224:    if (fabs(pSPARC->delta_x - pSPARC->delta_y) < 1E-12 &&
md.c:1225:        fabs(pSPARC->delta_y - pSPARC->delta_z) < 1E-12) {
md.c:1226:        h_eff = pSPARC->delta_x;
md.c:1233:    if (pSPARC->ChebDegree < 0) {
md.c:1234:        pSPARC->ChebDegree = Mesh2ChebDegree(h_eff);
md.c:1239:        if (!rank) printf("h_eff = %.2f, npl = %d\n", h_eff,pSPARC->ChebDegree);
md.c:1243:        if (!rank) printf("Chebyshev polynomial degree (provided by user): npl = %d\n",pSPARC->ChebDegree);
md.c:1248:    if (pSPARC->TOL_PRECOND < 0.0) { // kerker tol not provided by user
md.c:1249:        pSPARC->TOL_PRECOND = (h_eff * h_eff) * 1e-3;
md.c:1257:    if (pSPARC->Nkpts >= 1 && pSPARC->kptcomm_index != -1) {
md.c:1292:	hamiltonian = pSPARC->KE + pSPARC->Etot;
md.c:1293:	kineticBaro = pow(pSPARC->vlogv, 2.0) * pSPARC->NPT_NHbmass * 0.5;
md.c:1295:	for (i = 0; i < pSPARC->NPT_NHnnos; i++){
md.c:1296:        kineticTher += pow(pSPARC->vlogs[i], 2.0) * pSPARC->NPT_NHqmass[i] * 0.5;
md.c:1299:	pSPARC->volumeCell = pSPARC->Jacbdet*pSPARC->range_x * pSPARC->range_y * pSPARC->range_z;
md.c:1300:	ktemp = pSPARC->kB * pSPARC->thermos_T;
md.c:1301:	potentialBaro = pSPARC->prtarget * pSPARC->volumeCell;
md.c:1302:	potentialTher = (double)pSPARC->dof * ktemp * pSPARC->xlogs[0];
md.c:1303:    for (i = 1; i < pSPARC->NPT_NHnnos; i++){
md.c:1304:    	potentialTher += ktemp * pSPARC->xlogs[i];
md.c:1309:    	printf("ENERGY of time step %d\n", pSPARC->MDCount + 1);
md.c:1310:	    printf("kinetic energy (Ha)             : %12.9f\n", pSPARC->KE);
md.c:1311:	    printf("potential energy (Ha)           : %12.9f\n", pSPARC->Etot);
md.c:1331:    MPI_Bcast(&pSPARC->pres, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
md.c:1332:	MPI_Bcast(&pSPARC->pres_i, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
md.c:1350:	pSPARC->elecgs_Count++;
md.c:1352:		if (!rank) printf("\nend NPT_NP timestep %d\n", pSPARC->MDCount + 1);
md.c:1364:	pSPARC->Pm_NPT_NP[0] = pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0) / pSPARC->S_NPT_NP * 2.0 *pSPARC->range_x*pSPARC->range_x_velo / pow(pSPARC->G_NPT_NP[0], 2.0);
md.c:1365:	pSPARC->Pm_NPT_NP[1] = pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0) / pSPARC->S_NPT_NP * 2.0 *pSPARC->range_y*pSPARC->range_y_velo / pow(pSPARC->G_NPT_NP[1], 2.0);
md.c:1366:	pSPARC->Pm_NPT_NP[2] = pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0) / pSPARC->S_NPT_NP * 2.0 *pSPARC->range_z*pSPARC->range_z_velo / pow(pSPARC->G_NPT_NP[2], 2.0);
md.c:1368:	pSPARC->KE = 0.0;
md.c:1371:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:1372:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:1373:			pSPARC->KE += 0.5 * pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:1378:	pSPARC->Kther = 0.5 * pSPARC->NPT_NP_qmass * pow(pSPARC->Sv_NPT_NP, 2.0);
md.c:1379:	ktemp = pSPARC->kB * pSPARC->thermos_T;
md.c:1380:	pSPARC->Uther = (double)pSPARC->dof * log(pSPARC->S_NPT_NP) * ktemp;
md.c:1384:		a[i] = 1.0 / (pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0)) * pSPARC->Pm_NPT_NP[i] * pSPARC->G_NPT_NP[i];
md.c:1386:	pSPARC->Kbaro = 0.5 * pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0) * (a[0]*a[0] + a[1]*a[1] + a[2]*a[2]);
md.c:1387:	pSPARC->Ubaro = pSPARC->prtarget * pSPARC->volumeCell;
md.c:1389:	pSPARC->Hamiltonian_NPT_NP = pSPARC->Etot;
md.c:1390:	pSPARC->Hamiltonian_NPT_NP += pSPARC->KE + pSPARC->Kther + pSPARC->Uther + pSPARC->Kbaro + pSPARC->Ubaro;
md.c:1391:	if ((pSPARC->MDCount == 1)  && (pSPARC->RestartFlag != 1)) {
md.c:1392:		pSPARC->init_Hamil_NPT_NP = pSPARC->Hamiltonian_NPT_NP;
md.c:1398:    	printf("ENERGY of time step %d\n", pSPARC->MDCount + 1);
md.c:1399:	    printf("kinetic energy (Ha)             : %12.9f\n", pSPARC->KE);
md.c:1400:	    printf("potential energy (Ha)           : %12.9f\n", pSPARC->Etot);
md.c:1401:	    printf("barostat kinetic energy (Ha)    : %12.9f\n", pSPARC->Kbaro);
md.c:1402:	    printf("thermostat kinetic energy (Ha)  : %12.9f\n", pSPARC->Kther);
md.c:1403:	    printf("barostat potential energy (Ha)  : %12.9f\n", pSPARC->Ubaro);
md.c:1404:	    printf("thermostat potential energy (Ha): %12.9f\n", pSPARC->Uther);
md.c:1405:	    printf("Hamiltonian (Ha)                : %12.9f\n", pSPARC->Hamiltonian_NPT_NP);
md.c:1424:	ktemp = pSPARC->kB * pSPARC->thermos_T;
md.c:1425:	Sa = (pSPARC->KE - pSPARC->Etot - pSPARC->dof*ktemp*(log(pSPARC->S_NPT_NP) + 1) - pSPARC->Kbaro - pSPARC->Ubaro - pSPARC->Kther + pSPARC->init_Hamil_NPT_NP)/pSPARC->NPT_NP_qmass;
md.c:1426:	pSPARC->Sv_NPT_NP += Sa * pSPARC->MD_dt / 2.0;
md.c:1430:		printf("Sv_NPT_NP in the 1st half step is %12.9f\n", pSPARC->Sv_NPT_NP);
md.c:1435:		Ga1[i] = -(pSPARC->pres - pSPARC->pres_i) * pSPARC->volumeCell / 2.0 / pSPARC->G_NPT_NP[i];
md.c:1436:		B[i] = 1.0 / (pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0)) * pow(pSPARC->Pm_NPT_NP[i],2.0) * pSPARC->G_NPT_NP[i];
md.c:1437:		Ga3[i] = (pSPARC->prtarget * pSPARC->volumeCell / 2.0 - pSPARC->Kbaro) / pSPARC->G_NPT_NP[i];
md.c:1439:		pSPARC->Pm_NPT_NP[i] -= pSPARC->MD_dt * pSPARC->S_NPT_NP / 2.0 * PmA[i];
md.c:1442:			// printf("pSPARC->pres is %12.9f, pSPARC->pres_i is %12.9f, pSPARC->volumeCell is %12.9f, pSPARC->G_NPT_NP[%d] is %12.9f\n", pSPARC->pres, pSPARC->pres_i, pSPARC->volumeCell, i, pSPARC->G_NPT_NP[i]);
md.c:1444:			printf("pSPARC->Pm_NPT_NP[%d] in 1st half step is %12.9f\n", i, pSPARC->Pm_NPT_NP[i]);
md.c:1451:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:1452:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:1453:			pSPARC->ion_accel[count * 3] = pSPARC->forces[count * 3] / pSPARC->Mass[ityp];
md.c:1454:			pSPARC->ion_accel[count * 3 + 1] = pSPARC->forces[count * 3 + 1] / pSPARC->Mass[ityp];
md.c:1455:			pSPARC->ion_accel[count * 3 + 2] = pSPARC->forces[count * 3 + 2] / pSPARC->Mass[ityp];
md.c:1456:			pSPARC->ion_vel[count * 3] = pSPARC->ion_vel[count * 3] * pSPARC->S_NPT_NP + pSPARC->MD_dt * pSPARC->S_NPT_NP * pSPARC->ion_accel[count * 3];
md.c:1457:			pSPARC->ion_vel[count * 3 + 1] = pSPARC->ion_vel[count * 3 + 1] * pSPARC->S_NPT_NP + pSPARC->MD_dt * pSPARC->S_NPT_NP * pSPARC->ion_accel[count * 3 + 1];
md.c:1458:			pSPARC->ion_vel[count * 3 + 2] = pSPARC->ion_vel[count * 3 + 2] * pSPARC->S_NPT_NP + pSPARC->MD_dt * pSPARC->S_NPT_NP * pSPARC->ion_accel[count * 3 + 2]; 
md.c:1475:		PmTmp[i] = pSPARC->Pm_NPT_NP[i];
md.c:1486:			G1[i] = 1 / (pSPARC->NPT_NP_bmass * pow(pSPARC->volumeCell, 2.0)) * PmTmp[i] * pSPARC->G_NPT_NP[i];
md.c:1487:			KbaroTmp += (pSPARC->NPT_NP_bmass * pow(pSPARC->volumeCell, 2.0)) / 2 * pow(G1[i],2.0);
md.c:1490:			Gatmp1[i] = -(pSPARC->pres - pSPARC->pres_i) * pSPARC->volumeCell / 2.0 / pSPARC->G_NPT_NP[i];
md.c:1492:			Gatmp3[i] = (pSPARC->prtarget * pSPARC->volumeCell / 2.0 - KbaroTmp) / pSPARC->G_NPT_NP[i];
md.c:1494:			PmNew[i] = pSPARC->Pm_NPT_NP[i] - pSPARC->MD_dt / 2.0 * pSPARC->S_NPT_NP * PmAtmp[i];
md.c:1503:		if (timeIter > pSPARC->maxTimeIter){
md.c:1506:				printf("Reminder: The barostat momentum Pm_NPT_NP does not converge in %d timesteps.\n", pSPARC->maxTimeIter);
md.c:1510:		pSPARC->Pm_NPT_NP[i] = PmTmp[i];
md.c:1513:			printf("pSPARC->Pm_NPT_NP[%d] in 2nd half step is %12.9f\n", i, pSPARC->Pm_NPT_NP[i]);
md.c:1518:	pSPARC->KE = 0.0;
md.c:1521:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:1522:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:1523:			pSPARC->KE += 0.5 * pSPARC->Mass[ityp] * (pow(pSPARC->ion_vel[count * 3], 2.0) + pow(pSPARC->ion_vel[count * 3 + 1], 2.0) + pow(pSPARC->ion_vel[count * 3 + 2], 2.0));
md.c:1527:	pSPARC->KE /= pow(pSPARC->S_NPT_NP, 2.0); // from momentum/mass to true velocity
md.c:1528:	pSPARC->Kbaro = 0.0;
md.c:1530:		G1[i] = 1.0 / (pSPARC->NPT_NP_bmass * pow(pSPARC->volumeCell, 2.0)) * PmTmp[i] * pSPARC->G_NPT_NP[i];
md.c:1531:		pSPARC->Kbaro += (pSPARC->NPT_NP_bmass * pow(pSPARC->volumeCell, 2.0)) / 2.0 * pow(G1[i],2.0);
md.c:1534:	double ktemp = pSPARC->kB * pSPARC->thermos_T;
md.c:1535:	factor = pSPARC->MD_dt / 2.0 * (pSPARC->dof*ktemp*(log(pSPARC->S_NPT_NP) + 1) - pSPARC->KE + pSPARC->Etot + pSPARC->Kbaro + pSPARC->Ubaro - pSPARC->init_Hamil_NPT_NP) - pSPARC->NPT_NP_qmass*pSPARC->Sv_NPT_NP;
md.c:1540:	if ((1.0 - factor*pSPARC->MD_dt/pSPARC->NPT_NP_qmass) < 0.0){
md.c:1545:	pSPARC->Sv_NPT_NP = -2.0 * factor / (pSPARC->NPT_NP_qmass * (1.0 + sqrt(1.0 - factor * pSPARC->MD_dt / pSPARC->NPT_NP_qmass)));
md.c:1548:		printf("Sv_NPT_NP in the 2nd half step is %12.9f\n", pSPARC->Sv_NPT_NP);
md.c:1561:	double Stemp = pSPARC->S_NPT_NP;
md.c:1566:		Snew = pSPARC->S_NPT_NP + pSPARC->MD_dt / 2.0 * (pSPARC->S_NPT_NP + Stemp) * pSPARC->Sv_NPT_NP;
md.c:1571:		if (timeIter > pSPARC->maxTimeIter) {
md.c:1574:				printf("Reminder: The value of thermostat variable S_NPT_NP does not converge in %d iterations.\n", pSPARC->maxTimeIter);
md.c:1585:		Gtmp[i] = pSPARC->G_NPT_NP[i];
md.c:1586:		GpigOld[i] = pow(pSPARC->G_NPT_NP[i], 2.0) * pSPARC->Pm_NPT_NP[i];
md.c:1592:			Gpig[i] = pow(Gtmp[i], 2.0) * pSPARC->Pm_NPT_NP[i];
md.c:1593:			Gnew[i] = pSPARC->G_NPT_NP[i] + pSPARC->MD_dt / 2.0 * (pSPARC->S_NPT_NP/(pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0))*GpigOld[i] + Stemp/(pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0))*Gpig[i]);
md.c:1602:		if (timeIter > pSPARC->maxTimeIter) {
md.c:1605:				printf("Reminder: The barostat variables G_NPT_NP do not converge in %d iterations.\n", pSPARC->maxTimeIter);
md.c:1610:		pSPARC->G_NPT_NP[i] = Gtmp[i];
md.c:1611:		G3[i] = pow(Gtmp[i], 2.0) * pSPARC->Pm_NPT_NP[i];
md.c:1615:		printf("pSPARC->G_NPT_NP[0] is %12.9f\n", pSPARC->G_NPT_NP[0]);
md.c:1616:		printf("pSPARC->G_NPT_NP[1] is %12.9f\n", pSPARC->G_NPT_NP[1]);
md.c:1617:		printf("pSPARC->G_NPT_NP[2] is %12.9f\n", pSPARC->G_NPT_NP[2]);
md.c:1621:	pSPARC->scale = sqrt(pSPARC->G_NPT_NP[0]) / pSPARC->range_x; // isotropic expansion
md.c:1624:		printf("pSPARC->scale is %12.9f.\n", pSPARC->scale);
md.c:1626:	pSPARC->range_x = sqrt(pSPARC->G_NPT_NP[0]);
md.c:1627:	pSPARC->range_y = sqrt(pSPARC->G_NPT_NP[1]);
md.c:1628:	pSPARC->range_z = sqrt(pSPARC->G_NPT_NP[2]);
md.c:1629:	pSPARC->volumeCell = pSPARC->Jacbdet*pSPARC->range_x*pSPARC->range_y*pSPARC->range_z;
md.c:1630:	pSPARC->range_x_velo = G3[0] * Stemp / (2.0*pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0)) / pSPARC->range_x;
md.c:1631:	pSPARC->range_y_velo = G3[1] * Stemp / (2.0*pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0)) / pSPARC->range_y;
md.c:1632:	pSPARC->range_z_velo = G3[2] * Stemp / (2.0*pSPARC->NPT_NP_bmass*pow(pSPARC->volumeCell, 2.0)) / pSPARC->range_z;
md.c:1636:	for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:1637:		pSPARC->atom_pos[count * 3] = (pSPARC->atom_pos[count * 3]) * pSPARC->scale + pSPARC->MD_dt/2.0 * (pSPARC->ion_vel[count * 3]/pSPARC->S_NPT_NP + pSPARC->ion_vel[count * 3]/Stemp); //
md.c:1638:		pSPARC->atom_pos[count * 3 + 1] = (pSPARC->atom_pos[count * 3 + 1]) * pSPARC->scale + pSPARC->MD_dt/2.0 * (pSPARC->ion_vel[count * 3 + 1]/pSPARC->S_NPT_NP + pSPARC->ion_vel[count * 3 + 1]/Stemp); //
md.c:1639:		pSPARC->atom_pos[count * 3 + 2] = (pSPARC->atom_pos[count * 3 + 2]) * pSPARC->scale + pSPARC->MD_dt/2.0 * (pSPARC->ion_vel[count * 3 + 2]/pSPARC->S_NPT_NP + pSPARC->ion_vel[count * 3 + 2]/Stemp); //
md.c:1640:		pSPARC->ion_vel[count * 3] /= Stemp;
md.c:1641:		pSPARC->ion_vel[count * 3 + 1] /= Stemp;
md.c:1642:		pSPARC->ion_vel[count * 3 + 2] /= Stemp; 
md.c:1645:	pSPARC->S_NPT_NP = Stemp;
md.c:1674:	rc = (double *)malloc(pSPARC->Ntypes * sizeof(double) );
md.c:1675:	for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
md.c:1677:        for(i = 0; i <= pSPARC->psd[ityp].lmax; i++)
md.c:1678:        	rc[ityp] = max(rc[ityp], pSPARC->psd[ityp].rc[i]);
md.c:1681:	for(atm = 0; atm < pSPARC->n_atom - 1; atm++){
md.c:1683:		for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:1684:			count += pSPARC->nAtomv[ityp];
md.c:1691:		for(atm2 = atm + 1; atm2 < pSPARC->n_atom; atm2++){
md.c:1693:			for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:1694:				count += pSPARC->nAtomv[ityp];
md.c:1701:			temp = fabs(sqrt(pow(pSPARC->atom_pos[3 * atm] - pSPARC->atom_pos[3 * atm2],2.0) + pow(pSPARC->atom_pos[3 * atm + 1] - pSPARC->atom_pos[3 * atm2 + 1],2.0) + pow(pSPARC->atom_pos[3 * atm + 2] - pSPARC->atom_pos[3 * atm2 + 2],2.0) ));
md.c:1705:				atm2 = pSPARC->n_atom;
md.c:1706:				atm = pSPARC->n_atom - 1;
md.c:1713:    if(pSPARC->cell_typ != 0){
md.c:1714:        for(atm = 0; atm < pSPARC->n_atom; atm++)
md.c:1715:	        Cart2nonCart_coord(pSPARC, &pSPARC->atom_pos[3*atm], &pSPARC->atom_pos[3*atm+1], &pSPARC->atom_pos[3*atm+2]);
md.c:1720:			length = pSPARC->range_x;
md.c:1721:			BC = pSPARC->BCx;
md.c:1724:			length = pSPARC->range_y;
md.c:1725:			BC = pSPARC->BCy;
md.c:1728:			length = pSPARC->range_z;
md.c:1729:			BC = pSPARC->BCz;
md.c:1732:			for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:1733:				if(pSPARC->atom_pos[atm * 3 + dir] >= length || pSPARC->atom_pos[atm * 3 + dir] < 0){
md.c:1741:			for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:1742:				if(pSPARC->atom_pos[atm * 3 + dir] >= length)
md.c:1743:					pSPARC->atom_pos[atm * 3 + dir] -= length;
md.c:1744:				else if(pSPARC->atom_pos[atm * 3 + dir] < 0)
md.c:1745:					pSPARC->atom_pos[atm * 3 + dir] += length;
md.c:1759:    if(pSPARC->MDCount == -1){
md.c:1775:    	if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0){
md.c:1778:		if(strcmpi(pSPARC->MDMeth,"NPT_NH") == 0 || strcmpi(pSPARC->MDMeth,"NPT_NP") == 0){
md.c:1779:			if (pSPARC->Flag_latvec_scale == 0)
md.c:1784:    	if(pSPARC->Calc_stress == 1){
md.c:1788:	    if((pSPARC->Calc_pres == 1 || pSPARC->Calc_stress == 1) && pSPARC->BC == 2){
md.c:1805:		ken_ig = 3.0/2.0 * pSPARC->n_atom * pSPARC->kB * pSPARC->ion_T;
md.c:1808:		fprintf(output_md,":TWIST: %.15g\n", pSPARC->twist);
md.c:1809:	    fprintf(output_md,":TEL: %.15g\n", pSPARC->elec_T);
md.c:1810:	    fprintf(output_md,":TIO: %.15g\n", pSPARC->ion_T);
md.c:1811:		fprintf(output_md,":TEN: %18.10E\n", pSPARC->TE);
md.c:1812:		fprintf(output_md,":KEN: %18.10E\n", pSPARC->KE);
md.c:1813:		fprintf(output_md,":KENIG:%17.10E\n", ken_ig/pSPARC->n_atom);
md.c:1814:		fprintf(output_md,":FEN: %18.10E\n", pSPARC->PE);
md.c:1815:		fprintf(output_md,":UEN: %18.10E\n", pSPARC->PE - pSPARC->Entropy/pSPARC->n_atom);
md.c:1816:		fprintf(output_md,":TSEN:%18.10E\n", pSPARC->Entropy/pSPARC->n_atom);
md.c:1817:		if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0){
md.c:1818:			fprintf(output_md,":TENX:%18.10E \n", pSPARC->TE_ext);
md.c:1822:	    if(pSPARC->PrintAtomPosFlag){
md.c:1824:		    for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:1825:		    	fprintf(output_md,"%18.10E %18.10E %18.10E\n", pSPARC->atom_pos[3 * atm], pSPARC->atom_pos[3 * atm + 1], pSPARC->atom_pos[3 * atm + 2]);
md.c:1830:	    if(pSPARC->PrintAtomVelFlag){
md.c:1832:		    for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:1833:		    	fprintf(output_md,"%18.10E %18.10E %18.10E\n", pSPARC->ion_vel[3 * atm], pSPARC->ion_vel[3 * atm + 1], pSPARC->ion_vel[3 * atm + 2]);
md.c:1838:		if(pSPARC->PrintForceFlag){
md.c:1840:		    for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:1841:		    	fprintf(output_md,"%18.10E %18.10E %18.10E\n", pSPARC->forces[3 * atm], pSPARC->forces[3 * atm + 1], pSPARC->forces[3 * atm + 2]);
md.c:1846:		if(strcmpi(pSPARC->MDMeth,"NPT_NH") == 0 || strcmpi(pSPARC->MDMeth,"NPT_NP") == 0){
md.c:1847:			if (pSPARC->Flag_latvec_scale == 0)
md.c:1848:				fprintf(output_md,":CELL: %18.10E %18.10E %18.10E\n", pSPARC->range_x,pSPARC->range_y,pSPARC->range_z);
md.c:1850:				fprintf(output_md,":LATVEC_SCALE: %18.10E %18.10E %18.10E\n", pSPARC->range_x/pSPARC->initialLatVecLength[0], pSPARC->range_y/pSPARC->initialLatVecLength[1], pSPARC->range_z/pSPARC->initialLatVecLength[2]);
md.c:1854:	    if(pSPARC->Calc_stress == 1){
md.c:1856:	        PrintStress (pSPARC, pSPARC->stress_i, output_md);
md.c:1860:                stress_e[i] = pSPARC->stress[i] - pSPARC->stress_i[i];
md.c:1865:	    if ((pSPARC->Calc_stress == 1 || pSPARC->Calc_pres == 1) && pSPARC->BC == 2) {
md.c:1868:	 		double cell_measure = pSPARC->Jacbdet;
md.c:1869:	        if(pSPARC->BCx == 0)
md.c:1870:	            cell_measure *= pSPARC->range_x;
md.c:1871:	        if(pSPARC->BCy == 0)
md.c:1872:	            cell_measure *= pSPARC->range_y;
md.c:1873:	        if(pSPARC->BCz == 0)
md.c:1874:	            cell_measure *= pSPARC->range_z;
md.c:1876:	        pres_ig = pSPARC->n_atom * pSPARC->kB * pSPARC->ion_T / cell_measure;
md.c:1878:	        fprintf(output_md,":PRESIO: %18.10E\n", pSPARC->pres_i*CONST_HA_BOHR3_GPA);
md.c:1879:	        fprintf(output_md,":PRES:   %18.10E\n", (pSPARC->pres-pSPARC->pres_i)*CONST_HA_BOHR3_GPA);
md.c:1886:	    fprintf(output_md,":TELST: %18.10E %18.10E\n", pSPARC->mean_elec_T, pSPARC->std_elec_T);
md.c:1887:	    fprintf(output_md,":TIOST: %18.10E %18.10E\n", pSPARC->mean_ion_T, pSPARC->std_ion_T);
md.c:1888:		fprintf(output_md,":TENST: %18.10E %18.10E\n", pSPARC->mean_TE, pSPARC->std_TE);
md.c:1889:		fprintf(output_md,":KENST: %18.10E %18.10E\n", pSPARC->mean_KE, pSPARC->std_KE);
md.c:1890:		fprintf(output_md,":FENST: %18.10E %18.10E\n", pSPARC->mean_PE, pSPARC->std_PE);
md.c:1891:		fprintf(output_md,":UENST: %18.10E %18.10E\n", pSPARC->mean_U, pSPARC->std_U);
md.c:1892:		fprintf(output_md,":TSENST: %18.10E %18.10E\n", pSPARC->mean_Entropy, pSPARC->std_Entropy);
md.c:1893:		if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0){
md.c:1894:			fprintf(output_md,":TENXST: %18.10E %18.10E\n", pSPARC->mean_TE_ext, pSPARC->std_TE_ext);
md.c:1897:		for(atm = 0; atm < pSPARC->Ntypes; atm++)
md.c:1900:		for(atm = 0; atm < pSPARC->Ntypes; atm++)
md.c:1904:		int Nintr = pSPARC->Ntypes * (pSPARC->Ntypes + 1) / 2;
md.c:1915:	pSPARC->ion_T = 2 * pSPARC->KE /(pSPARC->kB * pSPARC->dof);
md.c:1916:	if(pSPARC->ion_elec_eqT == 1){
md.c:1917:		pSPARC->elec_T = pSPARC->ion_T;
md.c:1918:		pSPARC->Beta = 1.0/(pSPARC->elec_T * pSPARC->kB);
md.c:1920:	pSPARC->PE = pSPARC->Etot / pSPARC->n_atom;
md.c:1921:	pSPARC->KE = pSPARC->KE/pSPARC->n_atom;
md.c:1922:	pSPARC->TE = (pSPARC->PE + pSPARC->KE);
md.c:1924:	if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0){
md.c:1925:		pSPARC->TE_ext = (0.5 * pSPARC->qmass * pow(pSPARC->xi_nose, 2.0) + pSPARC->dof * pSPARC->kB * pSPARC->thermos_T * pSPARC->snose)/pSPARC->n_atom + pSPARC->TE;
md.c:1928:	if(pSPARC->Calc_stress == 1 || pSPARC->Calc_pres == 1)
md.c:1935:	int Count = pSPARC->MDCount + (pSPARC->RestartFlag == 0) ;
md.c:1936:	mean_Te_old = pSPARC->mean_elec_T;
md.c:1937:	mean_Ti_old = pSPARC->mean_ion_T;
md.c:1938:	mean_TE_old = pSPARC->mean_TE;
md.c:1939:	mean_KE_old = pSPARC->mean_KE;
md.c:1940:	mean_PE_old = pSPARC->mean_PE;
md.c:1941:	mean_U_old = pSPARC->mean_U;
md.c:1942:	mean_Eent_old = pSPARC->mean_Entropy;
md.c:1943:	pSPARC->mean_elec_T = (mean_Te_old * (Count - 1) + pSPARC->elec_T)/ Count;
md.c:1944:	pSPARC->mean_ion_T = (mean_Ti_old * (Count - 1) + pSPARC->ion_T)/ Count;
md.c:1945:	pSPARC->mean_TE = (mean_TE_old * (Count - 1) + pSPARC->TE)/ Count;
md.c:1946:	pSPARC->mean_KE = (mean_KE_old * (Count - 1) + pSPARC->KE)/ Count;
md.c:1947:	pSPARC->mean_PE = (mean_PE_old * (Count - 1) + pSPARC->PE)/ Count;
md.c:1948:	pSPARC->mean_U = (mean_U_old * (Count - 1) + pSPARC->PE - pSPARC->Entropy/pSPARC->n_atom)/ Count;
md.c:1949:	pSPARC->mean_Entropy = (mean_Eent_old * (Count - 1) + pSPARC->Entropy/pSPARC->n_atom)/ Count;
md.c:1950:	pSPARC->std_elec_T = sqrt(fabs( ((pow(pSPARC->std_elec_T,2.0) + pow(mean_Te_old,2.0)) * (Count - 1) + pow(pSPARC->elec_T,2.0))/Count - pow(pSPARC->mean_elec_T,2.0) ));
md.c:1951:	pSPARC->std_ion_T = sqrt(fabs( ((pow(pSPARC->std_ion_T,2.0) + pow(mean_Ti_old,2.0)) * (Count - 1) + pow(pSPARC->ion_T,2.0))/Count - pow(pSPARC->mean_ion_T,2.0) ));
md.c:1952:	pSPARC->std_TE = sqrt(fabs( ((pow(pSPARC->std_TE,2.0) + pow(mean_TE_old,2.0)) * (Count - 1) + pow(pSPARC->TE,2.0))/Count - pow(pSPARC->mean_TE,2.0) ));
md.c:1953:	pSPARC->std_KE = sqrt(fabs( ((pow(pSPARC->std_KE,2.0) + pow(mean_KE_old,2.0)) * (Count - 1) + pow(pSPARC->KE,2.0))/Count - pow(pSPARC->mean_KE,2.0) ));
md.c:1954:	pSPARC->std_PE = sqrt(fabs( ((pow(pSPARC->std_PE,2.0) + pow(mean_PE_old,2.0)) * (Count - 1) + pow(pSPARC->PE,2.0))/Count - pow(pSPARC->mean_PE,2.0) ));
md.c:1955:	pSPARC->std_U = sqrt(fabs( ((pow(pSPARC->std_U,2.0) + pow(mean_U_old,2.0)) * (Count - 1) + pow(pSPARC->PE - pSPARC->Entropy/pSPARC->n_atom,2.0))/Count - pow(pSPARC->mean_U,2.0) ));
md.c:1956:	pSPARC->std_Entropy = sqrt(fabs( ((pow(pSPARC->std_Entropy,2.0) + pow(mean_Eent_old,2.0)) * (Count - 1) + pow(pSPARC->Entropy/pSPARC->n_atom,2.0))/Count - pow(pSPARC->mean_Entropy,2.0) ));
md.c:1957:	if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0){
md.c:1958:		double mean_TEx_old = pSPARC->mean_TE_ext;
md.c:1959:		pSPARC->mean_TE_ext = (mean_TEx_old * (Count - 1) + pSPARC->TE_ext)/ Count;
md.c:1960:		pSPARC->std_TE_ext = sqrt(fabs( ((pow(pSPARC->std_TE_ext,2.0) + pow(mean_TEx_old,2.0)) * (Count - 1) + pow(pSPARC->TE_ext,2.0))/Count - pow(pSPARC->mean_TE_ext,2.0) ));
md.c:1967:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:1970:		for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:1971:			temp = fabs(sqrt(pow(pSPARC->ion_vel[3 * cc],2.0) + pow(pSPARC->ion_vel[3 * cc + 1],2.0) + pow(pSPARC->ion_vel[3 * cc + 2],2.0)));
md.c:1977:		avgvel[ityp] /= pSPARC->nAtomv[ityp];
md.c:1981:	//*avgdis  = pow((pSPARC->range_x * pSPARC->range_y * pSPARC->range_z)/pSPARC->n_atom,1/3.0);
md.c:1984:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
md.c:1986:		for(atm = 0; atm < pSPARC->nAtomv[ityp] - 1; atm++){
md.c:1987:			for(atm2 = atm + 1; atm2 < pSPARC->nAtomv[ityp]; atm2++){
md.c:1988:				temp = fabs(sqrt(pow(pSPARC->atom_pos[3 * (atm + cc)] - pSPARC->atom_pos[3 * (atm2 + cc)],2.0) + pow(pSPARC->atom_pos[3 * (atm + cc) + 1] - pSPARC->atom_pos[3 * (atm2 + cc) + 1],2.0) + pow(pSPARC->atom_pos[3 * (atm + cc) + 2] - pSPARC->atom_pos[3 * (atm2 + cc) + 2],2.0) ));
md.c:1993:		cc += pSPARC->nAtomv[ityp];
md.c:1996:	for(ityp = 0; ityp < pSPARC->Ntypes - 1; ityp++){
md.c:1997:		cc2 = pSPARC->nAtomv[ityp] + cc;
md.c:1998:		for(ityp2 = ityp + 1; ityp2 < pSPARC->Ntypes; ityp2++){
md.c:1999:			mindis[pSPARC->Ntypes - 1 + ityp * (pSPARC->Ntypes - 1) + ityp2 - ityp] = 1000000000.0;
md.c:2000:			for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
md.c:2001:				for(atm2 = 0; atm2 < pSPARC->nAtomv[ityp2]; atm2++){
md.c:2002:					temp = fabs(sqrt(pow(pSPARC->atom_pos[3 * (atm + cc)] - pSPARC->atom_pos[3 * (atm2 + cc2)],2.0) + pow(pSPARC->atom_pos[3 * (atm + cc) + 1] - pSPARC->atom_pos[3 * (atm2 + cc2) + 1],2.0) + pow(pSPARC->atom_pos[3 * (atm + cc) + 2] - pSPARC->atom_pos[3 * (atm2 + cc2) + 2],2.0) ));
md.c:2003:					if(temp < mindis[pSPARC->Ntypes - 1 + ityp * (pSPARC->Ntypes - 1) + ityp2 - ityp])
md.c:2004:						mindis[pSPARC->Ntypes - 1 + ityp * (pSPARC->Ntypes - 1) + ityp2 - ityp] = temp;
md.c:2007:			cc2 += pSPARC->nAtomv[ityp2];
md.c:2009:		cc += pSPARC->nAtomv[ityp];
md.c:2019:    	mdout = fopen(pSPARC->restartC_Filename,"r+");
md.c:2021:        	printf("\nCannot open file \"%s\"\n",pSPARC->restartC_Filename);
md.c:2025:    	fprintf(mdout,":STOPCOUNT: %d\n", pSPARC->MDCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0));
md.c:2034:			mdout = fopen(pSPARC->restartC_Filename,"w");
md.c:2037:			mdout = fopen(pSPARC->restart_Filename,"w");
md.c:2040:    	fprintf(mdout,":MDSTEP: %d\n", pSPARC->MDCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0));
md.c:2044:    	for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:2045:    		fprintf(mdout,"%18.10E %18.10E %18.10E\n", pSPARC->atom_pos[3 * atm], pSPARC->atom_pos[3 * atm + 1], pSPARC->atom_pos[3 * atm + 2]);
md.c:2050:    	for(atm = 0; atm < pSPARC->n_atom; atm++){
md.c:2051:    		fprintf(mdout,"%18.10E %18.10E %18.10E\n", pSPARC->ion_vel[3 * atm], pSPARC->ion_vel[3 * atm + 1], pSPARC->ion_vel[3 * atm + 2]);
md.c:2054:    	if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0){
md.c:2055:    		fprintf(mdout,":snose: %.15g\n", pSPARC->snose);
md.c:2056:    		fprintf(mdout,":xinose: %.15g\n", pSPARC->xi_nose);
md.c:2057:    		fprintf(mdout,":TTHRMI(K): %.15g\n", pSPARC->thermos_T);
md.c:2060:    	if(strcmpi(pSPARC->MDMeth,"NPT_NH") == 0){
md.c:2062:    		fprintf(mdout,":NPT_NH_QMASS: %d", pSPARC->NPT_NHnnos);
md.c:2063:    		for (thenos = 0; thenos < pSPARC->NPT_NHnnos; thenos++) {
md.c:2067:                    fprintf(mdout," %.15g",pSPARC->NPT_NHqmass[thenos]);
md.c:2070:    		fprintf(mdout,":NPT_NH_BMASS: %.15g\n",pSPARC->NPT_NHbmass);
md.c:2071:    		fprintf(mdout,":NPT_NH_vlogs: %d", pSPARC->NPT_NHnnos); // velocities of virtual thermal parameters
md.c:2072:    		for (thenos = 0; thenos < pSPARC->NPT_NHnnos; thenos++) {
md.c:2076:                    fprintf(mdout," %.15g", pSPARC->vlogs[thenos]);
md.c:2079:    		fprintf(mdout,":NPT_NH_vlogv: %.15g\n", pSPARC->vlogv); // velocities of the virtual baro parameter
md.c:2080:    		fprintf(mdout,":NPT_NH_xlogs: %d", pSPARC->NPT_NHnnos); // positions of virtual thermal parameters
md.c:2081:    		for (thenos = 0; thenos < pSPARC->NPT_NHnnos; thenos++) {
md.c:2085:                    fprintf(mdout," %.15g", pSPARC->xlogs[thenos]);
md.c:2088:			if (pSPARC->Flag_latvec_scale == 0)
md.c:2089:    			fprintf(mdout,":CELL: %.15g %.15g %.15g\n",pSPARC->range_x,pSPARC->range_y,pSPARC->range_z); //(no variable for position of barostat variable)
md.c:2091:				fprintf(mdout,":LATVEC_SCALE: %.15g %.15g %.15g\n",pSPARC->range_x/pSPARC->initialLatVecLength[0],pSPARC->range_y/pSPARC->initialLatVecLength[1],pSPARC->range_z/pSPARC->initialLatVecLength[2]); //(no variable for position of barostat variable)
md.c:2092:    		fprintf(mdout,":TARGET_PRESSURE: %.15g GPa\n",pSPARC->prtarget * 29421.02648438959);
md.c:2095:    	if(strcmpi(pSPARC->MDMeth,"NPT_NP") == 0){
md.c:2096:    		fprintf(mdout,":NPT_NP_QMASS: %.15g\n", pSPARC->NPT_NP_qmass);
md.c:2097:    		fprintf(mdout,":NPT_NP_BMASS: %.15g\n", pSPARC->NPT_NP_bmass);
md.c:2098:    		fprintf(mdout,":NPT_NP_Sv: %.15g\n", pSPARC->Sv_NPT_NP); // velocity of virtual thermal parameter
md.c:2099:    		fprintf(mdout,":NPT_NP_Pm: %.15g %.15g %.15g\n", pSPARC->Pm_NPT_NP[0], pSPARC->Pm_NPT_NP[1], pSPARC->Pm_NPT_NP[2]); // velocity of virtual baro parameter
md.c:2100:    		fprintf(mdout,":NPT_NP_S: %.15g\n", pSPARC->S_NPT_NP); // value of virtual thermal parameter
md.c:2101:    		fprintf(mdout,":NPT_NP_range_x_velo: %.15g\n", pSPARC->range_x_velo); // velocity of virtual x baro parameter
md.c:2102:    		fprintf(mdout,":NPT_NP_range_y_velo: %.15g\n", pSPARC->range_y_velo); // velocity of virtual y baro parameter
md.c:2103:    		fprintf(mdout,":NPT_NP_range_z_velo: %.15g\n", pSPARC->range_z_velo); // velocity of virtual z baro parameter
md.c:2104:    		if (pSPARC->Flag_latvec_scale == 0)
md.c:2105:    			fprintf(mdout,":CELL: %.15g %.15g %.15g\n",pSPARC->range_x,pSPARC->range_y,pSPARC->range_z); //(no variable for position of barostat variable)
md.c:2107:				fprintf(mdout,":LATVEC_SCALE: %.15g %.15g %.15g\n",pSPARC->range_x/pSPARC->initialLatVecLength[0],pSPARC->range_y/pSPARC->initialLatVecLength[1],pSPARC->range_z/pSPARC->initialLatVecLength[2]); //(no variable for position of barostat variable)
md.c:2108:    		fprintf(mdout,":TARGET_PRESSURE: %.15g GPa\n",pSPARC->prtarget * 29421.02648438959);
md.c:2109:    		fprintf(mdout,":NPT_NP_ini_Hamiltonian: %.15g\n", pSPARC->init_Hamil_NPT_NP);
md.c:2113:    	fprintf(mdout,":TEL(K): %.15g\n", pSPARC->elec_T);
md.c:2114:    	fprintf(mdout,":TIO(K): %.15g\n", pSPARC->ion_T);
md.c:2134:    	if( access(pSPARC->restart_Filename, F_OK ) != -1 )
md.c:2135:			rst_fp = fopen(pSPARC->restart_Filename,"r");
md.c:2136:		else if( access(pSPARC->restartC_Filename, F_OK ) != -1 )
md.c:2137:			rst_fp = fopen(pSPARC->restartC_Filename,"r");
md.c:2139:			rst_fp = fopen(pSPARC->restartP_Filename,"r");
md.c:2146:	pSPARC->ion_vel = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
md.c:2147:	if (pSPARC->ion_vel == NULL) {
md.c:2153:	if(pSPARC->RestartFlag == 1){
md.c:2154:	    // l_buff = 2 * sizeof(int) + (6 * pSPARC->n_atom + 5) * sizeof(double);
md.c:2155:	    if (strcmpi(pSPARC->MDMeth,"NPT_NH") == 0){
md.c:2156:	    	l_buff = (2 + 1) * sizeof(int) + (6 * pSPARC->n_atom + (5 + 3*pSPARC->NPT_NHnnos + 8)) * sizeof(double);
md.c:2158:	    else if (strcmpi(pSPARC->MDMeth,"NPT_NP") == 0){
md.c:2159:	    	l_buff = 2 * sizeof(int) + (6 * pSPARC->n_atom + (5 + 13)) * sizeof(double);
md.c:2162:	    	l_buff = 2 * sizeof(int) + (6 * pSPARC->n_atom + 5) * sizeof(double);
md.c:2165:	else if(pSPARC->RestartFlag == -1)
md.c:2166:	    l_buff = 2 * sizeof(int) + (6 * pSPARC->n_atom + 3) * sizeof(double);
md.c:2178:				fscanf(rst_fp,"%d",&pSPARC->StopCount);
md.c:2180:				fscanf(rst_fp,"%d",&pSPARC->restartCount);
md.c:2182:				for(atm = 0; atm < pSPARC->n_atom; atm++)
md.c:2183:					fscanf(rst_fp,"%lf %lf %lf", &pSPARC->atom_pos[3 * atm], &pSPARC->atom_pos[3 * atm + 1], &pSPARC->atom_pos[3 * atm + 2]);
md.c:2185:				for(atm = 0; atm < pSPARC->n_atom; atm++)
md.c:2186:					fscanf(rst_fp,"%lf %lf %lf", &pSPARC->ion_vel[3 * atm], &pSPARC->ion_vel[3 * atm + 1], &pSPARC->ion_vel[3 * atm + 2]);
md.c:2187:			else if (strcmpi(str,":snose:") == 0 && pSPARC->RestartFlag == 1)
md.c:2188:				fscanf(rst_fp,"%lf", &pSPARC->snose);
md.c:2189:			else if (strcmpi(str,":xinose:") == 0 && pSPARC->RestartFlag == 1)
md.c:2190:				fscanf(rst_fp,"%lf", &pSPARC->xi_nose);
md.c:2191:			else if (strcmpi(str,":TEL(K):") == 0 && pSPARC->RestartFlag == 1)
md.c:2192:				fscanf(rst_fp,"%lf", &pSPARC->elec_T);
md.c:2193:			else if (strcmpi(str,":TIO(K):") == 0 && pSPARC->RestartFlag == 1)
md.c:2194:				fscanf(rst_fp,"%lf", &pSPARC->ion_T);
md.c:2195:			else if (strcmpi(str,":TTHRMI(K):") == 0 && pSPARC->RestartFlag == 1)
md.c:2196:				fscanf(rst_fp,"%lf", &pSPARC->thermos_Ti);
md.c:2197:			if (strcmpi(pSPARC->MDMeth,"NPT_NH") == 0) {
md.c:2199:            		fscanf(rst_fp,"%d",&pSPARC->NPT_NHnnos);
md.c:2200:            		for (int subscript_NPTNH_qmass = 0; subscript_NPTNH_qmass < pSPARC->NPT_NHnnos; subscript_NPTNH_qmass++){
md.c:2201:            		    fscanf(rst_fp,"%lf",&pSPARC->NPT_NHqmass[subscript_NPTNH_qmass]);
md.c:2206:            		fscanf(rst_fp,"%d",&pSPARC->NPT_NHnnos);
md.c:2207:            		for (int subscript_NPTNH_qmass = 0; subscript_NPTNH_qmass < pSPARC->NPT_NHnnos; subscript_NPTNH_qmass++){
md.c:2208:            		    fscanf(rst_fp,"%lf",&pSPARC->vlogs[subscript_NPTNH_qmass]);
md.c:2213:            		fscanf(rst_fp,"%d",&pSPARC->NPT_NHnnos);
md.c:2214:            		for (int subscript_NPTNH_qmass = 0; subscript_NPTNH_qmass < pSPARC->NPT_NHnnos; subscript_NPTNH_qmass++){
md.c:2215:            		    fscanf(rst_fp,"%lf",&pSPARC->xlogs[subscript_NPTNH_qmass]);
md.c:2221:            		fscanf(rst_fp,"%lf", &pSPARC->NPT_NHbmass);
md.c:2223:            		fscanf(rst_fp,"%lf", &pSPARC->vlogv);
md.c:2229:        		    if (pSPARC->NPTscaleVecs[0] == 1) pSPARC->scale = nowRange_x / pSPARC->range_x; // now NPT_NH only support expanding with a constant ratio
md.c:2230:					else if (pSPARC->NPTscaleVecs[1] == 1) pSPARC->scale = nowRange_y / pSPARC->range_y; 
md.c:2231:					else pSPARC->scale = nowRange_z / pSPARC->range_z;
md.c:2233:        		    pSPARC->range_x = nowRange_x;
md.c:2234:        		    pSPARC->range_y = nowRange_y;
md.c:2235:        		    pSPARC->range_z = nowRange_z;
md.c:2243:					pSPARC->initialLatVecLength[0] = sqrt(pSPARC->LatVec[0]*pSPARC->LatVec[0] + pSPARC->LatVec[1]*pSPARC->LatVec[1] + pSPARC->LatVec[2]*pSPARC->LatVec[2]);
md.c:2244:					pSPARC->initialLatVecLength[1] = sqrt(pSPARC->LatVec[3]*pSPARC->LatVec[3] + pSPARC->LatVec[4]*pSPARC->LatVec[4] + pSPARC->LatVec[5]*pSPARC->LatVec[5]);
md.c:2245:					pSPARC->initialLatVecLength[2] = sqrt(pSPARC->LatVec[6]*pSPARC->LatVec[6] + pSPARC->LatVec[7]*pSPARC->LatVec[7] + pSPARC->LatVec[8]*pSPARC->LatVec[8]);
md.c:2246:					nowRange_x = pSPARC->initialLatVecLength[0]*nowLatScale_x;
md.c:2247:					nowRange_y = pSPARC->initialLatVecLength[1]*nowLatScale_y;
md.c:2248:					nowRange_z = pSPARC->initialLatVecLength[2]*nowLatScale_z;
md.c:2250:					if (pSPARC->NPTscaleVecs[0] == 1) pSPARC->scale = nowRange_x / pSPARC->range_x; // now NPT_NH only support expanding with a constant ratio
md.c:2251:					else if (pSPARC->NPTscaleVecs[1] == 1) pSPARC->scale = nowRange_y / pSPARC->range_y; 
md.c:2252:					else pSPARC->scale = nowRange_z / pSPARC->range_z;
md.c:2254:        		    pSPARC->range_x = nowRange_x;
md.c:2255:        		    pSPARC->range_y = nowRange_y;
md.c:2256:        		    pSPARC->range_z = nowRange_z;
md.c:2259:            		fscanf(rst_fp,"%lf", &pSPARC->prtarget);
md.c:2261:			if (strcmpi(pSPARC->MDMeth,"NPT_NP") == 0) {
md.c:2263:            		fscanf(rst_fp,"%lf", &pSPARC->NPT_NP_qmass);
md.c:2265:            		fscanf(rst_fp,"%lf", &pSPARC->Sv_NPT_NP);
md.c:2267:            		fscanf(rst_fp,"%lf", &pSPARC->S_NPT_NP);
md.c:2269:            		fscanf(rst_fp,"%lf", &pSPARC->NPT_NP_bmass);
md.c:2271:            		fscanf(rst_fp,"%lf", &pSPARC->range_x_velo);
md.c:2273:            		fscanf(rst_fp,"%lf", &pSPARC->range_y_velo);
md.c:2275:            		fscanf(rst_fp,"%lf", &pSPARC->range_z_velo);
md.c:2281:        		    pSPARC->scale = nowRange_x / pSPARC->range_x; // now NPT_NP only support homogeneous expansion,
md.c:2283:        		    pSPARC->range_x = nowRange_x;
md.c:2284:        		    pSPARC->range_y = nowRange_y;
md.c:2285:        		    pSPARC->range_z = nowRange_z;
md.c:2293:					pSPARC->initialLatVecLength[0] = sqrt(pSPARC->LatVec[0]*pSPARC->LatVec[0] + pSPARC->LatVec[1]*pSPARC->LatVec[1] + pSPARC->LatVec[2]*pSPARC->LatVec[2]);
md.c:2294:					pSPARC->initialLatVecLength[1] = sqrt(pSPARC->LatVec[3]*pSPARC->LatVec[3] + pSPARC->LatVec[4]*pSPARC->LatVec[4] + pSPARC->LatVec[5]*pSPARC->LatVec[5]);
md.c:2295:					pSPARC->initialLatVecLength[2] = sqrt(pSPARC->LatVec[6]*pSPARC->LatVec[6] + pSPARC->LatVec[7]*pSPARC->LatVec[7] + pSPARC->LatVec[8]*pSPARC->LatVec[8]);
md.c:2296:					nowRange_x = pSPARC->initialLatVecLength[0]*nowLatScale_x;
md.c:2297:					nowRange_y = pSPARC->initialLatVecLength[1]*nowLatScale_y;
md.c:2298:					nowRange_z = pSPARC->initialLatVecLength[2]*nowLatScale_z;
md.c:2299:					pSPARC->scale = nowRange_x / pSPARC->range_x; // now NPT_NP only support homogeneous expansion,
md.c:2301:        		    pSPARC->range_x = nowRange_x;
md.c:2302:        		    pSPARC->range_y = nowRange_y;
md.c:2303:        		    pSPARC->range_z = nowRange_z;
md.c:2306:            		fscanf(rst_fp,"%lf", &pSPARC->prtarget);
md.c:2308:            		fscanf(rst_fp,"%lf", &pSPARC->init_Hamil_NPT_NP);
md.c:2315:        MPI_Pack(&pSPARC->StopCount, 1, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2316:        MPI_Pack(&pSPARC->restartCount, 1, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2317:        MPI_Pack(pSPARC->atom_pos, 3*pSPARC->n_atom, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2318:        MPI_Pack(pSPARC->ion_vel, 3*pSPARC->n_atom, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2319:        if(pSPARC->RestartFlag == 1){
md.c:2320:            MPI_Pack(&pSPARC->elec_T, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2321:            MPI_Pack(&pSPARC->ion_T, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2322:            if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0){
md.c:2323:            	MPI_Pack(&pSPARC->snose, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2324:            	MPI_Pack(&pSPARC->xi_nose, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2325:            	MPI_Pack(&pSPARC->thermos_Ti, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2327:            else if(strcmpi(pSPARC->MDMeth,"NPT_NH") == 0){
md.c:2328:            	MPI_Pack(&pSPARC->NPT_NHnnos, 1, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2329:            	MPI_Pack(pSPARC->NPT_NHqmass, pSPARC->NPT_NHnnos, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2330:            	MPI_Pack(pSPARC->vlogs, pSPARC->NPT_NHnnos, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2331:            	MPI_Pack(pSPARC->xlogs, pSPARC->NPT_NHnnos, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2333:            	MPI_Pack(&pSPARC->NPT_NHbmass, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2334:            	MPI_Pack(&pSPARC->vlogv, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2335:            	MPI_Pack(&pSPARC->scale, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2336:            	MPI_Pack(&pSPARC->range_x, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2337:            	MPI_Pack(&pSPARC->range_y, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2338:            	MPI_Pack(&pSPARC->range_z, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2339:            	MPI_Pack(&pSPARC->prtarget, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2341:            else if(strcmpi(pSPARC->MDMeth,"NPT_NP") == 0){
md.c:2342:            	MPI_Pack(&pSPARC->NPT_NP_qmass, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2343:            	MPI_Pack(&pSPARC->Sv_NPT_NP, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2344:            	MPI_Pack(&pSPARC->S_NPT_NP, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2345:            	MPI_Pack(&pSPARC->NPT_NP_bmass, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2346:            	MPI_Pack(&pSPARC->range_x_velo, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2347:            	MPI_Pack(&pSPARC->range_y_velo, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2348:            	MPI_Pack(&pSPARC->range_z_velo, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2349:            	MPI_Pack(&pSPARC->scale, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2350:            	MPI_Pack(&pSPARC->range_x, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2351:            	MPI_Pack(&pSPARC->range_y, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2352:            	MPI_Pack(&pSPARC->range_z, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2353:            	MPI_Pack(&pSPARC->prtarget, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2354:            	MPI_Pack(&pSPARC->init_Hamil_NPT_NP, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
md.c:2372:        MPI_Unpack(buff, l_buff, &position, &pSPARC->StopCount, 1, MPI_INT, MPI_COMM_WORLD);
md.c:2373:        MPI_Unpack(buff, l_buff, &position, &pSPARC->restartCount, 1, MPI_INT, MPI_COMM_WORLD);
md.c:2374:        MPI_Unpack(buff, l_buff, &position, pSPARC->atom_pos, 3*pSPARC->n_atom, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2375:        MPI_Unpack(buff, l_buff, &position, pSPARC->ion_vel, 3*pSPARC->n_atom, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2376:        if(pSPARC->RestartFlag == 1){
md.c:2377:            MPI_Unpack(buff, l_buff, &position, &pSPARC->elec_T, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2378:            MPI_Unpack(buff, l_buff, &position, &pSPARC->ion_T, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2379:            if(strcmpi(pSPARC->MDMeth,"NVT_NH") == 0){
md.c:2380:        	MPI_Unpack(buff, l_buff, &position, &pSPARC->snose, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2381:        	MPI_Unpack(buff, l_buff, &position, &pSPARC->xi_nose, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2382:        	MPI_Unpack(buff, l_buff, &position, &pSPARC->thermos_Ti, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2384:            else if(strcmpi(pSPARC->MDMeth,"NPT_NH") == 0){
md.c:2385:            	MPI_Unpack(buff, l_buff, &position, &pSPARC->NPT_NHnnos, 1, MPI_INT, MPI_COMM_WORLD);
md.c:2386:        		MPI_Unpack(buff, l_buff, &position, pSPARC->NPT_NHqmass, pSPARC->NPT_NHnnos, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2387:        		MPI_Unpack(buff, l_buff, &position, pSPARC->vlogs, pSPARC->NPT_NHnnos, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2388:        		MPI_Unpack(buff, l_buff, &position, pSPARC->xlogs, pSPARC->NPT_NHnnos, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2390:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->NPT_NHbmass, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2391:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->vlogv, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2392:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->scale, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2393:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->range_x, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2394:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->range_y, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2395:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->range_z, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2396:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->prtarget, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2398:            else if(strcmpi(pSPARC->MDMeth,"NPT_NP") == 0){
md.c:2399:            	MPI_Unpack(buff, l_buff, &position, &pSPARC->NPT_NP_qmass, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2400:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->Sv_NPT_NP, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2401:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->S_NPT_NP, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2403:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->NPT_NP_bmass, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2404:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->range_x_velo, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2405:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->range_y_velo, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2406:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->range_z_velo, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2407:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->scale, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2408:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->range_x, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2409:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->range_y, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2410:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->range_z, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2411:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->prtarget, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2412:        		MPI_Unpack(buff, l_buff, &position, &pSPARC->init_Hamil_NPT_NP, 1, MPI_DOUBLE, MPI_COMM_WORLD);
md.c:2417:	if(pSPARC->RestartFlag == 1) {
md.c:2418:	    pSPARC->Beta = 1.0/(pSPARC->elec_T * pSPARC->kB);
md.c:2419:	    if((strcmpi(pSPARC->MDMeth,"NPT_NH") == 0) || (strcmpi(pSPARC->MDMeth,"NPT_NP") == 0)) {
md.c:2432:	if( access(pSPARC->restartC_Filename, F_OK ) != -1 )
md.c:2433:	    rename(pSPARC->restartC_Filename, pSPARC->restartP_Filename);
mixing.c:177:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
mixing.c:185:    int sindx_rho = (pSPARC->Nspden > 1) * pSPARC->Nd_d;
mixing.c:187:    double precond_tol = pSPARC->TOL_PRECOND;
mixing.c:189:    N = pSPARC->Nd_d * pSPARC->Nspden;
mixing.c:190:    m = pSPARC->MixingHistory;
mixing.c:191:    p = pSPARC->PulayFrequency;
mixing.c:192:    beta = pSPARC->MixingParameter;
mixing.c:193:    omega = pSPARC->MixingParameterSimple;
mixing.c:194:    beta_mag = pSPARC->MixingParameterMag;
mixing.c:195:    omega_mag = pSPARC->MixingParameterSimpleMag;
mixing.c:211:    if (pSPARC->MixingVariable == 0) {        // density mixing
mixing.c:212:        g_k = x_kp1 = pSPARC->electronDens + sindx_rho; 
mixing.c:213:    } else if (pSPARC->MixingVariable == 1) { // potential mixing
mixing.c:214:        g_k = x_kp1 = pSPARC->Veff_loc_dmcomm_phi;
mixing.c:218:    x_k   = pSPARC->mixing_hist_xk;   // the current mixed var x (x^{in}_k)
mixing.c:219:    x_km1 = pSPARC->mixing_hist_xkm1; // x_{k-1}
mixing.c:220:    f_k   = pSPARC->mixing_hist_fk;   // f_k = g(x_k) - x_k
mixing.c:221:    f_km1 = pSPARC->mixing_hist_fkm1; // f_{k-1}
mixing.c:222:    R     = pSPARC->mixing_hist_Xk;   // [x_{k-m+1} - x_{k-m}, ... , x_k - x_{k-1}]
mixing.c:223:    F     = pSPARC->mixing_hist_Fk;   // [f_{k-m+1} - f_{k-m}, ... , f_k - f_{k-1}]
mixing.c:224:    Pf    = pSPARC->mixing_hist_Pfk;  // the preconditioned residual
mixing.c:237:        if (pSPARC->PulayRestartFlag && i_hist == 0) {
mixing.c:271:            N, m, x_k, f_k, R, F, x_wavg, f_wavg, pSPARC->dmcomm_phi
mixing.c:283:    if (pSPARC->spin_typ == 1) {
mixing.c:284:        f_tot = (double *)malloc(pSPARC->Nd_d * sizeof(double));
mixing.c:285:        f_mag = (double *)malloc(pSPARC->Nd_d * sizeof(double));
mixing.c:288:        for (i = 0; i < pSPARC->Nd_d; i++){
mixing.c:290:            f_tot[i] = f_wavg[i] + f_wavg[pSPARC->Nd_d+i];
mixing.c:292:            f_mag[i] = f_wavg[i] - f_wavg[pSPARC->Nd_d+i];
mixing.c:294:        VectorSum(f_tot, pSPARC->Nd_d, &sum_f_tot, pSPARC->dmcomm_phi);
mixing.c:295:        VectorSum(f_mag, pSPARC->Nd_d, &sum_f_mag, pSPARC->dmcomm_phi);
mixing.c:302:    if (pSPARC->MixingPrecond != 0) { // apply preconditioner
mixing.c:303:        if (pSPARC->MixingPrecond == 1) { // kerker preconditioner
mixing.c:304:            double k_TF = pSPARC->precond_kerker_kTF;
mixing.c:305:            double idiemac = pSPARC->precond_kerker_thresh;
mixing.c:309:                k_TF, idiemac, precond_tol, pSPARC->Nd_d, 
mixing.c:310:                pSPARC->DMVertices, Pf, pSPARC->dmcomm_phi
mixing.c:315:        for (int i = 0; i < pSPARC->Nd_d; i++) {
mixing.c:321:    if (pSPARC->spin_typ != 0) {
mixing.c:322:        if (pSPARC->MixingPrecondMag != 0) { 
mixing.c:323:            if (pSPARC->MixingPrecondMag == 1) { // Kerker preconditioner
mixing.c:324:                double k_TF_mag = pSPARC->precond_kerker_kTF_mag;
mixing.c:325:                double idiemac_mag = pSPARC->precond_kerker_thresh_mag;
mixing.c:328:                    k_TF_mag, idiemac_mag, precond_tol, pSPARC->Nd_d, 
mixing.c:329:                    pSPARC->DMVertices, Pf+pSPARC->Nd_d, pSPARC->dmcomm_phi
mixing.c:334:            for (int i = 0; i < pSPARC->Nd_d; i++) {
mixing.c:335:                Pf[i+pSPARC->Nd_d] = amix_mag * f_mag[i];
mixing.c:343:    if (pSPARC->spin_typ != 0) { 
mixing.c:345:        VectorSum(Pf, pSPARC->Nd_d, &sum_Pf_tot, pSPARC->dmcomm_phi);
mixing.c:346:        double shift_Pf_tot = (sum_f_tot - sum_Pf_tot) / pSPARC->Nd;
mixing.c:347:        VectorShift(Pf, pSPARC->Nd_d, shift_Pf_tot, pSPARC->dmcomm_phi);
mixing.c:350:        VectorSum(Pf+pSPARC->Nd_d, pSPARC->Nd_d, &sum_Pf_mag, pSPARC->dmcomm_phi);
mixing.c:351:        double shift_Pf_mag = (sum_f_mag - sum_Pf_mag) / pSPARC->Nd;
mixing.c:352:        VectorShift(Pf+pSPARC->Nd_d, pSPARC->Nd_d, shift_Pf_mag, pSPARC->dmcomm_phi);
mixing.c:356:    if (pSPARC->spin_typ == 0) { // spin-unpolarized
mixing.c:360:        for (i = 0; i < pSPARC->Nd_d; i++) {
mixing.c:361:            int j = i + pSPARC->Nd_d;
mixing.c:370:    if (pSPARC->spin_typ != 0) {
mixing.c:375:    if (pSPARC->MixingVariable == 0 && pSPARC->MixingPrecond != 0) { // density mixing
mixing.c:379:        VectorSum(x_kp1, N, &int_rho, pSPARC->dmcomm_phi);
mixing.c:380:        int_rho *= pSPARC->dV;
mixing.c:381:        double scal_fac = -pSPARC->NegCharge / int_rho;
mixing.c:388:    if (pSPARC->MixingVariable == 0) {
mixing.c:397:        if(pSPARC->spin_typ != 0) {
mixing.c:398:            for (i = 0; i < pSPARC->Nd_d; i++)
mixing.c:399:                pSPARC->electronDens[i] = x_kp1[i] + x_kp1[pSPARC->Nd_d + i];
mixing.c:403:                      MPI_SUM, pSPARC->dmcomm_phi);
mixing.c:412:            if (pSPARC->CyclixFlag) {
mixing.c:413:                for (i = 0; i < pSPARC->Nd_d; i++) {
mixing.c:414:                    int_rho += pSPARC->electronDens[i] * pSPARC->Intgwt_phi[i];
mixing.c:417:                for (i = 0; i < pSPARC->Nd_d; i++) {
mixing.c:418:                    int_rho += pSPARC->electronDens[i];
mixing.c:420:                int_rho *= pSPARC->dV;
mixing.c:426:                          MPI_SUM, pSPARC->dmcomm_phi);
mixing.c:434:            double scal_fac = -pSPARC->NegCharge / int_rho;
mixing.c:437:            if (pSPARC->spin_typ != 0) { // for spin polarized
mixing.c:438:                len = 3 * pSPARC->Nd_d;
mixing.c:440:                len = pSPARC->Nd_d;      // for spin unpolarized
mixing.c:443:                pSPARC->electronDens[i] *= scal_fac;
mixing.c:527:        shift /= pSPARC->Nd;
nlocVecRoutines.c:81:    double range_x = pSPARC->range_x;
nlocVecRoutines.c:82:    double range_y = pSPARC->range_y;
nlocVecRoutines.c:83:    double range_z = pSPARC->range_z;
nlocVecRoutines.c:102:    DMxs = pSPARC->xin + DMVertices[0] * pSPARC->delta_x;
nlocVecRoutines.c:103:    DMxe = pSPARC->xin + (DMVertices[1]) * pSPARC->delta_x; // note that this is not the actual edge, add BCx to get actual domain edge
nlocVecRoutines.c:104:    DMys = DMVertices[2] * pSPARC->delta_y;
nlocVecRoutines.c:105:    DMye = (DMVertices[3]) * pSPARC->delta_y; // note that this is not the actual edge, add BCx to get actual domain edge
nlocVecRoutines.c:106:    DMzs = DMVertices[4] * pSPARC->delta_z;
nlocVecRoutines.c:107:    DMze = (DMVertices[5]) * pSPARC->delta_z; // note that this is not the actual edge, add BCx to get actual domain edge
nlocVecRoutines.c:114:    *Atom_Influence_nloc = (ATOM_NLOC_INFLUENCE_OBJ *)malloc(sizeof(ATOM_NLOC_INFLUENCE_OBJ) * pSPARC->Ntypes);
nlocVecRoutines.c:120:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
nlocVecRoutines.c:123:        for (i = 0; i <= pSPARC->psd[ityp].lmax; i++) {
nlocVecRoutines.c:124:            rc = max(rc, pSPARC->psd[ityp].rc[i]);
nlocVecRoutines.c:128:        if(pSPARC->cell_typ == 0) {
nlocVecRoutines.c:132:            rcbox_x = pSPARC->CUTOFF_x[ityp];
nlocVecRoutines.c:133:            rcbox_y = pSPARC->CUTOFF_y[ityp];
nlocVecRoutines.c:134:            rcbox_z = pSPARC->CUTOFF_z[ityp];
nlocVecRoutines.c:139:        for (i = 0; i < pSPARC->nAtomv[ityp]; i++) {
nlocVecRoutines.c:141:            x0 = pSPARC->atom_pos[3*atmcount];
nlocVecRoutines.c:142:            y0 = pSPARC->atom_pos[3*atmcount+1];
nlocVecRoutines.c:143:            z0 = pSPARC->atom_pos[3*atmcount+2];
nlocVecRoutines.c:151:                if (pSPARC->SQFlag == 1) {
nlocVecRoutines.c:153:                    double rcut_x = pSPARC->pSQ->nloc[0] * pSPARC->delta_x;
nlocVecRoutines.c:162:                if (pSPARC->SQFlag == 1) {
nlocVecRoutines.c:163:                    double rcut_y = pSPARC->pSQ->nloc[1] * pSPARC->delta_y;
nlocVecRoutines.c:172:                if (pSPARC->SQFlag == 1) {
nlocVecRoutines.c:173:                    double rcut_z = pSPARC->pSQ->nloc[2] * pSPARC->delta_z;
nlocVecRoutines.c:230:        for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
nlocVecRoutines.c:232:            x0 = pSPARC->atom_pos[3*atmcount2];
nlocVecRoutines.c:233:            y0 = pSPARC->atom_pos[3*atmcount2+1];
nlocVecRoutines.c:234:            z0 = pSPARC->atom_pos[3*atmcount2+2];
nlocVecRoutines.c:242:                if (pSPARC->SQFlag == 1) {
nlocVecRoutines.c:243:                    double rcut_x = pSPARC->pSQ->nloc[0] * pSPARC->delta_x;
nlocVecRoutines.c:252:                if (pSPARC->SQFlag == 1) {
nlocVecRoutines.c:253:                    double rcut_y = pSPARC->pSQ->nloc[1] * pSPARC->delta_y;
nlocVecRoutines.c:262:                if (pSPARC->SQFlag == 1) {
nlocVecRoutines.c:263:                    double rcut_z = pSPARC->pSQ->nloc[2] * pSPARC->delta_z;
nlocVecRoutines.c:294:                        rc_xl = ceil( (x0_i - pSPARC->xin - rcbox_x)/pSPARC->delta_x);
nlocVecRoutines.c:295:                        rc_xr = floor((x0_i - pSPARC->xin + rcbox_x)/pSPARC->delta_x);
nlocVecRoutines.c:296:                        rc_yl = ceil( (y0_i - rcbox_y)/pSPARC->delta_y);
nlocVecRoutines.c:297:                        rc_yr = floor((y0_i + rcbox_y)/pSPARC->delta_y);
nlocVecRoutines.c:298:                        rc_zl = ceil( (z0_i - rcbox_z)/pSPARC->delta_z);
nlocVecRoutines.c:299:                        rc_zr = floor((z0_i + rcbox_z)/pSPARC->delta_z);
nlocVecRoutines.c:319:                        if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:323:                                z = k * pSPARC->delta_z;
nlocVecRoutines.c:326:                                    y = j * pSPARC->delta_y;
nlocVecRoutines.c:329:                                        x = pSPARC->xin + i * pSPARC->delta_x;
nlocVecRoutines.c:340:                            if(pSPARC->cell_typ == 0) {
nlocVecRoutines.c:344:                                    z2 = k * pSPARC->delta_z - z0_i;
nlocVecRoutines.c:348:                                        y2 = j * pSPARC->delta_y - y0_i;
nlocVecRoutines.c:352:                                            x2 = i * pSPARC->delta_x - x0_i;
nlocVecRoutines.c:362:                            } else if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
nlocVecRoutines.c:366:                                    z = k * pSPARC->delta_z - z0_i;
nlocVecRoutines.c:369:                                        y = j * pSPARC->delta_y - y0_i;
nlocVecRoutines.c:372:                                            x = i * pSPARC->delta_x - x0_i;
nlocVecRoutines.c:373:                                            r2 = pSPARC->metricT[0] * (x*x) + pSPARC->metricT[1] * (x*y) + pSPARC->metricT[2] * (x*z) 
nlocVecRoutines.c:374:                                            + pSPARC->metricT[4] * (y*y) + pSPARC->metricT[5] * (y*z) + pSPARC->metricT[8] * (z*z);
nlocVecRoutines.c:480:    cell[0] = pSPARC->range_x;
nlocVecRoutines.c:481:    cell[1] = pSPARC->range_y;
nlocVecRoutines.c:482:    cell[2] = pSPARC->range_z;
nlocVecRoutines.c:485:    BCs[0] = pSPARC->BCx;
nlocVecRoutines.c:486:    BCs[1] = pSPARC->BCy;
nlocVecRoutines.c:487:    BCs[2] = pSPARC->BCz;
nlocVecRoutines.c:521:    (*nlocProj) = (NLOC_PROJ_OBJ *)malloc( sizeof(NLOC_PROJ_OBJ) * pSPARC->Ntypes ); // TODO: deallocate!!
nlocVecRoutines.c:526:    double xin = pSPARC->xin + DMVertices[0] * pSPARC->delta_x;
nlocVecRoutines.c:527:    if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:528:        if(comm == pSPARC->kptcomm_topo){
nlocVecRoutines.c:529:            Intgwt = pSPARC->Intgwt_kpttopo;
nlocVecRoutines.c:531:            Intgwt = pSPARC->Intgwt_psi;
nlocVecRoutines.c:534:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
nlocVecRoutines.c:537:        if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:540:        lloc = pSPARC->localPsd[ityp]; // local projector index
nlocVecRoutines.c:541:        lmax = pSPARC->psd[ityp].lmax;
nlocVecRoutines.c:542:        psd_len = pSPARC->psd[ityp].size;
nlocVecRoutines.c:547:            (*nlocProj)[ityp].nproj += pSPARC->psd[ityp].ppl[l] * (2 * l + 1);
nlocVecRoutines.c:558:            if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:568:            if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:569:                y0 = pSPARC->atom_pos[3*Atom_Influence_nloc[ityp].atom_index[iat]+1];
nlocVecRoutines.c:570:                z0 = pSPARC->atom_pos[3*Atom_Influence_nloc[ityp].atom_index[iat]+2];
nlocVecRoutines.c:571:                ty = (y0 - y0_i)/pSPARC->range_y;
nlocVecRoutines.c:572:                tz = (z0 - z0_i)/pSPARC->range_z;
nlocVecRoutines.c:581:                    x = xin + i_DM * pSPARC->delta_x;
nlocVecRoutines.c:582:                    y = (j_DM + DMVertices[2]) * pSPARC->delta_y;
nlocVecRoutines.c:583:                    z = (k_DM + DMVertices[4]) * pSPARC->delta_z;
nlocVecRoutines.c:588:                    rc_pos_x[ipos] = pSPARC->RotM_cyclix[0] * xx + pSPARC->RotM_cyclix[1] * yy;
nlocVecRoutines.c:589:                    rc_pos_y[ipos] = pSPARC->RotM_cyclix[3] * xx + pSPARC->RotM_cyclix[4] * yy;
nlocVecRoutines.c:595:                if(pSPARC->cell_typ == 0){
nlocVecRoutines.c:601:                        x2 = (i_DM + DMVertices[0]) * pSPARC->delta_x - x0_i;
nlocVecRoutines.c:602:                        y2 = (j_DM + DMVertices[2]) * pSPARC->delta_y - y0_i;
nlocVecRoutines.c:603:                        z2 = (k_DM + DMVertices[4]) * pSPARC->delta_z - z0_i;
nlocVecRoutines.c:610:                } else if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
nlocVecRoutines.c:616:                        x = (i_DM + DMVertices[0]) * pSPARC->delta_x - x0_i;
nlocVecRoutines.c:617:                        y = (j_DM + DMVertices[2]) * pSPARC->delta_y - y0_i;
nlocVecRoutines.c:618:                        z = (k_DM + DMVertices[4]) * pSPARC->delta_z - z0_i;
nlocVecRoutines.c:633:                if  (l == lloc) { lcount2 += pSPARC->psd[ityp].ppl[l]; continue;}
nlocVecRoutines.c:634:                for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
nlocVecRoutines.c:636:					if (pSPARC->psd[ityp].is_r_uniform == 1) {
nlocVecRoutines.c:637:						SplineInterpUniform(pSPARC->psd[ityp].RadialGrid, pSPARC->psd[ityp].UdV+lcount2*psd_len, psd_len, 
nlocVecRoutines.c:638:						                    rc_pos_r, UdV_sort, ndc, pSPARC->psd[ityp].SplineFitUdV+lcount*psd_len);
nlocVecRoutines.c:640:						SplineInterpNonuniform(pSPARC->psd[ityp].RadialGrid, pSPARC->psd[ityp].UdV+lcount2*psd_len, psd_len, 
nlocVecRoutines.c:641:						                       rc_pos_r, UdV_sort, ndc, pSPARC->psd[ityp].SplineFitUdV+lcount*psd_len); 
nlocVecRoutines.c:655:                        if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:715:    double xin = pSPARC->xin + DMVertices[0] * pSPARC->delta_x; 
nlocVecRoutines.c:717:    if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:718:        if(comm == pSPARC->kptcomm_topo){
nlocVecRoutines.c:719:            Intgwt = pSPARC->Intgwt_kpttopo;
nlocVecRoutines.c:721:            Intgwt = pSPARC->Intgwt_psi;
nlocVecRoutines.c:725:    (*nlocProj) = (NLOC_PROJ_OBJ *)malloc( sizeof(NLOC_PROJ_OBJ) * pSPARC->Ntypes ); // TODO: deallocate!!
nlocVecRoutines.c:726:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
nlocVecRoutines.c:730:        if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:734:        lloc = pSPARC->localPsd[ityp]; // local projector index
nlocVecRoutines.c:735:        lmax = pSPARC->psd[ityp].lmax;
nlocVecRoutines.c:736:        psd_len = pSPARC->psd[ityp].size;
nlocVecRoutines.c:741:            (*nlocProj)[ityp].nproj += pSPARC->psd[ityp].ppl[l] * (2 * l + 1);
nlocVecRoutines.c:752:            if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:762:            if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:763:                y0 = pSPARC->atom_pos[3*Atom_Influence_nloc[ityp].atom_index[iat]+1];
nlocVecRoutines.c:764:                z0 = pSPARC->atom_pos[3*Atom_Influence_nloc[ityp].atom_index[iat]+2];
nlocVecRoutines.c:765:                ty = (y0 - y0_i)/pSPARC->range_y;
nlocVecRoutines.c:766:                tz = (z0 - z0_i)/pSPARC->range_z;
nlocVecRoutines.c:769:                //printf("%f %f %f %f\n",pSPARC->RotM_cyclix[0],pSPARC->RotM_cyclix[1],pSPARC->RotM_cyclix[3], pSPARC->RotM_cyclix[4]);
nlocVecRoutines.c:777:                    x = xin + i_DM * pSPARC->delta_x;
nlocVecRoutines.c:778:                    y = (j_DM + DMVertices[2]) * pSPARC->delta_y;
nlocVecRoutines.c:779:                    z = (k_DM + DMVertices[4]) * pSPARC->delta_z;
nlocVecRoutines.c:784:                    rc_pos_x[ipos] = pSPARC->RotM_cyclix[0] * xx + pSPARC->RotM_cyclix[1] * yy;
nlocVecRoutines.c:785:                    rc_pos_y[ipos] = pSPARC->RotM_cyclix[3] * xx + pSPARC->RotM_cyclix[4] * yy;
nlocVecRoutines.c:791:                if(pSPARC->cell_typ == 0){
nlocVecRoutines.c:797:                        x2 = (i_DM + DMVertices[0]) * pSPARC->delta_x - x0_i;
nlocVecRoutines.c:798:                        y2 = (j_DM + DMVertices[2]) * pSPARC->delta_y - y0_i;
nlocVecRoutines.c:799:                        z2 = (k_DM + DMVertices[4]) * pSPARC->delta_z - z0_i;
nlocVecRoutines.c:806:                } else if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
nlocVecRoutines.c:812:                        x = (i_DM + DMVertices[0]) * pSPARC->delta_x - x0_i;
nlocVecRoutines.c:813:                        y = (j_DM + DMVertices[2]) * pSPARC->delta_y - y0_i;
nlocVecRoutines.c:814:                        z = (k_DM + DMVertices[4]) * pSPARC->delta_z - z0_i;
nlocVecRoutines.c:829:                if  (l == lloc) { lcount2 += pSPARC->psd[ityp].ppl[l]; continue;}
nlocVecRoutines.c:830:                for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
nlocVecRoutines.c:832:                    if (pSPARC->psd[ityp].is_r_uniform == 1) {
nlocVecRoutines.c:833:						SplineInterpUniform(pSPARC->psd[ityp].RadialGrid, pSPARC->psd[ityp].UdV+lcount2*psd_len, psd_len, 
nlocVecRoutines.c:834:						                    rc_pos_r, UdV_sort, ndc, pSPARC->psd[ityp].SplineFitUdV+lcount*psd_len);
nlocVecRoutines.c:836:						SplineInterpNonuniform(pSPARC->psd[ityp].RadialGrid, pSPARC->psd[ityp].UdV+lcount2*psd_len, psd_len, 
nlocVecRoutines.c:837:						                       rc_pos_r, UdV_sort, ndc, pSPARC->psd[ityp].SplineFitUdV+lcount*psd_len); 
nlocVecRoutines.c:849:                        if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:891:    pSPARC->IP_displ = (int *)malloc( sizeof(int) * (pSPARC->n_atom+1));
nlocVecRoutines.c:894:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
nlocVecRoutines.c:895:        lmax = pSPARC->psd[ityp].lmax;
nlocVecRoutines.c:896:        lloc = pSPARC->localPsd[ityp];
nlocVecRoutines.c:901:            nproj += pSPARC->psd[ityp].ppl[l] * (2 * l + 1);
nlocVecRoutines.c:903:        pSPARC->IP_displ[0] = 0;
nlocVecRoutines.c:904:        for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
nlocVecRoutines.c:905:            pSPARC->IP_displ[atom_index+1] = pSPARC->IP_displ[atom_index] + nproj;
nlocVecRoutines.c:923:    alpha = (double *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol, sizeof(double));
nlocVecRoutines.c:925:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
nlocVecRoutines.c:926:        //int lloc = pSPARC->localPsd[ityp];
nlocVecRoutines.c:927:        //lmax = pSPARC->psd[ityp].lmax;
nlocVecRoutines.c:938:            if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:941:                    alpha+pSPARC->IP_displ[atom_index]*ncol, nlocProj[ityp].nproj);
nlocVecRoutines.c:944:                    pSPARC->dV, nlocProj[ityp].Chi[iat], ndc, x_rc, ndc, 1.0, 
nlocVecRoutines.c:945:                    alpha+pSPARC->IP_displ[atom_index]*ncol, nlocProj[ityp].nproj);
nlocVecRoutines.c:955:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol, MPI_DOUBLE, MPI_SUM, comm);
nlocVecRoutines.c:960:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
nlocVecRoutines.c:961:        int lloc = pSPARC->localPsd[ityp];
nlocVecRoutines.c:962:        lmax = pSPARC->psd[ityp].lmax;
nlocVecRoutines.c:963:        for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
nlocVecRoutines.c:969:                        ldispl += pSPARC->psd[ityp].ppl[l];
nlocVecRoutines.c:972:                    for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
nlocVecRoutines.c:974:                            alpha[count++] *= pSPARC->psd[ityp].Gamma[ldispl+np];
nlocVecRoutines.c:977:                    ldispl += pSPARC->psd[ityp].ppl[l];
nlocVecRoutines.c:984:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
nlocVecRoutines.c:991:                        alpha+pSPARC->IP_displ[atom_index]*ncol, nlocProj[ityp].nproj, 0.0, Vnlx, ndc); 
nlocVecRoutines.c:1015:    alpha = (double complex *) calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol, sizeof(double complex));
nlocVecRoutines.c:1016:    double Lx = pSPARC->range_x;
nlocVecRoutines.c:1017:    double Ly = pSPARC->range_y;
nlocVecRoutines.c:1018:    double Lz = pSPARC->range_z;
nlocVecRoutines.c:1019:    double k1 = pSPARC->k1_loc[kpt];
nlocVecRoutines.c:1020:    double k2 = pSPARC->k2_loc[kpt];
nlocVecRoutines.c:1021:    double k3 = pSPARC->k3_loc[kpt];
nlocVecRoutines.c:1026:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
nlocVecRoutines.c:1034:            if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:1037:                a = bloch_fac * pSPARC->dV;
nlocVecRoutines.c:1048:            if (pSPARC->CyclixFlag) {
nlocVecRoutines.c:1051:                    alpha+pSPARC->IP_displ[atom_index]*ncol, nlocProj[ityp].nproj);
nlocVecRoutines.c:1055:                    alpha+pSPARC->IP_displ[atom_index]*ncol, nlocProj[ityp].nproj);
nlocVecRoutines.c:1065:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol, MPI_DOUBLE_COMPLEX, MPI_SUM, comm);
nlocVecRoutines.c:1070:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
nlocVecRoutines.c:1071:        int lloc = pSPARC->localPsd[ityp];
nlocVecRoutines.c:1072:        lmax = pSPARC->psd[ityp].lmax;
nlocVecRoutines.c:1073:        for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
nlocVecRoutines.c:1079:                        ldispl += pSPARC->psd[ityp].ppl[l];
nlocVecRoutines.c:1082:                    for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
nlocVecRoutines.c:1084:                            alpha[count++] *= pSPARC->psd[ityp].Gamma[ldispl+np];
nlocVecRoutines.c:1087:                    ldispl += pSPARC->psd[ityp].ppl[l];
nlocVecRoutines.c:1094:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
nlocVecRoutines.c:1107:                          alpha+pSPARC->IP_displ[atom_index]*ncol, nlocProj[ityp].nproj, &b, Vnlx, ndc); 
occupation.c:49:    int CS_Flag = pSPARC->CS_Flag;
occupation.c:52:        Nt = pSPARC->CS_Nt;
occupation.c:53:    Ns = pSPARC->Nstates;
occupation.c:54:    Nk = pSPARC->Nkpts_kptcomm;
occupation.c:57:    if (pSPARC->SQ3Flag == 1) {
occupation.c:60:        if (pSPARC->ext_FPMD_Flag != 0) {
occupation.c:67:    MPI_Bcast(&Efermi, 1, MPI_DOUBLE, 0, pSPARC->kptcomm);
occupation.c:70:    if (pSPARC->isGammaPoint) { // for gamma-point systems
occupation.c:71:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
occupation.c:73:                if (pSPARC->CS_Flag == 1 && n < Ns-Nt) {
occupation.c:77:                        pSPARC->Beta, pSPARC->lambda[n+spn_i*Ns], Efermi, pSPARC->elec_T_type
occupation.c:80:                pSPARC->occ[n+spn_i*Ns] = g_nk;
occupation.c:84:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
occupation.c:87:                    if (pSPARC->CS_Flag == 1 && n < Ns-Nt) {
occupation.c:91:                            pSPARC->Beta, pSPARC->lambda[n+k*Ns+spn_i*Nk*Ns], Efermi, pSPARC->elec_T_type
occupation.c:94:                    pSPARC->occ[n+k*Ns+spn_i*Nk*Ns] = g_nk;
occupation.c:115:    if (pSPARC->SQFlag == 1) {
occupation.c:116:        if (pSPARC->pSQ->dmcomm_SQ == MPI_COMM_NULL) return 0.0;
occupation.c:118:        if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return 0.0;
occupation.c:224:    if (pSPARC->kptcomm_index < 0) return 0.0;    
occupation.c:225:    int CS_Flag = pSPARC->CS_Flag;
occupation.c:228:        Nt = pSPARC->CS_Nt;
occupation.c:229:    int Ns = pSPARC->Nstates, n, k, spn_i;
occupation.c:230:    int Nk = pSPARC->Nkpts_kptcomm;
occupation.c:232:    double g = 0.0, g_nk = 0.0, Ne = pSPARC->NegCharge; 
occupation.c:233:    if (pSPARC->isGammaPoint) { // for gamma-point systems
occupation.c:234:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
occupation.c:240:                        pSPARC->Beta, pSPARC->lambda[n+spn_i*Ns], lambda_f, pSPARC->elec_T_type
occupation.c:243:                g += (2.0/pSPARC->Nspin) * g_nk;
occupation.c:246:        if (pSPARC->npspin != 1) { // sum over processes with the same rank in spincomm to find g
occupation.c:247:            MPI_Allreduce(MPI_IN_PLACE, &g, 1, MPI_DOUBLE, MPI_SUM, pSPARC->spin_bridge_comm);
occupation.c:250:        for (spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
occupation.c:257:                            pSPARC->Beta, pSPARC->lambda[n+k*Ns+spn_i*Nk*Ns], lambda_f, pSPARC->elec_T_type
occupation.c:260:                    g += (2.0/pSPARC->Nspin/pSPARC->Nspinor) * pSPARC->kptWts_loc[k] * g_nk;
occupation.c:264:        g *= 1.0 / pSPARC->Nkpts; // find average
occupation.c:265:        if (pSPARC->npspin != 1) { // sum over processes with the same rank in spincomm to find g
occupation.c:268:            // MPI_Barrier(pSPARC->spin_bridge_comm);
occupation.c:269:            MPI_Allreduce(MPI_IN_PLACE, &g, 1, MPI_DOUBLE, MPI_SUM, pSPARC->spin_bridge_comm);
occupation.c:272:        if (pSPARC->npkpt != 1) { // sum over processes with the same rank in kptcomm to find g
occupation.c:273:            MPI_Allreduce(MPI_IN_PLACE, &g, 1, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
occupation.c:277:    // return g - pSPARC->Nelectron; // this will work even when Ns = Nelectron/2
orbitalElecDensInit.c:42:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
orbitalElecDensInit.c:44:        DMnd = pSPARC->Nd_d * (pSPARC->Nspden/2*2+1);
orbitalElecDensInit.c:46:        if( (pSPARC->elecgs_Count - pSPARC->StressCount) == 0){
orbitalElecDensInit.c:48:            //if (pSPARC->RestartFlag) {
orbitalElecDensInit.c:52:                // 4) Change (pSPARC->elecgs_Count + !pSPARC->RestartFlag) > 3  condition to pSPARC->elecgs_Count >= 3, below
orbitalElecDensInit.c:56:                pSPARC->electronDens[i] = pSPARC->electronDens_at[i];   
orbitalElecDensInit.c:59:			if(pSPARC->MDFlag == 1 || pSPARC->RelaxFlag == 1){
orbitalElecDensInit.c:60:            	for(i = 0; i < 3 * pSPARC->n_atom; i++)
orbitalElecDensInit.c:61:        			pSPARC->atom_pos_0dt[i] = pSPARC->atom_pos[i];
orbitalElecDensInit.c:64:            if( (pSPARC->elecgs_Count - pSPARC->StressCount) >= 3 && (pSPARC->MDFlag == 1 || pSPARC->RelaxFlag == 1)){
orbitalElecDensInit.c:70:                // double scal_fac = (pSPARC->NetCharge - pSPARC->PosCharge) / pSPARC->NegCharge;    
orbitalElecDensInit.c:72:            	//	pSPARC->electronDens_at[i] /= scal_fac;
orbitalElecDensInit.c:75:       			for(i = 0; i < pSPARC->Nd_d; i++){
orbitalElecDensInit.c:76:            		pSPARC->electronDens[i] = pSPARC->electronDens_at[i] + pSPARC->delectronDens[i]; // extrapolated density for the next step
orbitalElecDensInit.c:77:               		if(pSPARC->electronDens[i] < 0.0)
orbitalElecDensInit.c:78:                        pSPARC->electronDens[i] = pSPARC->xc_rhotol; // 1e-14
orbitalElecDensInit.c:82:                if(pSPARC->spin_typ != 0){
orbitalElecDensInit.c:83:                    for(i = 0; i < pSPARC->Nd_d; i++){
orbitalElecDensInit.c:84:                        rho_mag = pSPARC->electronDens[pSPARC->Nd_d+i] - pSPARC->electronDens[2*pSPARC->Nd_d+i]; // from previous step
orbitalElecDensInit.c:85:                        pSPARC->electronDens[pSPARC->Nd_d+i] = (pSPARC->electronDens[i] + rho_mag)/2.0;
orbitalElecDensInit.c:86:                        pSPARC->electronDens[2*pSPARC->Nd_d+i] = (pSPARC->electronDens[i] - rho_mag)/2.0;
orbitalElecDensInit.c:93:            if (pSPARC->CyclixFlag) {
orbitalElecDensInit.c:94:                for (i = 0; i < pSPARC->Nd_d; i++) {
orbitalElecDensInit.c:95:                    int_rho += pSPARC->electronDens[i] * pSPARC->Intgwt_phi[i];
orbitalElecDensInit.c:98:                for (i = 0; i < pSPARC->Nd_d; i++) {
orbitalElecDensInit.c:99:                    int_rho += pSPARC->electronDens[i];
orbitalElecDensInit.c:101:                int_rho *= pSPARC->dV;
orbitalElecDensInit.c:103:            MPI_Allreduce(MPI_IN_PLACE, &int_rho, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi); 	
orbitalElecDensInit.c:104:            vscal = pSPARC->PosCharge / int_rho;
orbitalElecDensInit.c:106:            	pSPARC->electronDens[i] *= vscal;
orbitalElecDensInit.c:111:    // global_init_rho_up = (double *) malloc(pSPARC->Nd * sizeof(double));
orbitalElecDensInit.c:112:    // global_init_rho_dn = (double *) malloc(pSPARC->Nd * sizeof(double));
orbitalElecDensInit.c:113:    // int gridsizes[3] = {pSPARC->Nx, pSPARC->Ny, pSPARC->Nz};
orbitalElecDensInit.c:114:    // gather_distributed_vector(pSPARC->electronDens + pSPARC->Nd_d, pSPARC->DMVertices, global_init_rho_up, gridsizes, pSPARC->dmcomm_phi, 1);
orbitalElecDensInit.c:115:    // gather_distributed_vector(pSPARC->electronDens + 2 * pSPARC->Nd_d, pSPARC->DMVertices, global_init_rho_dn, gridsizes, pSPARC->dmcomm_phi, 1);
orbitalElecDensInit.c:117:    // MPI_Bcast(global_init_rho_up, pSPARC->Nd, MPI_DOUBLE,  0, MPI_COMM_WORLD);
orbitalElecDensInit.c:118:    // MPI_Bcast(global_init_rho_dn, pSPARC->Nd, MPI_DOUBLE,  0, MPI_COMM_WORLD);
orbitalElecDensInit.c:123:    //     writeMatToFile(rhoUpFilename, global_init_rho_up, pSPARC->Nx, pSPARC->Ny, pSPARC->Nz);
orbitalElecDensInit.c:125:    //     writeMatToFile(rhoDnFilename, global_init_rho_dn, pSPARC->Nx, pSPARC->Ny, pSPARC->Nz);
orbitalElecDensInit.c:136:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) {
orbitalElecDensInit.c:141:    for (nd = 0; nd < pSPARC->Nd_d; nd++){
orbitalElecDensInit.c:142:        pSPARC->delectronDens_2dt[nd] = pSPARC->delectronDens_1dt[nd];
orbitalElecDensInit.c:143:        pSPARC->delectronDens_1dt[nd] = pSPARC->delectronDens_0dt[nd];
orbitalElecDensInit.c:144:        pSPARC->delectronDens_0dt[nd] = pSPARC->electronDens[nd] - pSPARC->electronDens_at[nd];
orbitalElecDensInit.c:146:    if(pSPARC->MDFlag == 1){
orbitalElecDensInit.c:147:	    for(atm = 0; atm < pSPARC->n_atom; atm++){
orbitalElecDensInit.c:148:	    	if(pSPARC->MDCount == 1){
orbitalElecDensInit.c:149:	    		pSPARC->atom_pos_nm[count * 3] = pSPARC->atom_pos[count * 3];
orbitalElecDensInit.c:150:		    	pSPARC->atom_pos_nm[count * 3 + 1] = pSPARC->atom_pos[count * 3 + 1];
orbitalElecDensInit.c:151:			    pSPARC->atom_pos_nm[count * 3 + 2] = pSPARC->atom_pos[count * 3 + 2];
orbitalElecDensInit.c:154:			    pSPARC->atom_pos_nm[count * 3] += pSPARC->MD_dt * pSPARC->ion_vel[count * 3];
orbitalElecDensInit.c:155:			    pSPARC->atom_pos_nm[count * 3 + 1] += pSPARC->MD_dt * pSPARC->ion_vel[count * 3 + 1];
orbitalElecDensInit.c:156:			    pSPARC->atom_pos_nm[count * 3 + 2] += pSPARC->MD_dt * pSPARC->ion_vel[count * 3 + 2];
orbitalElecDensInit.c:160:    } else if(pSPARC->RelaxFlag == 1){
orbitalElecDensInit.c:161:        for(atm = 0; atm < pSPARC->n_atom; atm++){
orbitalElecDensInit.c:162:		    if((pSPARC->elecgs_Count - pSPARC->StressCount) == 1){
orbitalElecDensInit.c:163:			    pSPARC->atom_pos_nm[count * 3] = pSPARC->atom_pos[count * 3];
orbitalElecDensInit.c:164:			    pSPARC->atom_pos_nm[count * 3 + 1] = pSPARC->atom_pos[count * 3 + 1];
orbitalElecDensInit.c:165:			    pSPARC->atom_pos_nm[count * 3 + 2] = pSPARC->atom_pos[count * 3 + 2];
orbitalElecDensInit.c:168:			    pSPARC->atom_pos_nm[count * 3] += pSPARC->Relax_fac * pSPARC->d[count * 3] * pSPARC->mvAtmConstraint[count * 3];
orbitalElecDensInit.c:169:			    pSPARC->atom_pos_nm[count * 3 + 1] += pSPARC->Relax_fac * pSPARC->d[count * 3 + 1] * pSPARC->mvAtmConstraint[count * 3 + 1];
orbitalElecDensInit.c:170:			    pSPARC->atom_pos_nm[count * 3 + 2] += pSPARC->Relax_fac * pSPARC->d[count * 3 + 2] * pSPARC->mvAtmConstraint[count * 3 + 2];
orbitalElecDensInit.c:175:	if((pSPARC->elecgs_Count - pSPARC->StressCount) >= 3){ 
orbitalElecDensInit.c:180:        for(ii = 0; ii < 3 * pSPARC->n_atom; ii++){
orbitalElecDensInit.c:181:            temp1 = pSPARC->atom_pos_0dt[ii] - pSPARC->atom_pos_1dt[ii];
orbitalElecDensInit.c:182:            temp2 = pSPARC->atom_pos_1dt[ii] - pSPARC->atom_pos_2dt[ii];
orbitalElecDensInit.c:183:            temp3 = pSPARC->atom_pos_nm[ii] - pSPARC->atom_pos_0dt[ii];
orbitalElecDensInit.c:196:        for (nd = 0; nd < pSPARC->Nd_d; nd++)
orbitalElecDensInit.c:197:            pSPARC->delectronDens[nd] = (1 + alpha) * pSPARC->delectronDens_0dt[nd] + (beta - alpha) * pSPARC->delectronDens_1dt[nd] - beta * pSPARC->delectronDens_2dt[nd];
orbitalElecDensInit.c:202:    for(ii = 0; ii < 3 * pSPARC->n_atom; ii++){
orbitalElecDensInit.c:203:        pSPARC->atom_pos_2dt[ii] = pSPARC->atom_pos_1dt[ii];
orbitalElecDensInit.c:204:        pSPARC->atom_pos_1dt[ii] = pSPARC->atom_pos_0dt[ii];
orbitalElecDensInit.c:205:        pSPARC->atom_pos_0dt[ii] = pSPARC->atom_pos_nm[ii];
orbitalElecDensInit.c:220:    if (pSPARC->dmcomm != MPI_COMM_NULL) {
orbitalElecDensInit.c:226:        DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
orbitalElecDensInit.c:227:        size_k = DMnd * pSPARC->Nband_bandcomm;
orbitalElecDensInit.c:229:        size_s = size_k * pSPARC->Nkpts_kptcomm;
orbitalElecDensInit.c:232:        len_tot = size_s * pSPARC->Nspin_spincomm;
orbitalElecDensInit.c:235:        if((pSPARC->elecgs_Count) == 0){
orbitalElecDensInit.c:236:            if (pSPARC->isGammaPoint){
orbitalElecDensInit.c:238:                pSPARC->Xorb = (double *)malloc( len_tot * sizeof(double) );
orbitalElecDensInit.c:243:                pSPARC->Yorb = (double *)malloc( max(len_tot,DMnd) * sizeof(double) ); 
orbitalElecDensInit.c:244:                //pSPARC->Yorb = (double *)malloc( len_tot * sizeof(double) ); 
orbitalElecDensInit.c:245:                if (pSPARC->Xorb == NULL || pSPARC->Yorb == NULL) {
orbitalElecDensInit.c:249:                if (pSPARC->SQ3Flag == 1){
orbitalElecDensInit.c:250:                    pSPARC->Zorb = (double *)malloc( max(len_tot,DMnd) * sizeof(double) ); 
orbitalElecDensInit.c:251:                    if (pSPARC->Zorb == NULL) {
orbitalElecDensInit.c:264:                if (pSPARC->FixRandSeed == 1) {
orbitalElecDensInit.c:266:                	gridsizes[0] = pSPARC->Nx;
orbitalElecDensInit.c:267:                	gridsizes[1] = pSPARC->Ny;
orbitalElecDensInit.c:268:                	gridsizes[2] = pSPARC->Nz;
orbitalElecDensInit.c:269:                	//int size_kg = pSPARC->Nd * pSPARC->Nstates;
orbitalElecDensInit.c:270:                	int size_sg = pSPARC->Nd * pSPARC->Nstates;
orbitalElecDensInit.c:271:                	for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
orbitalElecDensInit.c:272:				        //int kg  = pSPARC->kpt_start_indx; // global kpt index
orbitalElecDensInit.c:273:				        int sg  = pSPARC->spin_start_indx + spn_i; // global spin index
orbitalElecDensInit.c:274:				        for (n = 0; n < pSPARC->Nband_bandcomm; n++) {
orbitalElecDensInit.c:275:					        int ng = pSPARC->band_start_indx + n; // global band index
orbitalElecDensInit.c:276:					        int shift_g = sg * size_sg + ng * pSPARC->Nd; // global shift
orbitalElecDensInit.c:278:					        double *Psi_kn = pSPARC->Xorb + shift;
orbitalElecDensInit.c:279:					        SeededRandVec(Psi_kn, pSPARC->DMVertices_dmcomm, gridsizes, -0.5, 0.5, shift_g);
orbitalElecDensInit.c:283:		            for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
orbitalElecDensInit.c:284:		        	    SetRandMat(pSPARC->Xorb + spn_i*size_s , DMnd, pSPARC->Nband_bandcomm, -0.5, 0.5, pSPARC->spincomm);
orbitalElecDensInit.c:289:                pSPARC->Xorb_kpt = (double complex *) malloc( len_tot * sizeof(double complex) );
orbitalElecDensInit.c:294:                pSPARC->Yorb_kpt = (double complex *) malloc( max(len_tot,DMnd) * sizeof(double complex) ); 
orbitalElecDensInit.c:295:                //pSPARC->Yorb = (double *)malloc( len_tot * sizeof(double) ); 
orbitalElecDensInit.c:296:                if (pSPARC->Xorb_kpt == NULL || pSPARC->Yorb_kpt == NULL) {
orbitalElecDensInit.c:308:                if (pSPARC->FixRandSeed == 1) {
orbitalElecDensInit.c:310:                	gridsizes[0] = pSPARC->Nx;
orbitalElecDensInit.c:311:                	gridsizes[1] = pSPARC->Ny;
orbitalElecDensInit.c:312:                	gridsizes[2] = pSPARC->Nz;
orbitalElecDensInit.c:313:                	int size_kg = pSPARC->Nd * pSPARC->Nspinor * pSPARC->Nstates;
orbitalElecDensInit.c:314:                	int size_sg = size_kg * pSPARC->Nkpts_sym;
orbitalElecDensInit.c:315:                	for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
orbitalElecDensInit.c:316:                        int sg  = pSPARC->spin_start_indx + spn_i; // global spin index
orbitalElecDensInit.c:317:                    	for (k = 0; k < pSPARC->Nkpts_kptcomm; k++) {
orbitalElecDensInit.c:318:					        int kg  = pSPARC->kpt_start_indx + k; // global kpt index
orbitalElecDensInit.c:319:					        for (n = 0; n < pSPARC->Nband_bandcomm; n++) {
orbitalElecDensInit.c:320:						        int ng = pSPARC->band_start_indx + n; // global band index
orbitalElecDensInit.c:321:						        int shift_g = sg * size_sg + kg * size_kg + ng * pSPARC->Nd * pSPARC->Nspinor; // global shift
orbitalElecDensInit.c:323:                                for (spinor = 0; spinor < pSPARC->Nspinor; spinor ++) {
orbitalElecDensInit.c:324:                                    double complex *Psi_kn = pSPARC->Xorb_kpt + shift + spinor * pSPARC->Nd_d_dmcomm;
orbitalElecDensInit.c:325:						            SeededRandVec_complex(Psi_kn, pSPARC->DMVertices_dmcomm, gridsizes, -0.5, 0.5, shift_g);
orbitalElecDensInit.c:331:		            for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
orbitalElecDensInit.c:332:                        for (i = 0; i < pSPARC->Nkpts_kptcomm; i++) {
orbitalElecDensInit.c:333:                            SetRandMat_complex(pSPARC->Xorb_kpt + i*size_k + spn_i*size_s, DMnd, pSPARC->Nband_bandcomm, -0.5, 0.5, pSPARC->spincomm);
parallelization.c:73:    gridsizes[0] = pSPARC->Nx; gridsizes[1] = pSPARC->Ny; gridsizes[2] = pSPARC->Nz;
parallelization.c:74:    npNd = pSPARC->npNdx * pSPARC->npNdy * pSPARC->npNdz;
parallelization.c:75:    minsize = pSPARC->order/2;
parallelization.c:76:    if (pSPARC->npspin == 0 && pSPARC->npkpt == 0 && 
parallelization.c:77:        pSPARC->npband == 0 && npNd == 0) 
parallelization.c:79:        dims_divide_skbd(pSPARC->Nspin, pSPARC->Nkpts_sym, pSPARC->Nstates, 
parallelization.c:80:            gridsizes, nproc, &pSPARC->npspin, &pSPARC->npkpt, &pSPARC->npband, &npNd, minsize, pSPARC->usefock);
parallelization.c:82:        pSPARC->npNdx = dims[0];
parallelization.c:83:        pSPARC->npNdy = dims[1];
parallelization.c:84:        pSPARC->npNdz = dims[2];
parallelization.c:92:    if (pSPARC->npspin == 0) {
parallelization.c:93:        pSPARC->npspin = min(nproc, pSPARC->Nspin);
parallelization.c:94:    } else if (pSPARC->npspin > pSPARC->Nspin || pSPARC->npspin > nproc) {
parallelization.c:95:        pSPARC->npspin = min(nproc, pSPARC->Nspin);
parallelization.c:97:            printf("WARNING: npspin is larger than pSPARC->Nspin or nproc!\n"
parallelization.c:98:                   "         Forcing npspin = min(nproc, pSPARC->Nspin) = %d.\n\n",pSPARC->npspin);
parallelization.c:103:    size_spincomm = nproc / pSPARC->npspin;
parallelization.c:104:    if (rank < (nproc - nproc % pSPARC->npspin))
parallelization.c:105:        pSPARC->spincomm_index = rank / size_spincomm;
parallelization.c:107:        pSPARC->spincomm_index = -1;
parallelization.c:110:    if (rank < (nproc - nproc % pSPARC->npspin))
parallelization.c:111:        pSPARC->Nspin_spincomm = pSPARC->Nspin / pSPARC->npspin;
parallelization.c:113:        pSPARC->Nspin_spincomm = 0;
parallelization.c:116:    if (pSPARC->spincomm_index == -1) {
parallelization.c:117:        pSPARC->spin_start_indx = 0;
parallelization.c:119:        pSPARC->spin_start_indx = pSPARC->spincomm_index * pSPARC->Nspin_spincomm;
parallelization.c:121:    pSPARC->spin_end_indx = pSPARC->spin_start_indx + pSPARC->Nspin_spincomm - 1;
parallelization.c:127:    color = (pSPARC->spincomm_index >= 0) ? pSPARC->spincomm_index : INT_MAX; 
parallelization.c:128:    MPI_Comm_split(MPI_COMM_WORLD, color, 0, &pSPARC->spincomm);
parallelization.c:133:    MPI_Comm_rank(pSPARC->spincomm, &rank_spincomm);
parallelization.c:139:    if (rank < nproc - nproc % pSPARC->npspin) {
parallelization.c:144:    MPI_Comm_split(MPI_COMM_WORLD, color, pSPARC->spincomm_index, &pSPARC->spin_bridge_comm);
parallelization.c:150:    if (pSPARC->npkpt == 0) {
parallelization.c:151:        pSPARC->npkpt = min(size_spincomm, pSPARC->Nkpts_sym); // paral over k-points as much as possible
parallelization.c:152:    } else if (pSPARC->npkpt > pSPARC->Nkpts_sym || pSPARC->npkpt > size_spincomm) {
parallelization.c:153:        pSPARC->npkpt = min(size_spincomm, pSPARC->Nkpts_sym);
parallelization.c:156:                   "         Forcing npkpt = min(size_spincomm, Nkpts_sym) = %d.\n\n",pSPARC->npkpt);
parallelization.c:160:    size_kptcomm = size_spincomm / pSPARC->npkpt; // size of kptcomm
parallelization.c:161:    if (pSPARC->spincomm_index != -1 && rank_spincomm < (size_spincomm - size_spincomm % pSPARC->npkpt))
parallelization.c:162:        pSPARC->kptcomm_index = rank_spincomm / size_kptcomm;
parallelization.c:164:        pSPARC->kptcomm_index = -1;
parallelization.c:167:    if (rank_spincomm < (size_spincomm - size_spincomm % pSPARC->npkpt))
parallelization.c:168:        pSPARC->Nkpts_kptcomm = pSPARC->Nkpts_sym / pSPARC->npkpt + (int) (pSPARC->kptcomm_index < (pSPARC->Nkpts_sym % pSPARC->npkpt));
parallelization.c:170:        pSPARC->Nkpts_kptcomm = 0;
parallelization.c:173:    if (pSPARC->kptcomm_index == -1) {
parallelization.c:174:        pSPARC->kpt_start_indx = 0;
parallelization.c:175:    } else if (pSPARC->kptcomm_index < (pSPARC->Nkpts_sym % pSPARC->npkpt)) {
parallelization.c:176:        pSPARC->kpt_start_indx = pSPARC->kptcomm_index * pSPARC->Nkpts_kptcomm;
parallelization.c:178:        pSPARC->kpt_start_indx = pSPARC->kptcomm_index * pSPARC->Nkpts_kptcomm + pSPARC->Nkpts_sym % pSPARC->npkpt;
parallelization.c:180:    pSPARC->kpt_end_indx = pSPARC->kpt_start_indx + pSPARC->Nkpts_kptcomm - 1;
parallelization.c:185:    // split the pSPARC->spincomm into several kptcomms using color = kptcomm_index
parallelization.c:186:    color = (pSPARC->kptcomm_index >= 0) ? pSPARC->kptcomm_index : INT_MAX;
parallelization.c:187:    MPI_Comm_split(pSPARC->spincomm, color, 0, &pSPARC->kptcomm);
parallelization.c:189:    //setup_core_affinity(pSPARC->kptcomm);
parallelization.c:198:    if (pSPARC->Nkpts >= 1 && pSPARC->kptcomm_index != -1) {
parallelization.c:200:        //if (pSPARC->BC != 1) {
parallelization.c:201:            pSPARC->kptWts_loc = (double *)malloc(pSPARC->Nkpts_kptcomm * sizeof(double));
parallelization.c:202:            pSPARC->k1_loc = (double *)malloc(pSPARC->Nkpts_kptcomm * sizeof(double));
parallelization.c:203:            pSPARC->k2_loc = (double *)malloc(pSPARC->Nkpts_kptcomm * sizeof(double));
parallelization.c:204:            pSPARC->k3_loc = (double *)malloc(pSPARC->Nkpts_kptcomm * sizeof(double));
parallelization.c:213:    MPI_Comm_size(pSPARC->kptcomm, &nproc_kptcomm);
parallelization.c:214:    MPI_Comm_rank(pSPARC->kptcomm, &rank_kptcomm);
parallelization.c:215:    if (pSPARC->kptcomm_index < 0) nproc_kptcomm = size_kptcomm; // let all proc know the size
parallelization.c:219:    gridsizes[0] = pSPARC->Nx; gridsizes[1] = pSPARC->Ny; gridsizes[2] = pSPARC->Nz;
parallelization.c:220:    periods[0] = 1 - pSPARC->BCx;
parallelization.c:221:    periods[1] = 1 - pSPARC->BCy;
parallelization.c:222:    periods[2] = 1 - pSPARC->BCz;
parallelization.c:223:    minsize = pSPARC->order/2;
parallelization.c:228:    pSPARC->npNdx_kptcomm = dims[0];
parallelization.c:229:    pSPARC->npNdy_kptcomm = dims[1];
parallelization.c:230:    pSPARC->npNdz_kptcomm = dims[2];
parallelization.c:234:    printf("\n kpt_topo #%d, kptcomm topology dims = {%d, %d, %d}, nodes/proc = {%.2f,%.2f,%.2f}\n", pSPARC->kptcomm_index,
parallelization.c:239:    if (pSPARC->kptcomm_index >= 0) {
parallelization.c:241:        MPI_Cart_create(pSPARC->kptcomm, 3, dims, periods, 1, &pSPARC->kptcomm_topo); // 1 is to reorder rank
parallelization.c:243:        pSPARC->kptcomm_topo = MPI_COMM_NULL;
parallelization.c:247:    if (pSPARC->kptcomm_topo != MPI_COMM_NULL) {
parallelization.c:248:        MPI_Comm_rank(pSPARC->kptcomm_topo, &rank_kpt_topo);
parallelization.c:249:        MPI_Cart_coords(pSPARC->kptcomm_topo, rank_kpt_topo, 3, coord_kpt_topo);
parallelization.c:252:        pSPARC->Nx_d_kptcomm = block_decompose(gridsizes[0], dims[0], coord_kpt_topo[0]);
parallelization.c:253:        pSPARC->Ny_d_kptcomm = block_decompose(gridsizes[1], dims[1], coord_kpt_topo[1]);
parallelization.c:254:        pSPARC->Nz_d_kptcomm = block_decompose(gridsizes[2], dims[2], coord_kpt_topo[2]);
parallelization.c:255:        pSPARC->Nd_d_kptcomm = pSPARC->Nx_d_kptcomm * pSPARC->Ny_d_kptcomm * pSPARC->Nz_d_kptcomm;
parallelization.c:258:        pSPARC->DMVertices_kptcomm[0] = block_decompose_nstart(gridsizes[0], dims[0], coord_kpt_topo[0]);
parallelization.c:259:        pSPARC->DMVertices_kptcomm[1] = pSPARC->DMVertices_kptcomm[0] + pSPARC->Nx_d_kptcomm - 1;
parallelization.c:260:        pSPARC->DMVertices_kptcomm[2] = block_decompose_nstart(gridsizes[1], dims[1], coord_kpt_topo[1]);
parallelization.c:261:        pSPARC->DMVertices_kptcomm[3] = pSPARC->DMVertices_kptcomm[2] + pSPARC->Ny_d_kptcomm - 1;
parallelization.c:262:        pSPARC->DMVertices_kptcomm[4] = block_decompose_nstart(gridsizes[2], dims[2], coord_kpt_topo[2]);
parallelization.c:263:        pSPARC->DMVertices_kptcomm[5] = pSPARC->DMVertices_kptcomm[4] + pSPARC->Nz_d_kptcomm - 1;
parallelization.c:267:        pSPARC->Nx_d_kptcomm = 0;
parallelization.c:268:        pSPARC->Ny_d_kptcomm = 0;
parallelization.c:269:        pSPARC->Nz_d_kptcomm = 0;
parallelization.c:270:        pSPARC->Nd_d_kptcomm = 0;
parallelization.c:271:        pSPARC->DMVertices_kptcomm[0] = 0;
parallelization.c:272:        pSPARC->DMVertices_kptcomm[1] = 0;
parallelization.c:273:        pSPARC->DMVertices_kptcomm[2] = 0;
parallelization.c:274:        pSPARC->DMVertices_kptcomm[3] = 0;
parallelization.c:275:        pSPARC->DMVertices_kptcomm[4] = 0;
parallelization.c:276:        pSPARC->DMVertices_kptcomm[5] = 0;
parallelization.c:277:        //pSPARC->Nband_bandcomm = 0;
parallelization.c:280:    if (pSPARC->CyclixFlag) {
parallelization.c:282:        pSPARC->Intgwt_kpttopo = (double *)malloc(pSPARC->Nd_d_kptcomm * sizeof(double));
parallelization.c:283:        Integration_weights_cyclix(pSPARC, pSPARC->Intgwt_kpttopo, pSPARC->DMVertices_kptcomm[0], pSPARC->Nx_d_kptcomm, pSPARC->Ny_d_kptcomm, pSPARC->Nz_d_kptcomm);
parallelization.c:286:    if(pSPARC->cell_typ != 0) {
parallelization.c:287:        if(pSPARC->kptcomm_topo != MPI_COMM_NULL) {
parallelization.c:324:                                MPI_Cart_rank(pSPARC->kptcomm_topo,ncoords,&rank_chk); // proc rank corresponding to ncoords_mapped
parallelization.c:332:            MPI_Dist_graph_create_adjacent(pSPARC->kptcomm_topo,nneighb,neighb,(int *)MPI_UNWEIGHTED,nneighb,neighb,(int *)MPI_UNWEIGHTED,MPI_INFO_NULL,0,&pSPARC->kptcomm_topo_dist_graph);
parallelization.c:341:    nproc_kptcomm_topo = pSPARC->npNdx_kptcomm * pSPARC->npNdy_kptcomm * pSPARC->npNdz_kptcomm;
parallelization.c:342:    if (nproc_kptcomm_topo < nproc_kptcomm && pSPARC->kptcomm_index >= 0) {
parallelization.c:348:        MPI_Comm_group(pSPARC->kptcomm, &kptgroup);
parallelization.c:356:        MPI_Comm_create_group(pSPARC->kptcomm, kptgroup_excl, 110, &pSPARC->kptcomm_topo_excl);
parallelization.c:359:        if (pSPARC->kptcomm_topo != MPI_COMM_NULL) {
parallelization.c:360:            MPI_Intercomm_create(pSPARC->kptcomm_topo, 0, pSPARC->kptcomm, nproc_kptcomm_topo, 111, &pSPARC->kptcomm_inter);
parallelization.c:362:            MPI_Intercomm_create(pSPARC->kptcomm_topo_excl, 0, pSPARC->kptcomm, 0, 111, &pSPARC->kptcomm_inter);
parallelization.c:374:        pSPARC->kptcomm_topo_excl = MPI_COMM_NULL;
parallelization.c:375:        pSPARC->kptcomm_inter = MPI_COMM_NULL;
parallelization.c:382:    if (rank_spincomm < size_spincomm - size_spincomm % pSPARC->npkpt) {
parallelization.c:387:    MPI_Comm_split(pSPARC->spincomm, color, pSPARC->kptcomm_index, &pSPARC->kpt_bridge_comm); // TODO: exclude null kptcomms
parallelization.c:394:    if (pSPARC->npband == 0) {
parallelization.c:395:        pSPARC->npband = min(nproc_kptcomm, pSPARC->Nstates); // paral over band as much as possible
parallelization.c:396:    } else if (pSPARC->npband > nproc_kptcomm) { 
parallelization.c:398:        pSPARC->npband = min(nproc_kptcomm, pSPARC->Nstates);
parallelization.c:401:    size_bandcomm = nproc_kptcomm / pSPARC->npband; // size of each bandcomm
parallelization.c:402:    NP_BANDCOMM = pSPARC->npband * size_bandcomm; // number of processors that belong to a bandcomm, others are excluded
parallelization.c:404:    if (rank_kptcomm < NP_BANDCOMM && pSPARC->kptcomm_index != -1) {
parallelization.c:405:        //pSPARC->bandcomm_index = rank_kptcomm / size_bandcomm; // assign processes column-wisely
parallelization.c:406:        pSPARC->bandcomm_index = rank_kptcomm % pSPARC->npband; // assign processes row-wisely
parallelization.c:408:        pSPARC->bandcomm_index = -1; // these processors won't be used to do calculations
parallelization.c:411:    if (pSPARC->bandcomm_index == -1) {
parallelization.c:412:        pSPARC->Nband_bandcomm = 0;
parallelization.c:414:        NB = (pSPARC->Nstates - 1) / pSPARC->npband + 1; // this is equal to ceil(Nstates/npband), for int inputs only
parallelization.c:415:        pSPARC->Nband_bandcomm = pSPARC->bandcomm_index < (pSPARC->Nstates / NB) ? NB : (pSPARC->bandcomm_index == (pSPARC->Nstates / NB) ? (pSPARC->Nstates % NB) : 0);
parallelization.c:419:    if (pSPARC->bandcomm_index == -1) {
parallelization.c:420:        pSPARC->band_start_indx = 0;
parallelization.c:421:    } else if (pSPARC->bandcomm_index <= (pSPARC->Nstates / NB)) {
parallelization.c:422:        pSPARC->band_start_indx = pSPARC->bandcomm_index * NB;
parallelization.c:424:        pSPARC->band_start_indx = pSPARC->Nstates; // TODO: this might be dangerous, consider using 0, instead of Ns here
parallelization.c:426:    pSPARC->band_end_indx = pSPARC->band_start_indx + pSPARC->Nband_bandcomm - 1;
parallelization.c:432:    color = (pSPARC->bandcomm_index >= 0) ? pSPARC->bandcomm_index : INT_MAX;
parallelization.c:433:    MPI_Comm_split(pSPARC->kptcomm, color, 0, &pSPARC->bandcomm);
parallelization.c:443:    MPI_Comm_size(pSPARC->bandcomm, &nproc_bandcomm);
parallelization.c:444:    MPI_Comm_rank(pSPARC->bandcomm, &rank_bandcomm);
parallelization.c:446:    if (pSPARC->bandcomm_index < 0) nproc_bandcomm = size_bandcomm; 
parallelization.c:448:    npNd = pSPARC->npNdx * pSPARC->npNdy * pSPARC->npNdz;
parallelization.c:449:    gridsizes[0] = pSPARC->Nx;
parallelization.c:450:    gridsizes[1] = pSPARC->Ny;
parallelization.c:451:    gridsizes[2] = pSPARC->Nz;
parallelization.c:452:    minsize = pSPARC->order/2;
parallelization.c:458:        pSPARC->npNdx = dims[0];
parallelization.c:459:        pSPARC->npNdy = dims[1];
parallelization.c:460:        pSPARC->npNdz = dims[2];
parallelization.c:461:    } else if (npNd < 0 || npNd > nproc_bandcomm || pSPARC->Nx / pSPARC->npNdx < minsize ||
parallelization.c:462:               pSPARC->Ny / pSPARC->npNdy < minsize || pSPARC->Nz / pSPARC->npNdz < minsize) {
parallelization.c:466:        pSPARC->npNdx = dims[0];
parallelization.c:467:        pSPARC->npNdy = dims[1];
parallelization.c:468:        pSPARC->npNdz = dims[2];
parallelization.c:470:        dims[0] = pSPARC->npNdx;
parallelization.c:471:        dims[1] = pSPARC->npNdy;
parallelization.c:472:        dims[2] = pSPARC->npNdz;
parallelization.c:476:    npNd = pSPARC->npNdx * pSPARC->npNdy * pSPARC->npNdz;
parallelization.c:477:    pSPARC->npNd = npNd;
parallelization.c:479:    periods[0] = 1 - pSPARC->BCx;
parallelization.c:480:    periods[1] = 1 - pSPARC->BCy;
parallelization.c:481:    periods[2] = 1 - pSPARC->BCz;
parallelization.c:483:    if (!rank) printf("rank = %d, dmcomm dims = {%d, %d, %d}\n", rank, pSPARC->npNdx, pSPARC->npNdy, pSPARC->npNdz);
parallelization.c:488:    if (pSPARC->bandcomm_index != -1) {
parallelization.c:489:        MPI_Cart_create(pSPARC->bandcomm, 3, dims, periods, 1, &pSPARC->dmcomm); // 1 is to reorder rank
parallelization.c:491:        pSPARC->dmcomm = MPI_COMM_NULL;
parallelization.c:495:        pSPARC->is_domain_uniform = 0; // not uniform
parallelization.c:497:        pSPARC->is_domain_uniform = 1; // uniform
parallelization.c:499:    pSPARC->is_domain_uniform = 0; // turn off uniform, this feature will not be used anymore
parallelization.c:502:        gridsizes[0],gridsizes[1],gridsizes[2],pSPARC->Nstates,dims[0],dims[1],dims[2]);
parallelization.c:505:    if (pSPARC->dmcomm != MPI_COMM_NULL && pSPARC->bandcomm_index != -1) {
parallelization.c:506:        MPI_Comm_rank(pSPARC->dmcomm, &rank_dmcomm);
parallelization.c:507:        MPI_Cart_coords(pSPARC->dmcomm, rank_dmcomm, 3, coord_dmcomm);
parallelization.c:510:        pSPARC->Nx_d_dmcomm = block_decompose(gridsizes[0], dims[0], coord_dmcomm[0]);
parallelization.c:511:        pSPARC->Ny_d_dmcomm = block_decompose(gridsizes[1], dims[1], coord_dmcomm[1]);
parallelization.c:512:        pSPARC->Nz_d_dmcomm = block_decompose(gridsizes[2], dims[2], coord_dmcomm[2]);
parallelization.c:513:        pSPARC->Nd_d_dmcomm = pSPARC->Nx_d_dmcomm * pSPARC->Ny_d_dmcomm * pSPARC->Nz_d_dmcomm;
parallelization.c:516:        pSPARC->DMVertices_dmcomm[0] = block_decompose_nstart(gridsizes[0], dims[0], coord_dmcomm[0]);
parallelization.c:517:        pSPARC->DMVertices_dmcomm[1] = pSPARC->DMVertices_dmcomm[0] + pSPARC->Nx_d_dmcomm - 1;
parallelization.c:518:        pSPARC->DMVertices_dmcomm[2] = block_decompose_nstart(gridsizes[1], dims[1], coord_dmcomm[1]);
parallelization.c:519:        pSPARC->DMVertices_dmcomm[3] = pSPARC->DMVertices_dmcomm[2] + pSPARC->Ny_d_dmcomm - 1;
parallelization.c:520:        pSPARC->DMVertices_dmcomm[4] = block_decompose_nstart(gridsizes[2], dims[2], coord_dmcomm[2]);
parallelization.c:521:        pSPARC->DMVertices_dmcomm[5] = pSPARC->DMVertices_dmcomm[4] + pSPARC->Nz_d_dmcomm - 1;
parallelization.c:526:        pSPARC->Nx_d_dmcomm = 0;
parallelization.c:527:        pSPARC->Ny_d_dmcomm = 0;
parallelization.c:528:        pSPARC->Nz_d_dmcomm = 0;
parallelization.c:529:        pSPARC->Nd_d_dmcomm = 0;
parallelization.c:530:        pSPARC->DMVertices_dmcomm[0] = 0;
parallelization.c:531:        pSPARC->DMVertices_dmcomm[1] = 0;
parallelization.c:532:        pSPARC->DMVertices_dmcomm[2] = 0;
parallelization.c:533:        pSPARC->DMVertices_dmcomm[3] = 0;
parallelization.c:534:        pSPARC->DMVertices_dmcomm[4] = 0;
parallelization.c:535:        pSPARC->DMVertices_dmcomm[5] = 0;
parallelization.c:536:        //pSPARC->Nband_bandcomm = 0;
parallelization.c:539:    if (pSPARC->PrintEnergyDensFlag == 1) {
parallelization.c:540:        int ncopy = pSPARC->Nspden/2*2+1;
parallelization.c:541:        pSPARC->KineticRho = (double *) calloc(pSPARC->Nd_d_dmcomm * ncopy, sizeof(double));
parallelization.c:542:        assert(pSPARC->KineticRho != NULL);
parallelization.c:543:        if (pSPARC->usefock > 0) {
parallelization.c:544:            pSPARC->ExxRho = (double *) calloc(pSPARC->Nd_d_dmcomm * ncopy, sizeof(double));
parallelization.c:545:            pSPARC->ExxRho_approx = (double *) calloc(pSPARC->Nd_d_dmcomm * ncopy, sizeof(double));
parallelization.c:546:            assert(pSPARC->ExxRho != NULL && pSPARC->ExxRho_approx != NULL);
parallelization.c:555:    if (pSPARC->CyclixFlag) {
parallelization.c:557:        pSPARC->Intgwt_psi = (double *)malloc(pSPARC->Nd_d_dmcomm * sizeof(double));
parallelization.c:558:        Integration_weights_cyclix(pSPARC, pSPARC->Intgwt_psi, pSPARC->DMVertices_dmcomm[0], pSPARC->Nx_d_dmcomm, pSPARC->Ny_d_dmcomm, pSPARC->Nz_d_dmcomm);
parallelization.c:562:    // TODO: Modify the communicator based on number of non zero enteries in off diagonal of pSPARC->lapcT
parallelization.c:564:    if(pSPARC->cell_typ != 0) {
parallelization.c:565:        if(pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:603:                                MPI_Cart_rank(pSPARC->dmcomm,ncoords,&rank_chk); // proc rank corresponding to ncoords_mapped
parallelization.c:611:            MPI_Dist_graph_create_adjacent(pSPARC->dmcomm,nneighb,neighb,(int *)MPI_UNWEIGHTED,nneighb,neighb,(int *)MPI_UNWEIGHTED,MPI_INFO_NULL,0,&pSPARC->comm_dist_graph_psi); // creates a distributed graph topology (adjacent, cartesian cubical)
parallelization.c:612:            //pSPARC->dmcomm_phi = pSPARC->comm_dist_graph_phi;
parallelization.c:638:    if (pSPARC->bandcomm_index == -1 || pSPARC->dmcomm == MPI_COMM_NULL || pSPARC->kptcomm_index == -1)   color = INT_MAX;
parallelization.c:645:    MPI_Comm_split(pSPARC->kptcomm, color, pSPARC->bandcomm_index, &pSPARC->blacscomm);
parallelization.c:652:    int proc_active = (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) ? 0 : 1;
parallelization.c:654:    MPI_Comm_split(pSPARC->kptcomm, proc_active, rank_kptcomm, &pSPARC->kptcomm_active);
parallelization.c:663:    size_blacscomm = pSPARC->is_domain_uniform ? (pSPARC->npband*pSPARC->npNd) : pSPARC->npband;
parallelization.c:664:    Nd_blacscomm = pSPARC->is_domain_uniform ? pSPARC->Nd : pSPARC->Nd_d_dmcomm;
parallelization.c:665:    Nd_blacscomm *= pSPARC->Nspinor;
parallelization.c:667:    if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:671:        if (pSPARC->is_domain_uniform) {
parallelization.c:678:            //MPI_Allgather(&rank, 1, MPI_INT, usermap, 1, MPI_INT, pSPARC->blacscomm);
parallelization.c:680:                usermap[i] = usermap_0[i] = usermap_1[i] = i + rank - rank_kptcomm + rank_dmcomm * pSPARC->npband;
parallelization.c:686:        bandsizes[0] = (pSPARC->Nd-1)/pSPARC->npNd+1;
parallelization.c:687:        bandsizes[1] = pSPARC->Nstates;
parallelization.c:688:        //SPARC_Dims_create(pSPARC->npband, 2, bandsizes, 1, dims, &ierr);
parallelization.c:709:        printf("Nd_blacscomm %d, Nstates %d \n", Nd_blacscomm, pSPARC->Nstates);
parallelization.c:717:    Cblacs_get( -1, 0, &pSPARC->ictxt_blacs );
parallelization.c:718:    if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:719:        if (pSPARC->is_domain_uniform) {
parallelization.c:721:            for (j = 0; j < pSPARC->npband; j++) {
parallelization.c:722:                for (i = 0; i < pSPARC->npNd; i++) {
parallelization.c:723:                    usermap_0[j*pSPARC->npNd+i] = usermap[i*pSPARC->npband+j];
parallelization.c:726:            Cblacs_gridmap( &pSPARC->ictxt_blacs, usermap_0, pSPARC->npNd, pSPARC->npNd, pSPARC->npband); // row topology
parallelization.c:728:            Cblacs_gridmap( &pSPARC->ictxt_blacs, usermap_0, 1, 1, pSPARC->npband); // row topology
parallelization.c:731:        Cblacs_gridmap( &pSPARC->ictxt_blacs, usermap_0, 1, 1, dims[0] * dims[1]); // row topology
parallelization.c:732:        // pSPARC->ictxt_blacs = -1;
parallelization.c:737:    Cblacs_get( -1, 0, &pSPARC->ictxt_blacs_topo );
parallelization.c:738:    if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:746:    Cblacs_gridmap( &pSPARC->ictxt_blacs_topo, usermap_1, dims[0], dims[0], dims[1] ); // Cart topology
parallelization.c:751:    Cblacs_gridinfo( pSPARC->ictxt_blacs, &nprow, &npcol, &myrow, &mycol );
parallelization.c:755:    nb = (pSPARC->Nstates - 1) / pSPARC->npband + 1; // equal to ceil(Nstates/npband), for int only
parallelization.c:758:    if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:759:        descinit_(&pSPARC->desc_orbitals[0], &Nd_blacscomm, &pSPARC->Nstates,
parallelization.c:760:                  &mb, &nb, &ZERO, &ZERO, &pSPARC->ictxt_blacs, &llda, &info);
parallelization.c:763:            pSPARC->desc_orbitals[i] = -1;
parallelization.c:767:    temp_c = numroc_( &pSPARC->Nstates, &nb, &mycol, &ZERO, &npcol);
parallelization.c:769:    if (!rank) printf("rank = %2d, my blacs rank = %d, BLCYC size (%d, %d), actual size (%d, %d)\n", rank, pSPARC->bandcomm_index, temp_r, temp_c, Nd_blacscomm, pSPARC->Nband_bandcomm);
parallelization.c:772:    Cblacs_gridinfo( pSPARC->ictxt_blacs_topo, &nprow, &npcol, &myrow, &mycol );
parallelization.c:773:    pSPARC->nprow_ictxt_blacs_topo = nprow;
parallelization.c:774:    pSPARC->npcol_ictxt_blacs_topo = npcol;
parallelization.c:779:    nb = max(1, pSPARC->Nstates / dims[1]); // this is only block, no cyclic!
parallelization.c:782:    if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:783:        pSPARC->nr_orb_BLCYC = numroc_( &Nd_blacscomm, &mb, &myrow, &ZERO, &nprow);
parallelization.c:784:        pSPARC->nc_orb_BLCYC = numroc_( &pSPARC->Nstates, &nb, &mycol, &ZERO, &npcol);
parallelization.c:786:        pSPARC->nr_orb_BLCYC = 1;
parallelization.c:787:        pSPARC->nc_orb_BLCYC = 1;
parallelization.c:789:    llda = max(1, pSPARC->nr_orb_BLCYC);
parallelization.c:790:    if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:791:        descinit_(&pSPARC->desc_orb_BLCYC[0], &Nd_blacscomm, &pSPARC->Nstates,
parallelization.c:792:                  &mb, &nb, &ZERO, &ZERO, &pSPARC->ictxt_blacs_topo, &llda, &info);
parallelization.c:795:            pSPARC->desc_orb_BLCYC[i] = -1;
parallelization.c:799:    if (pSPARC->isGammaPoint){
parallelization.c:800:        if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:801:            pSPARC->Xorb_BLCYC = (double *)malloc(pSPARC->nr_orb_BLCYC * pSPARC->nc_orb_BLCYC * sizeof(double));
parallelization.c:802:            pSPARC->Yorb_BLCYC = (double *)malloc(pSPARC->nr_orb_BLCYC * pSPARC->nc_orb_BLCYC * sizeof(double));
parallelization.c:804:            pSPARC->Xorb_BLCYC = (double *)malloc(1 * sizeof(double));
parallelization.c:805:            pSPARC->Yorb_BLCYC = (double *)malloc(1 * sizeof(double));
parallelization.c:808:        if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:809:            pSPARC->Xorb_BLCYC_kpt = (double complex *)malloc(pSPARC->nr_orb_BLCYC * pSPARC->nc_orb_BLCYC * sizeof(double complex));
parallelization.c:810:            pSPARC->Yorb_BLCYC_kpt = (double complex *)malloc(pSPARC->nr_orb_BLCYC * pSPARC->nc_orb_BLCYC * sizeof(double complex));
parallelization.c:812:            pSPARC->Xorb_BLCYC_kpt = (double complex *)malloc(1 * sizeof(double complex));
parallelization.c:813:            pSPARC->Yorb_BLCYC_kpt = (double complex *)malloc(1 * sizeof(double complex));
parallelization.c:826:    int MAX_NS = pSPARC->eig_serial_maxns;
parallelization.c:827:    pSPARC->useLAPACK = (pSPARC->Nstates <= MAX_NS) ? 1 : 0;
parallelization.c:832:    if (pSPARC->useLAPACK == 1) {
parallelization.c:834:        mb = nb = pSPARC->Nstates;
parallelization.c:838:        mb = nb = pSPARC->eig_paral_blksz;
parallelization.c:839:        mbQ = nbQ = pSPARC->eig_paral_blksz; // block size for storing subspace eigenvectors
parallelization.c:844:    if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:845:        pSPARC->nr_Hp_BLCYC = pSPARC->nr_Mp_BLCYC = numroc_( &pSPARC->Nstates, &mb, &myrow, &ZERO, &nprow);
parallelization.c:846:        pSPARC->nr_Hp_BLCYC = pSPARC->nr_Mp_BLCYC = max(1, pSPARC->nr_Mp_BLCYC);
parallelization.c:847:        pSPARC->nc_Hp_BLCYC = pSPARC->nc_Mp_BLCYC = numroc_( &pSPARC->Nstates, &nb, &mycol, &ZERO, &npcol);
parallelization.c:848:        pSPARC->nc_Hp_BLCYC = pSPARC->nc_Mp_BLCYC = max(1, pSPARC->nc_Mp_BLCYC);
parallelization.c:849:        pSPARC->nr_Q_BLCYC = numroc_( &pSPARC->Nstates, &mbQ, &myrow, &ZERO, &nprow);
parallelization.c:850:        pSPARC->nc_Q_BLCYC = numroc_( &pSPARC->Nstates, &nbQ, &mycol, &ZERO, &npcol);
parallelization.c:852:        pSPARC->nr_Hp_BLCYC = pSPARC->nc_Hp_BLCYC = 1;
parallelization.c:853:        pSPARC->nr_Mp_BLCYC = pSPARC->nc_Mp_BLCYC = 1;
parallelization.c:854:        pSPARC->nr_Q_BLCYC  = pSPARC->nc_Q_BLCYC  = 1;
parallelization.c:857:    llda = max(1, pSPARC->nr_Hp_BLCYC);
parallelization.c:858:    lldaQ= max(1, pSPARC->nr_Q_BLCYC);
parallelization.c:859:    if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:860:        descinit_(&pSPARC->desc_Hp_BLCYC[0], &pSPARC->Nstates, &pSPARC->Nstates,
parallelization.c:861:                  &mb, &nb, &ZERO, &ZERO, &pSPARC->ictxt_blacs_topo, &llda, &info);
parallelization.c:863:            //pSPARC->desc_Q_BLCYC[i] = pSPARC->desc_Mp_BLCYC[i] = pSPARC->desc_Hp_BLCYC[i];
parallelization.c:864:            pSPARC->desc_Mp_BLCYC[i] = pSPARC->desc_Hp_BLCYC[i];
parallelization.c:866:        descinit_(&pSPARC->desc_Q_BLCYC[0], &pSPARC->Nstates, &pSPARC->Nstates,
parallelization.c:867:                  &mbQ, &nbQ, &ZERO, &ZERO, &pSPARC->ictxt_blacs_topo, &lldaQ, &info);
parallelization.c:870:            pSPARC->desc_Q_BLCYC[i] = pSPARC->desc_Mp_BLCYC[i] = pSPARC->desc_Hp_BLCYC[i] = -1;
parallelization.c:874:    if (!rank) printf("rank = %d, nr_Hp = %d, nc_Hp = %d\n", rank, pSPARC->nr_Hp_BLCYC, pSPARC->nc_Hp_BLCYC);
parallelization.c:878:    if (pSPARC->isGammaPoint){
parallelization.c:879:        pSPARC->Hp = (double *)calloc(pSPARC->nr_Hp_BLCYC * pSPARC->nc_Hp_BLCYC , sizeof(double));
parallelization.c:880:        pSPARC->Mp = (double *)calloc(pSPARC->nr_Mp_BLCYC * pSPARC->nc_Mp_BLCYC , sizeof(double));
parallelization.c:881:        pSPARC->Q  = (double *)calloc(pSPARC->nr_Q_BLCYC * pSPARC->nc_Q_BLCYC , sizeof(double));
parallelization.c:882:        if (pSPARC->CyclixFlag) {
parallelization.c:883:            pSPARC->vl = (double *) calloc(pSPARC->nr_Hp_BLCYC * pSPARC->nc_Hp_BLCYC, sizeof(double));
parallelization.c:884:            pSPARC->vr = (double *) calloc(pSPARC->nr_Hp_BLCYC * pSPARC->nc_Hp_BLCYC, sizeof(double));
parallelization.c:885:            pSPARC->lambda_temp1 = (double *)calloc(pSPARC->Nstates, sizeof(double));
parallelization.c:886:            pSPARC->lambda_temp2 = (double *)calloc(pSPARC->Nstates, sizeof(double));
parallelization.c:887:            pSPARC->lambda_temp3 = (double *)calloc(pSPARC->Nstates, sizeof(double));
parallelization.c:890:        pSPARC->Hp_kpt = (double complex *) calloc(pSPARC->nr_Hp_BLCYC * pSPARC->nc_Hp_BLCYC, sizeof(double complex));
parallelization.c:891:        pSPARC->Mp_kpt = (double complex *) calloc(pSPARC->nr_Mp_BLCYC * pSPARC->nc_Mp_BLCYC, sizeof(double complex));
parallelization.c:892:        pSPARC->Q_kpt  = (double complex *) calloc(pSPARC->nr_Q_BLCYC * pSPARC->nc_Q_BLCYC, sizeof(double complex));
parallelization.c:893:        if (pSPARC->CyclixFlag) {
parallelization.c:894:            pSPARC->vl_kpt = (double complex *) calloc(pSPARC->nr_Hp_BLCYC * pSPARC->nc_Hp_BLCYC, sizeof(double complex));
parallelization.c:895:            pSPARC->vr_kpt = (double complex *) calloc(pSPARC->nr_Hp_BLCYC * pSPARC->nc_Hp_BLCYC, sizeof(double complex));
parallelization.c:896:            pSPARC->lambda_temp1_kpt = (double complex *)calloc(pSPARC->Nstates, sizeof(double complex));
parallelization.c:897:            pSPARC->lambda_temp2_kpt = (double complex *)calloc(pSPARC->Nstates, sizeof(double complex));
parallelization.c:902:    pSPARC->useLAPACK = 1;
parallelization.c:909:    npNd = pSPARC->npNdx_phi * pSPARC->npNdy_phi * pSPARC->npNdz_phi;
parallelization.c:910:    gridsizes[0] = pSPARC->Nx;
parallelization.c:911:    gridsizes[1] = pSPARC->Ny;
parallelization.c:912:    gridsizes[2] = pSPARC->Nz;
parallelization.c:913:    minsize = pSPARC->order/2;
parallelization.c:923:        pSPARC->npNdx_phi = dims[0];
parallelization.c:924:        pSPARC->npNdy_phi = dims[1];
parallelization.c:925:        pSPARC->npNdz_phi = dims[2];
parallelization.c:926:    } else if (npNd < 0 || npNd > nproc || pSPARC->Nx / pSPARC->npNdx_phi < minsize ||
parallelization.c:927:               pSPARC->Ny / pSPARC->npNdy_phi < minsize || pSPARC->Nz / pSPARC->npNdz_phi < minsize) {
parallelization.c:935:        pSPARC->npNdx_phi = dims[0];
parallelization.c:936:        pSPARC->npNdy_phi = dims[1];
parallelization.c:937:        pSPARC->npNdz_phi = dims[2];
parallelization.c:939:        dims[0] = pSPARC->npNdx_phi;
parallelization.c:940:        dims[1] = pSPARC->npNdy_phi;
parallelization.c:941:        dims[2] = pSPARC->npNdz_phi;
parallelization.c:945:    npNd = pSPARC->npNdx_phi * pSPARC->npNdy_phi * pSPARC->npNdz_phi;
parallelization.c:947:    periods[0] = 1 - pSPARC->BCx;
parallelization.c:948:    periods[1] = 1 - pSPARC->BCy;
parallelization.c:949:    periods[2] = 1 - pSPARC->BCz;
parallelization.c:956:    MPI_Cart_create(MPI_COMM_WORLD, 3, dims, periods, 1, &pSPARC->dmcomm_phi); // 1 is to reorder rank
parallelization.c:964:                   nproc,pSPARC->Nx,pSPARC->Ny,pSPARC->Nz,dims[0]*dims[1]*dims[2],dims[0],dims[1],dims[2],pSPARC->Nx/(double)dims[0],pSPARC->Ny/(double)dims[1],pSPARC->Nz/(double)dims[2]);
parallelization.c:969:    // pSPARC->DMVertices[6] = [xs,xe,ys,ye,zs,ze]
parallelization.c:971:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
parallelization.c:972:        MPI_Comm_rank(pSPARC->dmcomm_phi, &rank_dmcomm);
parallelization.c:973:        MPI_Cart_coords(pSPARC->dmcomm_phi, rank_dmcomm, 3, coord_dmcomm);
parallelization.c:975:        gridsizes[0] = pSPARC->Nx;
parallelization.c:976:        gridsizes[1] = pSPARC->Ny;
parallelization.c:977:        gridsizes[2] = pSPARC->Nz;
parallelization.c:980:        pSPARC->Nx_d = block_decompose(gridsizes[0], dims[0], coord_dmcomm[0]);
parallelization.c:981:        pSPARC->Ny_d = block_decompose(gridsizes[1], dims[1], coord_dmcomm[1]);
parallelization.c:982:        pSPARC->Nz_d = block_decompose(gridsizes[2], dims[2], coord_dmcomm[2]);
parallelization.c:983:        pSPARC->Nd_d = pSPARC->Nx_d * pSPARC->Ny_d * pSPARC->Nz_d;
parallelization.c:986:        pSPARC->DMVertices[0] = block_decompose_nstart(gridsizes[0], dims[0], coord_dmcomm[0]);
parallelization.c:987:        pSPARC->DMVertices[1] = pSPARC->DMVertices[0] + pSPARC->Nx_d - 1;
parallelization.c:988:        pSPARC->DMVertices[2] = block_decompose_nstart(gridsizes[1], dims[1], coord_dmcomm[1]);
parallelization.c:989:        pSPARC->DMVertices[3] = pSPARC->DMVertices[2] + pSPARC->Ny_d - 1;
parallelization.c:990:        pSPARC->DMVertices[4] = block_decompose_nstart(gridsizes[2], dims[2], coord_dmcomm[2]);
parallelization.c:991:        pSPARC->DMVertices[5] = pSPARC->DMVertices[4] + pSPARC->Nz_d - 1;
parallelization.c:995:        pSPARC->Nx_d = 0;
parallelization.c:996:        pSPARC->Ny_d = 0;
parallelization.c:997:        pSPARC->Nz_d = 0;
parallelization.c:998:        pSPARC->Nd_d = 0;
parallelization.c:999:        pSPARC->DMVertices[0] = 0;
parallelization.c:1000:        pSPARC->DMVertices[1] = 0;
parallelization.c:1001:        pSPARC->DMVertices[2] = 0;
parallelization.c:1002:        pSPARC->DMVertices[3] = 0;
parallelization.c:1003:        pSPARC->DMVertices[4] = 0;
parallelization.c:1004:        pSPARC->DMVertices[5] = 0;
parallelization.c:1008:    // TODO: Modify the communicator based on number of non zero enteries in off diagonal of pSPARC->lapcT
parallelization.c:1010:    if (pSPARC->CyclixFlag) {
parallelization.c:1012:        pSPARC->Intgwt_phi = (double *) malloc(pSPARC->Nd_d * sizeof(double));
parallelization.c:1013:        Integration_weights_cyclix(pSPARC, pSPARC->Intgwt_phi, pSPARC->DMVertices[0], pSPARC->Nx_d, pSPARC->Ny_d, pSPARC->Nz_d);
parallelization.c:1015:    if(pSPARC->cell_typ != 0) {
parallelization.c:1016:        if(pSPARC->dmcomm_phi != MPI_COMM_NULL) {
parallelization.c:1053:                                MPI_Cart_rank(pSPARC->dmcomm_phi,ncoords,&rank_chk); // proc rank corresponding to ncoords_mapped
parallelization.c:1061:            MPI_Dist_graph_create_adjacent(pSPARC->dmcomm_phi,nneighb,neighb,(int *)MPI_UNWEIGHTED,nneighb,neighb,(int *)MPI_UNWEIGHTED,MPI_INFO_NULL,0,&pSPARC->comm_dist_graph_phi); // creates a distributed graph topology (adjacent, cartesian cubical)
parallelization.c:1062:            //pSPARC->dmcomm_phi = pSPARC->comm_dist_graph_phi;
parallelization.c:1072:    if (pSPARC->PrintEnergyDensFlag == 1) {
parallelization.c:1073:        pSPARC->ExcRho = (double *) calloc( pSPARC->Nd_d, sizeof(double));
parallelization.c:1074:        assert(pSPARC->ExcRho != NULL);
parallelization.c:1078:    pSPARC->lambda = (double *)calloc(pSPARC->Nstates * pSPARC->Nkpts_kptcomm * pSPARC->Nspin_spincomm, sizeof(double));
parallelization.c:1079:    assert(pSPARC->lambda != NULL);
parallelization.c:1081:    if (pSPARC->CyclixFlag) {
parallelization.c:1082:        pSPARC->lambda_sorted = (double *)calloc(pSPARC->Nstates * pSPARC->Nkpts_kptcomm * pSPARC->Nspin_spincomm, sizeof(double));
parallelization.c:1084:        pSPARC->lambda_sorted = pSPARC->lambda;
parallelization.c:1087:    pSPARC->tr_Hp_k = (double *)calloc(pSPARC->Nkpts_kptcomm * pSPARC->Nspin_spincomm, sizeof(double));
parallelization.c:1088:    assert(pSPARC->tr_Hp_k != NULL);
parallelization.c:1091:    pSPARC->occ = (double *)calloc(pSPARC->Nstates * pSPARC->Nkpts_kptcomm * pSPARC->Nspin_spincomm, sizeof(double));
parallelization.c:1092:    assert(pSPARC->occ != NULL);
parallelization.c:1094:    if (pSPARC->CyclixFlag) {
parallelization.c:1095:        pSPARC->occ_sorted = (double *)calloc(pSPARC->Nstates * pSPARC->Nkpts_kptcomm * pSPARC->Nspin_spincomm, sizeof(double));
parallelization.c:1097:        pSPARC->occ_sorted = pSPARC->occ;
parallelization.c:1101:    pSPARC->forces = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
parallelization.c:1102:    assert(pSPARC->forces != NULL);
parallelization.c:1104:    // if (pSPARC->bandcomm_index != -1 && pSPARC->dmcomm != MPI_COMM_NULL) {
parallelization.c:1105:    //     pSPARC->scfElectronDens = (double *) calloc(pSPARC->Nd_d_dmcomm * (2*pSPARC->Nspin-1), sizeof(double));
parallelization.c:1106:    //    assert(pSPARC->scfElectronDens != NULL);
parallelization.c:1109:    if (pSPARC->dmcomm != MPI_COMM_NULL && pSPARC->bandcomm_index >= 0) {
parallelization.c:1110:        pSPARC->Veff_loc_dmcomm = (double *)malloc( pSPARC->Nd_d_dmcomm * pSPARC->Nspden * sizeof(double) );
parallelization.c:1111:        assert(pSPARC->Veff_loc_dmcomm != NULL);
parallelization.c:1114:    //if (pSPARC->npkpt >= 1 ) { //&& pSPARC->kptcomm_topo != MPI_COMM_NULL
parallelization.c:1115:    pSPARC->Veff_loc_kptcomm_topo = (double *)malloc( pSPARC->Nd_d_kptcomm * pSPARC->Nspden * sizeof(double) );
parallelization.c:1116:    assert(pSPARC->Veff_loc_kptcomm_topo != NULL);
parallelization.c:1120:    if (pSPARC->isGammaPoint && pSPARC->kptcomm_topo != MPI_COMM_NULL) {
parallelization.c:1121:        pSPARC->Lanczos_x0 = (double *)malloc(pSPARC->Nd_d_kptcomm * sizeof(double));
parallelization.c:1122:        assert(pSPARC->Lanczos_x0 != NULL);
parallelization.c:1125:    if (pSPARC->isGammaPoint != 1 && pSPARC->kptcomm_topo != MPI_COMM_NULL) {
parallelization.c:1126:        pSPARC->Lanczos_x0_complex = (double complex *)malloc(pSPARC->Nd_d_kptcomm * pSPARC->Nspinor * sizeof(double complex));
parallelization.c:1127:        assert(pSPARC->Lanczos_x0_complex != NULL);
parallelization.c:1130:    if (pSPARC->dmcomm_phi != MPI_COMM_NULL) {
parallelization.c:1132:        DMnx = pSPARC->DMVertices[1] - pSPARC->DMVertices[0] + 1;
parallelization.c:1133:        DMny = pSPARC->DMVertices[3] - pSPARC->DMVertices[2] + 1;
parallelization.c:1134:        DMnz = pSPARC->DMVertices[5] - pSPARC->DMVertices[4] + 1;
parallelization.c:1137:        int ncopy = pSPARC->Nspden/2*2+1;
parallelization.c:1138:        pSPARC->electronDens_at = (double *)malloc( DMnd * ncopy * sizeof(double) );
parallelization.c:1139:        pSPARC->electronDens_core = (double *)calloc( DMnd * ncopy, sizeof(double) );
parallelization.c:1140:        pSPARC->psdChrgDens = (double *)malloc( DMnd * sizeof(double) );
parallelization.c:1141:        pSPARC->psdChrgDens_ref = (double *)malloc( DMnd * sizeof(double) );
parallelization.c:1142:        pSPARC->Vc = (double *)malloc( DMnd * sizeof(double) );
parallelization.c:1143:        assert(pSPARC->electronDens_core != NULL);
parallelization.c:1144:        assert(pSPARC->electronDens_at != NULL && pSPARC->psdChrgDens != NULL &&
parallelization.c:1145:               pSPARC->psdChrgDens_ref != NULL && pSPARC->Vc != NULL);
parallelization.c:1147:        pSPARC->electronDens = (double *)malloc( DMnd * ncopy * sizeof(double) );
parallelization.c:1148:        assert(pSPARC->electronDens != NULL);
parallelization.c:1150:        if(pSPARC->MDFlag == 1 || pSPARC->RelaxFlag == 1 || pSPARC->RelaxFlag == 3){
parallelization.c:1151:            pSPARC->delectronDens = (double *)malloc( DMnd * sizeof(double) );
parallelization.c:1152:            assert(pSPARC->delectronDens != NULL);
parallelization.c:1153:            pSPARC->delectronDens_0dt = (double *)malloc( DMnd * sizeof(double) );
parallelization.c:1154:            assert(pSPARC->delectronDens_0dt != NULL);
parallelization.c:1155:            pSPARC->delectronDens_1dt = (double *)malloc( DMnd * sizeof(double) );
parallelization.c:1156:            assert(pSPARC->delectronDens_1dt != NULL);
parallelization.c:1157:            pSPARC->delectronDens_2dt = (double *)malloc( DMnd * sizeof(double) );
parallelization.c:1158:            assert(pSPARC->delectronDens_2dt != NULL);
parallelization.c:1159:            pSPARC->atom_pos_nm = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
parallelization.c:1160:            assert(pSPARC->atom_pos_nm != NULL);
parallelization.c:1161:            pSPARC->atom_pos_0dt = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
parallelization.c:1162:            assert(pSPARC->atom_pos_0dt != NULL);
parallelization.c:1163:            pSPARC->atom_pos_1dt = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
parallelization.c:1164:            assert(pSPARC->atom_pos_1dt != NULL);
parallelization.c:1165:            pSPARC->atom_pos_2dt = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
parallelization.c:1166:            assert(pSPARC->atom_pos_2dt != NULL);
parallelization.c:1169:        pSPARC->elecstPotential = (double *)malloc( DMnd * sizeof(double) );
parallelization.c:1170:        assert(pSPARC->elecstPotential != NULL);
parallelization.c:1173:        pSPARC->XCPotential = (double *)malloc( DMnd * pSPARC->Nspden * sizeof(double) );
parallelization.c:1174:        assert(pSPARC->XCPotential != NULL);
parallelization.c:1177:        pSPARC->e_xc = (double *)malloc( DMnd * sizeof(double) );
parallelization.c:1178:        assert(pSPARC->e_xc != NULL);
parallelization.c:1181:        if(strcmp(pSPARC->XC,"GGA_PBE") == 0 || strcmp(pSPARC->XC, "GGA_CONV_PBE") == 0 || strcmp(pSPARC->XC,"GGA_RPBE") == 0 || strcmp(pSPARC->XC,"GGA_PBEsol") == 0
parallelization.c:1182:         || strcmp(pSPARC->XC,"PBE0") == 0 || strcmp(pSPARC->XC,"HF") == 0 || strcmp(pSPARC->XC,"HSE") == 0 || strcmp(pSPARC->XC,"SCAN") == 0 
parallelization.c:1183:         || strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0){
parallelization.c:1184:            int ncopy = pSPARC->Nspden/2*2+1;
parallelization.c:1185:            pSPARC->Dxcdgrho = (double *)malloc( DMnd * ncopy * sizeof(double) );
parallelization.c:1186:            assert(pSPARC->Dxcdgrho != NULL);
parallelization.c:1189:        pSPARC->Veff_loc_dmcomm_phi = (double *)malloc(DMnd * pSPARC->Nspden * sizeof(double));
parallelization.c:1190:        pSPARC->mixing_hist_xk      = (double *)malloc(DMnd * pSPARC->Nspden * sizeof(double));
parallelization.c:1191:        pSPARC->mixing_hist_fk      = (double *)calloc(DMnd * pSPARC->Nspden , sizeof(double));
parallelization.c:1192:        pSPARC->mixing_hist_fkm1    = (double *)calloc(DMnd * pSPARC->Nspden , sizeof(double));
parallelization.c:1193:        pSPARC->mixing_hist_xkm1    = (double *)malloc(DMnd * pSPARC->Nspden * sizeof(double));
parallelization.c:1194:        pSPARC->mixing_hist_Xk      = (double *)malloc(DMnd * pSPARC->Nspden * pSPARC->MixingHistory * sizeof(double));
parallelization.c:1195:        pSPARC->mixing_hist_Fk      = (double *)malloc(DMnd * pSPARC->Nspden * pSPARC->MixingHistory * sizeof(double));
parallelization.c:1196:        assert(pSPARC->Veff_loc_dmcomm_phi != NULL && pSPARC->mixing_hist_xk   != NULL &&
parallelization.c:1197:               pSPARC->mixing_hist_fk      != NULL && pSPARC->mixing_hist_fkm1 != NULL &&
parallelization.c:1198:               pSPARC->mixing_hist_xkm1    != NULL && pSPARC->mixing_hist_Xk   != NULL &&
parallelization.c:1199:               pSPARC->mixing_hist_Fk      != NULL);
parallelization.c:1201:        if (pSPARC->MixingVariable == 1) { // for potential mixing, the history is stored already
parallelization.c:1202:            pSPARC->Veff_loc_dmcomm_phi_in = pSPARC->mixing_hist_xk;
parallelization.c:1204:            pSPARC->Veff_loc_dmcomm_phi_in = (double *)malloc(DMnd * pSPARC->Nspden * sizeof(double));
parallelization.c:1205:            assert(pSPARC->Veff_loc_dmcomm_phi_in != NULL);
parallelization.c:1209:        if (pSPARC->scf_err_type == 1) {
parallelization.c:1210:            pSPARC->rho_dmcomm_phi_in = (double *)malloc(DMnd * sizeof(double));
parallelization.c:1211:            assert(pSPARC->rho_dmcomm_phi_in != NULL);
parallelization.c:1212:            pSPARC->phi_dmcomm_phi_in = (double *)malloc(DMnd * sizeof(double));
parallelization.c:1213:            assert(pSPARC->phi_dmcomm_phi_in != NULL);
parallelization.c:1216:        pSPARC->mixing_hist_Pfk = (double *)calloc(DMnd * pSPARC->Nspden, sizeof(double));
parallelization.c:1217:        assert(pSPARC->mixing_hist_Pfk != NULL);
parallelization.c:1220:        if (pSPARC->FixRandSeed == 1) {
parallelization.c:1221:            SeededRandVec(pSPARC->elecstPotential, pSPARC->DMVertices, gridsizes, -1.0, 1.0, 0);
parallelization.c:1226:                pSPARC->elecstPotential[i] = rand_min + (rand_max - rand_min) * (double) rand() / RAND_MAX; // or 1.0
parallelization.c:1235:    gridsizes[0] = pSPARC->Nx;
parallelization.c:1236:    gridsizes[1] = pSPARC->Ny;
parallelization.c:1237:    gridsizes[2] = pSPARC->Nz;
parallelization.c:1238:    rdims[0] = pSPARC->npNdx;
parallelization.c:1239:    rdims[1] = pSPARC->npNdy;
parallelization.c:1240:    rdims[2] = pSPARC->npNdz;
parallelization.c:1241:    sdims[0] = pSPARC->npNdx_phi;
parallelization.c:1242:    sdims[1] = pSPARC->npNdy_phi;
parallelization.c:1243:    sdims[2] = pSPARC->npNdz_phi;
parallelization.c:1245:    Set_D2D_Target(&pSPARC->d2d_dmcomm_phi, &pSPARC->d2d_dmcomm, gridsizes, pSPARC->DMVertices, pSPARC->DMVertices_dmcomm, pSPARC->dmcomm_phi,
parallelization.c:1246:                   sdims, (pSPARC->spincomm_index == 0 && pSPARC->kptcomm_index == 0 && pSPARC->bandcomm_index == 0) ? pSPARC->dmcomm : MPI_COMM_NULL, rdims, MPI_COMM_WORLD);
parallelization.c:1252:    if ((pSPARC->npNdx_phi == pSPARC->npNdx_kptcomm) && 
parallelization.c:1253:        (pSPARC->npNdy_phi == pSPARC->npNdy_kptcomm) && 
parallelization.c:1254:        (pSPARC->npNdz_phi == pSPARC->npNdz_kptcomm))
parallelization.c:1255:        pSPARC->is_phi_eq_kpt_topo = 1;
parallelization.c:1257:        pSPARC->is_phi_eq_kpt_topo = 0;
parallelization.c:1259:    if (((pSPARC->chefsibound_flag == 0 || pSPARC->chefsibound_flag == 1) &&
parallelization.c:1260:            pSPARC->spincomm_index >=0 && pSPARC->kptcomm_index >= 0
parallelization.c:1261:            && (pSPARC->spin_typ != 0 || !pSPARC->is_phi_eq_kpt_topo || !pSPARC->isGammaPoint))
parallelization.c:1262:            || (pSPARC->usefock != 0) )
parallelization.c:1264:        gridsizes[0] = pSPARC->Nx;
parallelization.c:1265:        gridsizes[1] = pSPARC->Ny;
parallelization.c:1266:        gridsizes[2] = pSPARC->Nz;
parallelization.c:1267:        sdims[0] = pSPARC->npNdx;
parallelization.c:1268:        sdims[1] = pSPARC->npNdy;
parallelization.c:1269:        sdims[2] = pSPARC->npNdz;
parallelization.c:1270:        rdims[0] = pSPARC->npNdx_kptcomm;
parallelization.c:1271:        rdims[1] = pSPARC->npNdy_kptcomm;
parallelization.c:1272:        rdims[2] = pSPARC->npNdz_kptcomm;
parallelization.c:1274:        Set_D2D_Target(&pSPARC->d2d_dmcomm_lanczos, &pSPARC->d2d_kptcomm_topo, gridsizes, pSPARC->DMVertices_dmcomm, pSPARC->DMVertices_kptcomm,
parallelization.c:1275:                       pSPARC->bandcomm_index == 0 ? pSPARC->dmcomm : MPI_COMM_NULL, sdims,
parallelization.c:1276:                       pSPARC->kptcomm_topo, rdims, pSPARC->kptcomm);
parallelization.c:1288:        printf("Total number of processors used for Psi domain: %d\n", pSPARC->npspin*pSPARC->npkpt*pSPARC->npband*pSPARC->npNd);
parallelization.c:1289:        printf("npspin  : %d\n", pSPARC->npspin);
parallelization.c:1290:        printf("# of spin per spincomm           : %.0f\n", ceil(pSPARC->Nspin / (double)pSPARC->npspin));
parallelization.c:1291:        printf("npkpt   : %d\n", pSPARC->npkpt);
parallelization.c:1292:        printf("# of k-points per kptcomm        : %.0f\n", ceil(pSPARC->Nkpts_sym / (double)pSPARC->npkpt));
parallelization.c:1293:        printf("npband  : %d\n", pSPARC->npband);
parallelization.c:1294:        printf("# of bands per bandcomm          : %.0f\n", ceil(pSPARC->Nstates / (double)pSPARC->npband));
parallelization.c:1295:        printf("npdomain: %d\n", pSPARC->npNd);
parallelization.c:1296:        printf("Embeded Cartesian topology dims: (%d,%d,%d)\n", pSPARC->npNdx, pSPARC->npNdy, pSPARC->npNdz);
parallelization.c:1297:        printf("# of FD-grid points per processor: %d = (%d,%d,%d)\n", pSPARC->Nd_d_dmcomm,pSPARC->Nx_d_dmcomm,pSPARC->Ny_d_dmcomm,pSPARC->Nz_d_dmcomm);
parallelization.c:1300:        printf("Total number of processors used for Phi domain: %d\n", pSPARC->npNdx_phi * pSPARC->npNdy_phi * pSPARC->npNdz_phi);
parallelization.c:1301:        printf("Embeded Cartesian topology dims: (%d,%d,%d)\n", pSPARC->npNdx_phi,pSPARC->npNdy_phi, pSPARC->npNdz_phi);
parallelization.c:1302:        printf("# of FD-grid points per processor: %d = (%d,%d,%d)\n", pSPARC->Nd_d,pSPARC->Nx_d,pSPARC->Ny_d,pSPARC->Nz_d);
pressure.c:56:    if ((pSPARC->mGGAflag == 1) && (pSPARC->countSCF > 1)) { // metaGGA pressure is related to wavefunction psi directly; it needs to be computed outside of function Calculate_XC_pressure
pressure.c:57:        if (pSPARC->isGammaPoint) {
pressure.c:85:    if (pSPARC->usefock > 0) {
pressure.c:98: 		double cell_measure = pSPARC->Jacbdet;
pressure.c:99:        if(pSPARC->BCx == 0)
pressure.c:100:            cell_measure *= pSPARC->range_x;
pressure.c:101:        if(pSPARC->BCy == 0)
pressure.c:102:            cell_measure *= pSPARC->range_y;
pressure.c:103:        if(pSPARC->BCz == 0)
pressure.c:104:            cell_measure *= pSPARC->range_z;
pressure.c:106: 		pSPARC->pres = (-2 * (pSPARC->Eband + pSPARC->Escc) + pSPARC->pres_xc + pSPARC->pres_el + pSPARC->pres_nl);
pressure.c:107:        if (pSPARC->usefock > 0) {
pressure.c:108:            pSPARC->pres += pSPARC->pres_exx;
pressure.c:110: 		pSPARC->pres /= (-3 * cell_measure); // measure = volume for 3D, area for 2D, and length for 1D.
pressure.c:114:        printf("Electronic contribution to pressure = %.15f Ha/Bohr^3, %.15f GPa\n", pSPARC->pres, pSPARC->pres*CONST_HA_BOHR3_GPA);
pressure.c:125:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
pressure.c:127:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank);
pressure.c:132:    if(strcmpi(pSPARC->XC,"LDA_PW") == 0 || strcmpi(pSPARC->XC,"LDA_PZ") == 0){
pressure.c:133:        pSPARC->pres_xc = 3 * pSPARC->Exc - pSPARC->Exc_corr;
pressure.c:134:    } else if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0 
pressure.c:135:           || strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0
pressure.c:136:           || strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0 || strcmpi(pSPARC->XC,"SCAN") == 0 
pressure.c:137:           || strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0){
pressure.c:138:        pSPARC->pres_xc = 3 * pSPARC->Exc - pSPARC->Exc_corr;
pressure.c:140:        DMnd = (pSPARC->Nspden/2*2+1) * pSPARC->Nd_d;
pressure.c:148:        if (pSPARC->NLCC_flag) {
pressure.c:151:                rho[i] = pSPARC->electronDens[i] + pSPARC->electronDens_core[i];
pressure.c:153:            rho = pSPARC->electronDens;
pressure.c:156:        Gradient_vectors_dir(pSPARC, pSPARC->Nd_d, pSPARC->DMVertices, (pSPARC->Nspden/2*2+1), 0.0, rho, Drho_x, 0, pSPARC->dmcomm_phi);
pressure.c:157:        Gradient_vectors_dir(pSPARC, pSPARC->Nd_d, pSPARC->DMVertices, (pSPARC->Nspden/2*2+1), 0.0, rho, Drho_y, 1, pSPARC->dmcomm_phi);
pressure.c:158:        Gradient_vectors_dir(pSPARC, pSPARC->Nd_d, pSPARC->DMVertices, (pSPARC->Nspden/2*2+1), 0.0, rho, Drho_z, 2, pSPARC->dmcomm_phi);
pressure.c:160:        if (pSPARC->NLCC_flag) free(rho);
pressure.c:164:        if(pSPARC->cell_typ == 0){
pressure.c:166:                pres_xc += (Drho_x[i] * Drho_x[i] + Drho_y[i] * Drho_y[i] + Drho_z[i] * Drho_z[i]) * pSPARC->Dxcdgrho[i];
pressure.c:168:            pres_xc *= pSPARC->dV;
pressure.c:171:            MPI_Allreduce(MPI_IN_PLACE, &pres_xc, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
pressure.c:174:            lapcT[0] = pSPARC->lapcT[0]; lapcT[1] = 2 * pSPARC->lapcT[1]; lapcT[2] = 2 * pSPARC->lapcT[2];
pressure.c:175:            lapcT[3] = pSPARC->lapcT[4]; lapcT[4] = 2 * pSPARC->lapcT[5]; lapcT[5] = pSPARC->lapcT[8]; 
pressure.c:178:                            Drho_z[i] * (lapcT[5] * Drho_z[i] + lapcT[2] * Drho_x[i])) * pSPARC->Dxcdgrho[i]; 
pressure.c:180:            pres_xc *= pSPARC->dV;
pressure.c:183:            MPI_Allreduce(MPI_IN_PLACE, &pres_xc, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
pressure.c:187:        pSPARC->pres_xc -= pres_xc;
pressure.c:193:    if (pSPARC->d3Flag == 1) {
pressure.c:197:    if (pSPARC->vdWDFFlag != 0) { // either vdW_DF1 or vdW_DF2, compute the contribution of nonlinear correlation of vdWDF on stress/pressure
pressure.c:198:        if (pSPARC->spin_typ == 0) {
pressure.c:206:    if (pSPARC->NLCC_flag) {
pressure.c:209:        pSPARC->pres_xc += pres_xc_nlcc;
pressure.c:220:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return pres_xc_nlcc;
pressure.c:222:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank);
pressure.c:243:    FDn = pSPARC->order / 2;
pressure.c:245:    DMnx = pSPARC->Nx_d;
pressure.c:246:    DMny = pSPARC->Ny_d;
pressure.c:261:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
pressure.c:262:        rchrg = pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1];
pressure.c:263:        for (iat = 0; iat < pSPARC->Atom_Influence_local[ityp].n_atom; iat++) {
pressure.c:265:            x0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3];
pressure.c:266:            y0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 1];
pressure.c:267:            z0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 2];
pressure.c:270:            int atom_index = pSPARC->Atom_Influence_local[ityp].atom_index[iat];
pressure.c:273:            nx = pSPARC->Atom_Influence_local[ityp].xe[iat] - pSPARC->Atom_Influence_local[ityp].xs[iat] + 1;
pressure.c:274:            ny = pSPARC->Atom_Influence_local[ityp].ye[iat] - pSPARC->Atom_Influence_local[ityp].ys[iat] + 1;
pressure.c:275:            nz = pSPARC->Atom_Influence_local[ityp].ze[iat] - pSPARC->Atom_Influence_local[ityp].zs[iat] + 1;
pressure.c:278:            nxp = nx + pSPARC->order;
pressure.c:279:            nyp = ny + pSPARC->order;
pressure.c:280:            nzp = nz + pSPARC->order;
pressure.c:283:            nx2p = nxp + pSPARC->order;
pressure.c:284:            ny2p = nyp + pSPARC->order;
pressure.c:285:            nz2p = nzp + pSPARC->order;
pressure.c:293:            icor = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->order;
pressure.c:294:            jcor = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->order;
pressure.c:295:            kcor = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->order;
pressure.c:298:            x0_i_shift =  x0_i - pSPARC->delta_x * icor; 
pressure.c:299:            y0_i_shift =  y0_i - pSPARC->delta_y * jcor;
pressure.c:300:            z0_i_shift =  z0_i - pSPARC->delta_z * kcor;
pressure.c:304:            if(pSPARC->cell_typ == 0) {    
pressure.c:306:                    z = k * pSPARC->delta_z - z0_i_shift; 
pressure.c:308:                        y = j * pSPARC->delta_y - y0_i_shift;
pressure.c:310:                            x = i * pSPARC->delta_x - x0_i_shift;
pressure.c:319:                    z = k * pSPARC->delta_z - z0_i_shift; 
pressure.c:321:                        y = j * pSPARC->delta_y - y0_i_shift;
pressure.c:323:                            x = i * pSPARC->delta_x - x0_i_shift;
pressure.c:324:                            R[count] = sqrt(pSPARC->metricT[0] * (x*x) + pSPARC->metricT[1] * (x*y) + pSPARC->metricT[2] * (x*z) 
pressure.c:325:                                          + pSPARC->metricT[4] * (y*y) + pSPARC->metricT[5] * (y*z) + pSPARC->metricT[8] * (z*z) );
pressure.c:352:            SplineInterpMain(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rho_c_table, pSPARC->psd[ityp].size, 
pressure.c:353:                         R_interp, rhocJ_interp, count_interp, pSPARC->psd[ityp].SplineRhocD,pSPARC->psd[ityp].is_r_uniform);
pressure.c:375:            double xin = pSPARC->xin + pSPARC->Atom_Influence_local[ityp].xs[iat] * pSPARC->delta_x;       
pressure.c:378:            dk = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->DMVertices[4];
pressure.c:379:            dj = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->DMVertices[2];
pressure.c:380:            di = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->DMVertices[0];
pressure.c:399:                            drhocJ_x_val += (rhocJ[ishift_2p+p] - rhocJ[ishift_2p-p]) * pSPARC->D1_stencil_coeffs_x[p];
pressure.c:400:                            drhocJ_y_val += (rhocJ[ishift_2p+pshifty_ex[p]] - rhocJ[ishift_2p-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
pressure.c:401:                            drhocJ_z_val += (rhocJ[ishift_2p+pshiftz_ex[p]] - rhocJ[ishift_2p-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
pressure.c:411:            double *Vxc = pSPARC->XCPotential;
pressure.c:424:                        x1_R1 = (i_DM + pSPARC->DMVertices[0]) * pSPARC->delta_x - x0_i;
pressure.c:425:                        x2_R2 = (j_DM + pSPARC->DMVertices[2]) * pSPARC->delta_y - y0_i;
pressure.c:426:                        x3_R3 = (k_DM + pSPARC->DMVertices[4]) * pSPARC->delta_z - z0_i;
pressure.c:427:                        if (pSPARC->cell_typ != 0)
pressure.c:432:                        if (pSPARC->cell_typ != 0)
pressure.c:435:                        if (pSPARC->spin_typ == 0)
pressure.c:437:                        else if (pSPARC->spin_typ == 1)
pressure.c:438:                            Vxc_val = 0.5 * (Vxc[ishift_DM] + Vxc[pSPARC->Nd_d+ishift_DM]);
pressure.c:450:    pres_xc_nlcc *= pSPARC->dV;
pressure.c:454:    MPI_Allreduce(MPI_IN_PLACE, &pres_xc_nlcc, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
pressure.c:486:	if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
pressure.c:503:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank);
pressure.c:511:    FDn = pSPARC->order / 2;
pressure.c:512:    w2_diag = (pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_y[0] + pSPARC->D2_stencil_coeffs_z[0]) * -inv_4PI;
pressure.c:513:    if(pSPARC->cell_typ == 0){
pressure.c:522:    DMnx = pSPARC->Nx_d; DMny = pSPARC->Ny_d; 
pressure.c:523:    DMnd = pSPARC->Nd_d;
pressure.c:537:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->elecstPotential, Dphi_x, 0, pSPARC->dmcomm_phi);
pressure.c:538:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->elecstPotential, Dphi_y, 1, pSPARC->dmcomm_phi);
pressure.c:539:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->elecstPotential, Dphi_z, 2, pSPARC->dmcomm_phi);
pressure.c:541:    if(pSPARC->cell_typ == 0){
pressure.c:544:        	temp2 += (pSPARC->electronDens[i] + 3 * pSPARC->psdChrgDens[i]) * pSPARC->elecstPotential[i];
pressure.c:555:        	temp1 += (pSPARC->electronDens[i] + 3 * pSPARC->psdChrgDens[i]) * pSPARC->elecstPotential[i];
pressure.c:557:        pressure_el += inv_4PI * ( pSPARC->lapcT[0]*temp_xx + pSPARC->lapcT[4]*temp_yy + pSPARC->lapcT[8]*temp_zz
pressure.c:558:                                 + 2*(pSPARC->lapcT[1]*temp_xy + pSPARC->lapcT[2]*temp_xz + pSPARC->lapcT[5]*temp_yz) );
pressure.c:563:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
pressure.c:564:        rchrg = pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1];
pressure.c:565:        for (iat = 0; iat < pSPARC->Atom_Influence_local[ityp].n_atom; iat++) {
pressure.c:567:            x0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3];
pressure.c:568:            y0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 1];
pressure.c:569:            z0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 2];
pressure.c:572:            nx = pSPARC->Atom_Influence_local[ityp].xe[iat] - pSPARC->Atom_Influence_local[ityp].xs[iat] + 1;
pressure.c:573:            ny = pSPARC->Atom_Influence_local[ityp].ye[iat] - pSPARC->Atom_Influence_local[ityp].ys[iat] + 1;
pressure.c:574:            nz = pSPARC->Atom_Influence_local[ityp].ze[iat] - pSPARC->Atom_Influence_local[ityp].zs[iat] + 1;
pressure.c:577:            nxp = nx + pSPARC->order;
pressure.c:578:            nyp = ny + pSPARC->order;
pressure.c:579:            nzp = nz + pSPARC->order;
pressure.c:582:            nx2p = nxp + pSPARC->order;
pressure.c:583:            ny2p = nyp + pSPARC->order;
pressure.c:584:            nz2p = nzp + pSPARC->order;
pressure.c:595:            icor = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->order;
pressure.c:596:            jcor = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->order;
pressure.c:597:            kcor = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->order;
pressure.c:600:            x0_i_shift =  x0_i - pSPARC->delta_x * icor; 
pressure.c:601:            y0_i_shift =  y0_i - pSPARC->delta_y * jcor;
pressure.c:602:            z0_i_shift =  z0_i - pSPARC->delta_z * kcor;
pressure.c:606:            if(pSPARC->cell_typ == 0) {    
pressure.c:608:                    z = k * pSPARC->delta_z - z0_i_shift; 
pressure.c:610:                        y = j * pSPARC->delta_y - y0_i_shift;
pressure.c:612:                            x = i * pSPARC->delta_x - x0_i_shift;
pressure.c:621:                    z = k * pSPARC->delta_z - z0_i_shift; 
pressure.c:623:                        y = j * pSPARC->delta_y - y0_i_shift;
pressure.c:625:                            x = i * pSPARC->delta_x - x0_i_shift;
pressure.c:626:                            R[count] = sqrt(pSPARC->metricT[0] * (x*x) + pSPARC->metricT[1] * (x*y) + pSPARC->metricT[2] * (x*z) 
pressure.c:627:                                          + pSPARC->metricT[4] * (y*y) + pSPARC->metricT[5] * (y*z) + pSPARC->metricT[8] * (z*z) );
pressure.c:642:            Calculate_Pseudopot_Ref(R, nd_2ex, pSPARC->REFERENCE_CUTOFF, -pSPARC->Znucl[ityp], VJ_ref);
pressure.c:661:                    VJ[i] = -pSPARC->Znucl[ityp] / R[i];
pressure.c:669:            if (pSPARC->psd[ityp].is_r_uniform == 1) {
pressure.c:670:                SplineInterpUniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
pressure.c:671:                                    R_interp, VJ_interp, count_interp, pSPARC->psd[ityp].SplinerVlocD); 
pressure.c:673:               SplineInterpNonuniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
pressure.c:674:                                    R_interp, VJ_interp, count_interp, pSPARC->psd[ityp].SplinerVlocD); 
pressure.c:682:                    VJ[ind_interp[i]] = pSPARC->psd[ityp].Vloc_0;
pressure.c:709:            double xin = pSPARC->xin + pSPARC->Atom_Influence_local[ityp].xs[iat] * pSPARC->delta_x;
pressure.c:714:            dk = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->DMVertices[4];
pressure.c:715:            dj = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->DMVertices[2];
pressure.c:716:            di = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->DMVertices[0];
pressure.c:717:            for(kp = FDn, kp2 = pSPARC->order, k_DM = dk; kp2 < nzp; kp++, kp2++, k_DM++) {
pressure.c:721:                for(jp = FDn, jp2 = pSPARC->order, j_DM = dj; jp2 < nyp; jp++, jp2++, j_DM++) {
pressure.c:725:                    for(ip = FDn, ip2 = pSPARC->order, i_DM = di; ip2 < nxp; ip++, ip2++, i_DM++) {
pressure.c:734:                            DbJ_x_val += (bJ[indx_ex+p] - bJ[indx_ex-p]) * pSPARC->D1_stencil_coeffs_x[p];
pressure.c:735:                            DbJ_y_val += (bJ[indx_ex+pshifty[p]] - bJ[indx_ex-pshifty[p]]) * pSPARC->D1_stencil_coeffs_y[p];
pressure.c:736:                            DbJ_z_val += (bJ[indx_ex+pshiftz[p]] - bJ[indx_ex-pshiftz[p]]) * pSPARC->D1_stencil_coeffs_z[p];
pressure.c:738:                            DbJ_ref_x_val += (bJ_ref[indx_ex+p] - bJ_ref[indx_ex-p]) * pSPARC->D1_stencil_coeffs_x[p];
pressure.c:739:                            DbJ_ref_y_val += (bJ_ref[indx_ex+pshifty[p]] - bJ_ref[indx_ex-pshifty[p]]) * pSPARC->D1_stencil_coeffs_y[p];
pressure.c:740:                            DbJ_ref_z_val += (bJ_ref[indx_ex+pshiftz[p]] - bJ_ref[indx_ex-pshiftz[p]]) * pSPARC->D1_stencil_coeffs_z[p];
pressure.c:742:							DVJ_x_val += (VJ[indx_2ex+p] - VJ[indx_2ex-p]) * pSPARC->D1_stencil_coeffs_x[p];
pressure.c:743:                            DVJ_y_val += (VJ[indx_2ex+pshifty_ex[p]] - VJ[indx_2ex-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
pressure.c:744:                            DVJ_z_val += (VJ[indx_2ex+pshiftz_ex[p]] - VJ[indx_2ex-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
pressure.c:746:                            DVJ_ref_x_val += (VJ_ref[indx_2ex+p] - VJ_ref[indx_2ex-p]) * pSPARC->D1_stencil_coeffs_x[p];
pressure.c:747:                            DVJ_ref_y_val += (VJ_ref[indx_2ex+pshifty_ex[p]] - VJ_ref[indx_2ex-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
pressure.c:748:                            DVJ_ref_z_val += (VJ_ref[indx_2ex+pshiftz_ex[p]] - VJ_ref[indx_2ex-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
pressure.c:755:                        x1_R1 = (i_DM + pSPARC->DMVertices[0]) * pSPARC->delta_x - x0_i;
pressure.c:756:                        x2_R2 = (j_DM + pSPARC->DMVertices[2]) * pSPARC->delta_y - y0_i;
pressure.c:757:                        x3_R3 = (k_DM + pSPARC->DMVertices[4]) * pSPARC->delta_z - z0_i;
pressure.c:759:                        pressure_el += (DbJ_x_val * x1_R1 + DbJ_y_val * x2_R2 + DbJ_z_val * x3_R3) * pSPARC->elecstPotential[indx_DM]; //- 0.5 * VJ[indx_2ex]) ;
pressure.c:762:                        temp1 = pSPARC->Vc[indx_DM] - VJ_ref[indx_2ex];
pressure.c:763:                        temp2 = pSPARC->Vc[indx_DM];  //+ VJ[indx_2ex];
pressure.c:764:                        temp3 = pSPARC->psdChrgDens[indx_DM] + pSPARC->psdChrgDens_ref[indx_DM];
pressure.c:783:    pSPARC->pres_el = (pressure_el + 0.5 * pressure_corr ) * pSPARC->dV;
pressure.c:786:    MPI_Allreduce(MPI_IN_PLACE, &pSPARC->pres_el, 1, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
pressure.c:789:    pSPARC->pres_el += 3 * pSPARC->Esc;
pressure.c:793:        printf("Pressure contribution from electrostatics: %.15f Ha\n",pSPARC->pres_el);
pressure.c:823:    if (pSPARC->isGammaPoint) {
pressure.c:824:        if (pSPARC->SQFlag == 1) 
pressure.c:829:        if (pSPARC->Nspinor == 1)
pressure.c:831:        else if (pSPARC->Nspinor == 2)
pressure.c:841:    if (pSPARC->spincomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
pressure.c:846:    nspin = pSPARC->Nspin_spincomm; // number of spin in my spin communicator
pressure.c:847:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
pressure.c:848:    Ns = pSPARC->Nstates; // total number of bands
pressure.c:849:    DMnd = pSPARC->Nd_d_dmcomm;
pressure.c:850:    DMnx = pSPARC->Nx_d_dmcomm;
pressure.c:851:    DMny = pSPARC->Ny_d_dmcomm;
pressure.c:858:    alpha = (double *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 4, sizeof(double));
pressure.c:859:    if (pSPARC->SQ3Flag == 1)
pressure.c:860:        alpha2 = (double *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin, sizeof(double));
pressure.c:866:    double *XorY = (pSPARC->SQ3Flag == 0) ? pSPARC->Xorb : pSPARC->Yorb;
pressure.c:867:    double *YorZ = (pSPARC->SQ3Flag == 0) ? pSPARC->Yorb : pSPARC->Zorb;
pressure.c:871:        beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
pressure.c:872:        if (pSPARC->SQ3Flag == 1)   
pressure.c:873:            beta2 = alpha2 + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
pressure.c:874:        for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
pressure.c:875:            if (!pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
pressure.c:876:            for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
pressure.c:877:                ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
pressure.c:879:                atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
pressure.c:883:                    x_ptr = pSPARC->Xorb + spn_i * size_s + n * DMnd;
pressure.c:886:                        *(x_rc_ptr + i) = *(x_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
pressure.c:889:                cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, pSPARC->dV, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
pressure.c:890:                            x_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); // multiply dV to get inner-product
pressure.c:892:                if (pSPARC->SQ3Flag == 1){
pressure.c:894:                        x_ptr = pSPARC->Yorb + spn_i * size_s + n * DMnd;
pressure.c:897:                            *(x_rc_ptr + i) = *(x_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
pressure.c:900:                    cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, pSPARC->dV, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
pressure.c:901:                                x_rc, ndc, 1.0, beta2+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); // multiply dV to get inner-product
pressure.c:915:            Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, XorY+spn_i*size_s, YorZ+spn_i*size_s, dim, pSPARC->dmcomm);
pressure.c:916:            beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (nspin * (dim+1) + count);
pressure.c:917:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
pressure.c:918:                if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
pressure.c:919:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
pressure.c:920:                    R1 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3];
pressure.c:921:                    R2 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
pressure.c:922:                    R3 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
pressure.c:923:                    ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
pressure.c:925:                    atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
pressure.c:930:                            indx = pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i];
pressure.c:933:                            	*(dx_rc_ptr + i) = *(dx_ptr + indx) * ((i_DM + pSPARC->DMVertices_dmcomm[0]) * pSPARC->delta_x - R1);
pressure.c:937:                            	*(dx_rc_ptr + i) = *(dx_ptr + indx) * ((j_DM + pSPARC->DMVertices_dmcomm[2]) * pSPARC->delta_y - R2);
pressure.c:940:                    			*(dx_rc_ptr + i) = *(dx_ptr + indx) * ((k_DM + pSPARC->DMVertices_dmcomm[4]) * pSPARC->delta_z - R3);
pressure.c:952:                    cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, 1.0, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
pressure.c:953:                                dx_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); 
pressure.c:961:    if (pSPARC->npNd > 1) {
pressure.c:962:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 4, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
pressure.c:967:    beta_x = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin;
pressure.c:968:    beta_y = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 2;
pressure.c:969:    beta_z = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 3;
pressure.c:973:        for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
pressure.c:974:            lmax = pSPARC->psd[ityp].lmax;
pressure.c:975:            for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
pressure.c:977:                for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
pressure.c:978:                    g_nk = (pSPARC->SQ3Flag == 0) ? pSPARC->occ[spn_i*pSPARC->Nstates+n] : 1;
pressure.c:983:                        if (l == pSPARC->localPsd[ityp]) {
pressure.c:984:                            ldispl += pSPARC->psd[ityp].ppl[l];
pressure.c:987:                        for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
pressure.c:990:                                if (pSPARC->SQ3Flag == 0)
pressure.c:997:                            temp2_e += temp_e * pSPARC->psd[ityp].Gamma[ldispl+np];
pressure.c:998:                            temp2_p += temp_p * pSPARC->psd[ityp].Gamma[ldispl+np];
pressure.c:1000:                        ldispl += pSPARC->psd[ityp].ppl[l];
pressure.c:1006:                pressure_nloc -= (2.0/pSPARC->Nspin) * 2.0 *  (pJ + 0.5 * eJ/pSPARC->dV);
pressure.c:1012:    if (pSPARC->npspin > 1) {    
pressure.c:1013:        if (pSPARC->spincomm_index == 0){
pressure.c:1014:            MPI_Reduce(MPI_IN_PLACE, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
pressure.c:1016:            MPI_Reduce(&pressure_nloc, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
pressure.c:1022:    if (pSPARC->npband > 1) {
pressure.c:1023:        if (pSPARC->bandcomm_index == 0){
pressure.c:1024:            MPI_Reduce(MPI_IN_PLACE, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
pressure.c:1026:            MPI_Reduce(&pressure_nloc, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
pressure.c:1031:        pSPARC->pres_nl = pressure_nloc;
pressure.c:1036:        printf("Pressure contribution from nonlocal pseudopotential: = %.15f Ha\n", pSPARC->pres_nl);
pressure.c:1042:    if (pSPARC->SQ3Flag == 1)
pressure.c:1052:    if (pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
pressure.c:1057:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
pressure.c:1058:    Ns = pSPARC->Nstates;
pressure.c:1059:    DMnd = pSPARC->Nd_d_dmcomm;
pressure.c:1060:    Nk = pSPARC->Nkpts_kptcomm;
pressure.c:1061:    nspin = pSPARC->Nspin_spincomm;
pressure.c:1064:    DMnx = pSPARC->Nx_d_dmcomm;
pressure.c:1065:    DMny = pSPARC->Ny_d_dmcomm;
pressure.c:1071:    alpha = (double complex *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * 4, sizeof(double complex));
pressure.c:1072:    double Lx = pSPARC->range_x;
pressure.c:1073:    double Ly = pSPARC->range_y;
pressure.c:1074:    double Lz = pSPARC->range_z;
pressure.c:1083:        for(kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++){
pressure.c:1084:            k1 = pSPARC->k1_loc[kpt];
pressure.c:1085:            k2 = pSPARC->k2_loc[kpt];
pressure.c:1086:            k3 = pSPARC->k3_loc[kpt];
pressure.c:1087:            beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
pressure.c:1088:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
pressure.c:1089:                if (!pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
pressure.c:1090:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
pressure.c:1091:                    R1 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3  ];
pressure.c:1092:                    R2 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
pressure.c:1093:                    R3 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
pressure.c:1096:                    a = bloch_fac * pSPARC->dV;
pressure.c:1098:                    ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
pressure.c:1100:                    atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
pressure.c:1104:                        x_ptr = pSPARC->Xorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd;
pressure.c:1107:                            *(x_rc_ptr + i) = conj(*(x_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]));
pressure.c:1110:                    cblas_zgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, &a, pSPARC->nlocProj[ityp].Chi_c[iat], ndc, 
pressure.c:1111:                                x_rc, ndc, &b, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); // multiply dV to get inner-product
pressure.c:1124:                k1 = pSPARC->k1_loc[kpt];
pressure.c:1125:                k2 = pSPARC->k2_loc[kpt];
pressure.c:1126:                k3 = pSPARC->k3_loc[kpt];
pressure.c:1129:                Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb_kpt+spn_i*size_s+kpt*size_k, pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k, dim, &kpt_vec, pSPARC->dmcomm);
pressure.c:1130:                beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (Nk * nspin* (dim + 1) + count);
pressure.c:1131:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
pressure.c:1132:                    if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
pressure.c:1133:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
pressure.c:1134:                        R1 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3];
pressure.c:1135:                        R2 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
pressure.c:1136:                        R3 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
pressure.c:1140:                        ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
pressure.c:1142:                        atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
pressure.c:1144:                            dx_ptr = pSPARC->Yorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd;
pressure.c:1147:                                indx = pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i];
pressure.c:1150:                                	*(dx_rc_ptr + i) = *(dx_ptr + indx) * ((i_DM + pSPARC->DMVertices_dmcomm[0]) * pSPARC->delta_x - R1);
pressure.c:1154:                                	*(dx_rc_ptr + i) = *(dx_ptr + indx) * ((j_DM + pSPARC->DMVertices_dmcomm[2]) * pSPARC->delta_y - R2);
pressure.c:1157:                        			*(dx_rc_ptr + i) = *(dx_ptr + indx) * ((k_DM + pSPARC->DMVertices_dmcomm[4]) * pSPARC->delta_z - R3);
pressure.c:1169:                        cblas_zgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, &bloch_fac, pSPARC->nlocProj[ityp].Chi_c[iat], ndc, 
pressure.c:1170:                                    dx_rc, ndc, &b, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); 
pressure.c:1179:    if (pSPARC->npNd > 1) {
pressure.c:1180:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * 4, MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
pressure.c:1185:    beta_x = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin;
pressure.c:1186:    beta_y = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 2;
pressure.c:1187:    beta_z = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 3;
pressure.c:1193:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
pressure.c:1194:                lmax = pSPARC->psd[ityp].lmax;
pressure.c:1195:                for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {                
pressure.c:1197:                    for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
pressure.c:1198:                        g_nk = pSPARC->occ[spn_i*Nk*Ns+k*Ns+n];
pressure.c:1203:                            if (l == pSPARC->localPsd[ityp]) {
pressure.c:1204:                                ldispl += pSPARC->psd[ityp].ppl[l];
pressure.c:1207:                            for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
pressure.c:1215:                                temp2_e += temp_e * pSPARC->psd[ityp].Gamma[ldispl+np];
pressure.c:1216:                                temp2_p += temp_p * pSPARC->psd[ityp].Gamma[ldispl+np];
pressure.c:1218:                            ldispl += pSPARC->psd[ityp].ppl[l];
pressure.c:1224:                    pressure_nloc -= (2.0/pSPARC->Nspin) * 2.0 * pSPARC->kptWts_loc[k] / pSPARC->Nkpts * (pJ + 0.5 * eJ/pSPARC->dV);
pressure.c:1231:    if (pSPARC->npspin > 1) {    
pressure.c:1232:        if (pSPARC->spincomm_index == 0){
pressure.c:1233:            MPI_Reduce(MPI_IN_PLACE, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
pressure.c:1235:            MPI_Reduce(&pressure_nloc, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
pressure.c:1240:    if (pSPARC->npkpt > 1) {    
pressure.c:1241:        if (pSPARC->kptcomm_index == 0){
pressure.c:1242:            MPI_Reduce(MPI_IN_PLACE, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
pressure.c:1244:            MPI_Reduce(&pressure_nloc, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
pressure.c:1249:    if (pSPARC->npband > 1) {
pressure.c:1250:        if (pSPARC->bandcomm_index == 0){
pressure.c:1251:            MPI_Reduce(MPI_IN_PLACE, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
pressure.c:1253:            MPI_Reduce(&pressure_nloc, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
pressure.c:1258:        pSPARC->pres_nl = pressure_nloc;
pressure.c:1263:        printf("Pressure contribution from nonlocal pseudopotential: = %.15f Ha\n", pSPARC->pres_nl);
readfiles.c:877:    snprintf(pSPARC->filename, L_STRING, "%s", pSPARC_Input->filename);
readfiles.c:1104:    snprintf(ion_filename, L_STRING, "%s.ion", pSPARC->filename);
readfiles.c:1137:    pSPARC->Ntypes = typcnt;
readfiles.c:1143:    atmcnt_cum = (int *)malloc( (pSPARC->Ntypes+1) * sizeof(int));
readfiles.c:1150:    pSPARC->localPsd = (int *)malloc( pSPARC->Ntypes * sizeof(int) );
readfiles.c:1151:    pSPARC->Mass = (double *)malloc( pSPARC->Ntypes * sizeof(double) );
readfiles.c:1152:    pSPARC->atomType = (char *)calloc( pSPARC->Ntypes * L_ATMTYPE, sizeof(char) ); 
readfiles.c:1153:    pSPARC->Znucl = (int *)malloc( pSPARC->Ntypes * sizeof(int) );
readfiles.c:1154:    pSPARC->nAtomv = (int *)malloc( pSPARC->Ntypes * sizeof(int) );
readfiles.c:1155:    pSPARC->psdName = (char *)calloc( pSPARC->Ntypes * L_PSD, sizeof(char) );
readfiles.c:1156:    if (pSPARC->localPsd == NULL || pSPARC->Mass == NULL || 
readfiles.c:1157:        pSPARC->atomType == NULL || pSPARC->psdName == NULL ||
readfiles.c:1158:        pSPARC->Znucl == NULL || pSPARC->nAtomv == NULL) {
readfiles.c:1164:    for (i = 0; i < pSPARC->Ntypes; i++) {
readfiles.c:1165:        pSPARC->localPsd[i] = 4; // default is 4
readfiles.c:1176:            fscanf(ion_fp, "%s", &pSPARC->atomType[L_ATMTYPE*typcnt]);
readfiles.c:1178:            fscanf(ion_fp, "%d", &pSPARC->nAtomv[typcnt]);
readfiles.c:1180:            n_atom += pSPARC->nAtomv[typcnt];
readfiles.c:1198:    pSPARC->n_atom = n_atom;
readfiles.c:1201:    pSPARC->atom_pos = (double *)malloc(3*n_atom*sizeof(double));
readfiles.c:1202:    pSPARC->mvAtmConstraint = (int *)malloc(3*n_atom*sizeof(int));
readfiles.c:1203:    pSPARC->atom_spin = (double *)calloc(n_atom, sizeof(double));
readfiles.c:1204:    if (pSPARC->atom_pos == NULL || pSPARC->mvAtmConstraint == NULL || pSPARC->atom_spin == NULL) {
readfiles.c:1211:        pSPARC->mvAtmConstraint[i] = 1;
readfiles.c:1218:        for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
readfiles.c:1221:            find_element(elemType, &pSPARC->atomType[L_ATMTYPE*ityp]);
readfiles.c:1225:            printf(GRN"Element type for atom_type %s is %s\n"RESET, &pSPARC->atomType[L_ATMTYPE*ityp], elemType);
readfiles.c:1228:            atomdata_mass(elemType, &pSPARC->Mass[ityp]);
readfiles.c:1230:            printf(GRN"Default atomic mass for %s is %f\n"RESET,elemType,pSPARC->Mass[ityp]);
readfiles.c:1245:    pSPARC->IsFrac = (int *)calloc( pSPARC->Ntypes, sizeof(int) );
readfiles.c:1248:    pSPARC->IsSpin = (int *)calloc( pSPARC->Ntypes, sizeof(int) );
readfiles.c:1271:            for (i = 0; i < pSPARC->nAtomv[typcnt]; i++) {
readfiles.c:1281:                pSPARC->atom_pos[3*atmcnt_coord] = array_read_double[0];
readfiles.c:1282:                pSPARC->atom_pos[3*atmcnt_coord+1] = array_read_double[1];
readfiles.c:1283:                pSPARC->atom_pos[3*atmcnt_coord+2] = array_read_double[2];
readfiles.c:1289:            for (i = 0; i < pSPARC->nAtomv[typcnt]; i++) {
readfiles.c:1299:                pSPARC->atom_pos[3*atmcnt_coord] = array_read_double[0];
readfiles.c:1300:                pSPARC->atom_pos[3*atmcnt_coord+1] = array_read_double[1];
readfiles.c:1301:                pSPARC->atom_pos[3*atmcnt_coord+2] = array_read_double[2];
readfiles.c:1302:                pSPARC->atom_pos[3*atmcnt_coord] *= pSPARC_Input->range_x;
readfiles.c:1303:                pSPARC->atom_pos[3*atmcnt_coord+1] *= pSPARC_Input->range_y;
readfiles.c:1304:                pSPARC->atom_pos[3*atmcnt_coord+2] *= pSPARC_Input->range_z;
readfiles.c:1307:            pSPARC->IsFrac[typcnt] = 1;
readfiles.c:1312:            for (i = 0; i < pSPARC->nAtomv[typcnt]; i++) {
readfiles.c:1322:                pSPARC->mvAtmConstraint[3*atmcnt_relax] = array_read_int[0];
readfiles.c:1323:                pSPARC->mvAtmConstraint[3*atmcnt_relax+1] = array_read_int[1];
readfiles.c:1324:                pSPARC->mvAtmConstraint[3*atmcnt_relax+2] = array_read_int[2];
readfiles.c:1331:            for (i = 0; i < pSPARC->nAtomv[typcnt]; i++) {
readfiles.c:1341:                pSPARC->atom_spin[atmcnt_spin] = array_read_double[0];
readfiles.c:1344:            pSPARC->IsSpin[typcnt] = 1;
readfiles.c:1356:            //simplifyPath(str_tmp, &pSPARC->psdName[typcnt*L_PSD], L_PSD);
readfiles.c:1357:            snprintf(&pSPARC->psdName[typcnt*L_PSD], L_PSD, "%s", str_tmp);
readfiles.c:1363:            pSPARC->is_default_psd = 0; // switch off default psedopots
readfiles.c:1365:            printf("pseudo_dir # %d = %s\n",typcnt+1,&pSPARC->psdName[typcnt*L_PSD]);
readfiles.c:1368:            fscanf(ion_fp, "%lf", &pSPARC->Mass[typcnt]);  
readfiles.c:1413:    pSPARC->psd = (PSD_OBJ *)malloc(pSPARC->Ntypes * sizeof(PSD_OBJ));
readfiles.c:1414:    assert(pSPARC->psd != NULL);
readfiles.c:1416:    //char *inpt_path = pSPARC->filename;
readfiles.c:1429:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
readfiles.c:1430:        if (pSPARC->is_default_psd) { 
readfiles.c:1433:                                                    &pSPARC->atomType[ityp*L_ATMTYPE]);
readfiles.c:1434:            snprintf(&pSPARC->psdName[ityp*L_PSD], L_PSD, "%s", psd_filename);
readfiles.c:1436:            if (pSPARC->psdName[ityp*L_PSD] == '/') { // absolute path 
readfiles.c:1437:                snprintf(psd_filename, L_PSD, "%s", &pSPARC->psdName[ityp*L_PSD]);
readfiles.c:1440:                snprintf(psd_filename, L_PSD, "%s/%s", INPUT_DIR, &pSPARC->psdName[ityp*L_PSD]);
readfiles.c:1442:            snprintf(&pSPARC->psdName[ityp*L_PSD], L_PSD, "%s", psd_filename);
readfiles.c:1446:        simplifyPath(&pSPARC->psdName[ityp*L_PSD], simp_path, L_PSD);
readfiles.c:1447:        snprintf(&pSPARC->psdName[ityp*L_PSD], L_PSD, "%s", simp_path);
readfiles.c:1468:        find_element(elemType, &pSPARC->atomType[L_ATMTYPE*ityp]);
readfiles.c:1474:            psd_filename, &pSPARC->atomType[ityp*L_ATMTYPE]);
readfiles.c:1480:        pSPARC->Znucl[ityp] = (int)vtemp2;
readfiles.c:1485:        fscanf(psd_fp,"%d %d %d %d",&pspxc,&pSPARC->psd[ityp].lmax,&pSPARC->localPsd[ityp],&pSPARC->psd[ityp].size); 
readfiles.c:1486:        pSPARC->psd[ityp].pspxc = pspxc;
readfiles.c:1494:        pSPARC->psd[ityp].fchrg = fchrg; // save for nonlinear core correction
readfiles.c:1500:        lmax = pSPARC->psd[ityp].lmax;
readfiles.c:1501:        pSPARC->psd[ityp].ppl = (int *)calloc((lmax+1), sizeof(int));
readfiles.c:1503:        pSPARC->psd[ityp].rc = (double *)malloc((lmax+1) * sizeof(double));        
readfiles.c:1504:        pSPARC->psd[ityp].pspsoc = 0;   // default no spin-orbit coupling
readfiles.c:1513:            pSPARC->psd[ityp].pspsoc = 1;
readfiles.c:1542:        for (l = 0; l <= pSPARC->psd[ityp].lmax; l++) {
readfiles.c:1544:            pSPARC->psd[ityp].rc[l] = vtemp;
readfiles.c:1554:            fscanf(psd_fp,"%d",&pSPARC->psd[ityp].ppl[l]);
readfiles.c:1555:            lpos[l+1] = lpos[l] + pSPARC->psd[ityp].ppl[l];
readfiles.c:1560:        pSPARC->psd[ityp].RadialGrid = (double *)calloc(pSPARC->psd[ityp].size , sizeof(double)); 
readfiles.c:1561:        pSPARC->psd[ityp].UdV = (double *)calloc(nproj * pSPARC->psd[ityp].size , sizeof(double)); 
readfiles.c:1562:        pSPARC->psd[ityp].rVloc = (double *)calloc(pSPARC->psd[ityp].size , sizeof(double)); 
readfiles.c:1563:        pSPARC->psd[ityp].rhoIsoAtom = (double *)calloc(pSPARC->psd[ityp].size , sizeof(double)); 
readfiles.c:1564:        pSPARC->psd[ityp].Gamma = (double *)calloc(nproj , sizeof(double)); 
readfiles.c:1570:        if (pSPARC->psd[ityp].pspsoc == 1) {
readfiles.c:1571:            pSPARC->psd[ityp].ppl_soc = (int *)calloc(lmax, sizeof(int));
readfiles.c:1574:                fscanf(psd_fp,"%d",&pSPARC->psd[ityp].ppl_soc[l-1]);
readfiles.c:1575:                lpos_soc[l] = lpos_soc[l-1] + pSPARC->psd[ityp].ppl_soc[l-1];
readfiles.c:1578:            pSPARC->psd[ityp].Gamma_soc = (double *)calloc(nproj_soc , sizeof(double)); 
readfiles.c:1579:            pSPARC->psd[ityp].UdV_soc = (double *)calloc(nproj_soc * pSPARC->psd[ityp].size , sizeof(double)); 
readfiles.c:1586:        for (l = 0; l <= pSPARC->psd[ityp].lmax; l++) {
readfiles.c:1587:            if (l != pSPARC->localPsd[ityp]) {
readfiles.c:1588:                for (kk = 0; kk < pSPARC->psd[ityp].ppl[l]; kk++) {
readfiles.c:1590:                    pSPARC->psd[ityp].Gamma[lpos[l]+kk] = vtemp;
readfiles.c:1593:                        pSPARC->psd[ityp].Gamma[lpos[l]+kk] = 0.0;
readfiles.c:1596:                for (jj = 0; jj < pSPARC->psd[ityp].size; jj++) {
readfiles.c:1599:                    pSPARC->psd[ityp].RadialGrid[jj] = vtemp;
readfiles.c:1600:                    for (kk = 0; kk < pSPARC->psd[ityp].ppl[l]; kk++) {
readfiles.c:1602:                        pSPARC->psd[ityp].UdV[(lpos[l]+kk)*pSPARC->psd[ityp].size+jj] = vtemp/pSPARC->psd[ityp].RadialGrid[jj];
readfiles.c:1605:                for (kk = 0; kk < pSPARC->psd[ityp].ppl[l]; kk++)
readfiles.c:1606:                    pSPARC->psd[ityp].UdV[(lpos[l]+kk)*pSPARC->psd[ityp].size] = pSPARC->psd[ityp].UdV[(lpos[l]+kk)*pSPARC->psd[ityp].size+1];
readfiles.c:1612:                pSPARC->psd[ityp].RadialGrid[0] = vtemp;
readfiles.c:1613:                pSPARC->psd[ityp].rVloc[0] = vtemp * vtemp2;
readfiles.c:1614:                pSPARC->psd[ityp].Vloc_0 = vtemp2;
readfiles.c:1616:                for (jj = 1; jj < pSPARC->psd[ityp].size; jj++) {
readfiles.c:1619:                    pSPARC->psd[ityp].RadialGrid[jj] = vtemp;
readfiles.c:1620:                    pSPARC->psd[ityp].rVloc[jj] = vtemp * vtemp2;
readfiles.c:1627:        //if (pSPARC->localPsd[ityp] > pSPARC->psd[ityp].lmax || l > pSPARC->psd[ityp].lmax) {
readfiles.c:1628:        if (pSPARC->localPsd[ityp] > pSPARC->psd[ityp].lmax || l_read == 4) {
readfiles.c:1632:            pSPARC->psd[ityp].rVloc[0] = vtemp * vtemp2;
readfiles.c:1633:            pSPARC->psd[ityp].Vloc_0 = vtemp2;
readfiles.c:1636:            for (jj = 1; jj < pSPARC->psd[ityp].size; jj++) {
readfiles.c:1639:                pSPARC->psd[ityp].rVloc[jj] = vtemp * vtemp2;
readfiles.c:1645:        if (pSPARC->psd[ityp].pspsoc == 1) {
readfiles.c:1646:            for (l = 1; l <= pSPARC->psd[ityp].lmax; l++) {
readfiles.c:1648:                if (l != pSPARC->localPsd[ityp]) {
readfiles.c:1649:                    for (kk = 0; kk < pSPARC->psd[ityp].ppl_soc[l-1]; kk++) {
readfiles.c:1651:                        pSPARC->psd[ityp].Gamma_soc[lpos_soc[l-1]+kk] = vtemp;
readfiles.c:1654:                            pSPARC->psd[ityp].Gamma_soc[lpos_soc[l-1]+kk] = 0.0;
readfiles.c:1657:                    for (jj = 0; jj < pSPARC->psd[ityp].size; jj++) {
readfiles.c:1660:                        pSPARC->psd[ityp].RadialGrid[jj] = vtemp;
readfiles.c:1661:                        for (kk = 0; kk < pSPARC->psd[ityp].ppl_soc[l-1]; kk++) {
readfiles.c:1663:                            pSPARC->psd[ityp].UdV_soc[(lpos_soc[l-1]+kk)*pSPARC->psd[ityp].size+jj] = vtemp/pSPARC->psd[ityp].RadialGrid[jj];
readfiles.c:1666:                    for (kk = 0; kk < pSPARC->psd[ityp].ppl_soc[l-1]; kk++)
readfiles.c:1667:                        pSPARC->psd[ityp].UdV_soc[(lpos_soc[l-1]+kk)*pSPARC->psd[ityp].size] = pSPARC->psd[ityp].UdV_soc[(lpos[l-1]+kk)*pSPARC->psd[ityp].size+1];
readfiles.c:1673:        pSPARC->psd[ityp].rho_c_table = (double *)calloc(pSPARC->psd[ityp].size, sizeof(double));
readfiles.c:1676:            for (jj = 0; jj < pSPARC->psd[ityp].size;jj++) {
readfiles.c:1679:                pSPARC->psd[ityp].rho_c_table[jj] = vtemp / (4.0 * M_PI);
readfiles.c:1685:        for (jj = 0; jj < pSPARC->psd[ityp].size;jj++) {
readfiles.c:1688:            pSPARC->psd[ityp].rhoIsoAtom[jj] = vtemp / (4.0 * M_PI);
readfiles.c:1697:        //for (l = 0; l <= pSPARC->psd[ityp].lmax; l++) {
readfiles.c:1699:        //    pSPARC->psd[ityp].rc[l] = vtemp;
readfiles.c:1705:        if (pSPARC->psd[ityp].size < 2) {
readfiles.c:1706:            printf("Radial grid too small: mmax = %d\n", pSPARC->psd[ityp].size);
readfiles.c:1711:        double dr0 = pSPARC->psd[ityp].RadialGrid[1] - pSPARC->psd[ityp].RadialGrid[0];
readfiles.c:1714:        for (jj = 1; jj < pSPARC->psd[ityp].size; jj++) {
readfiles.c:1715:            dr_j = pSPARC->psd[ityp].RadialGrid[jj] - pSPARC->psd[ityp].RadialGrid[jj-1];
readfiles.c:1725:                printf("r[%d] = %.6E\n",jj-1, pSPARC->psd[ityp].RadialGrid[jj-1]);
readfiles.c:1726:                printf("r[%d] = %.6E\n",jj, pSPARC->psd[ityp].RadialGrid[jj]);
readfiles.c:1733:        pSPARC->psd[ityp].is_r_uniform = is_r_uniform;
readfiles.c:1742:        if (pSPARC->psd[ityp].pspsoc == 1)
readfiles.c:1752:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
readfiles.c:1753:        soc_count += pSPARC->psd[ityp].pspsoc;
readfiles.c:1756:        pSPARC->SOC_Flag = 0;
readfiles.c:1758:        pSPARC->SOC_Flag = 1;
relax.c:43:    if(pSPARC->RestartFlag == 1) {
relax.c:46:            rst_fp = fopen(pSPARC->restart_Filename,"r");
relax.c:48:                pSPARC->RestartFlag = 0;
relax.c:50:        MPI_Bcast(&pSPARC->RestartFlag, 1, MPI_INT, 0, MPI_COMM_WORLD);
relax.c:53:    if (pSPARC->RelaxFlag == 1) {
relax.c:54:        if (strcmpi(pSPARC->RelaxMeth,"NLCG") == 0)
relax.c:56:        else if (strcmpi(pSPARC->RelaxMeth,"LBFGS") == 0)
relax.c:58:        else if (strcmpi(pSPARC->RelaxMeth,"FIRE") == 0)
relax.c:62:                printf("\nCannot recognize RelaxMeth = \"%s\"\n",pSPARC->RelaxMeth);
relax.c:67:    } else if (pSPARC->RelaxFlag == 2 || pSPARC->RelaxFlag == 3) {
relax.c:92:    double sigma = pSPARC->NLCG_sigma, cgtol = pSPARC->TOL_RELAX, sectol = cgtol * 1e-2 ; //TODO: verify cgtol &sectol and sigma
relax.c:94:    int iter, j, atmc, check = (pSPARC->PrintRelaxout == 1 && !rank), check1 = (pSPARC->Printrestart == 1 && !rank), szatm = 3 * pSPARC->n_atom;
relax.c:102:    if(pSPARC->RestartFlag != 0){
relax.c:105:        if(pSPARC->cell_typ != 0){
relax.c:106:            for(atm = 0; atm < pSPARC->n_atom; atm++){
relax.c:107:                Cart2nonCart_coord(pSPARC, &pSPARC->atom_pos[3*atm], &pSPARC->atom_pos[3*atm+1], &pSPARC->atom_pos[3*atm+2]);
relax.c:113:            r[atmc] = pSPARC->forces[atmc];
relax.c:116:            if (fabs(pSPARC->forces[atmc]) > err)
relax.c:117:                err = fabs(pSPARC->forces[atmc]); // defined as supremum norm of force vector
relax.c:121:        pSPARC->d = (double *)malloc(szatm * sizeof(double)); // search direction
relax.c:122:        if (pSPARC->d == NULL) {
relax.c:128:            r[atmc] = pSPARC->forces[atmc];
relax.c:131:            pSPARC->d[atmc] = s[atmc];
relax.c:132:            if (fabs(pSPARC->forces[atmc]) > err)
relax.c:133:                err = fabs(pSPARC->forces[atmc]);
relax.c:137:    pSPARC->elecgs_Count++;
relax.c:138:    pSPARC->RelaxCount++;
relax.c:140:    int imax = pSPARC->Relax_Niter + pSPARC->restartCount + pSPARC->RelaxCount;
relax.c:143:        output_relax = fopen(pSPARC->RelaxFilename,"a");
relax.c:145:       	    printf("\nCannot open file \"%s\"\n",pSPARC->RelaxFilename);
relax.c:149:        output_fp = fopen(pSPARC->OutFilename,"a");
relax.c:151:            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
relax.c:157:        if(pSPARC->RestartFlag == 0){
relax.c:158:            fprintf(output_relax,":RELAXSTEP: %d\n", pSPARC->RelaxCount);
relax.c:165:    iter = pSPARC->RelaxCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0);
relax.c:168:    while (iter < imax && err > cgtol && (t_acc + 1.2 * (MPI_Wtime() - t_init)/60) < pSPARC->TWtime) {
relax.c:171:			output_relax = fopen(pSPARC->RelaxFilename,"a+");
relax.c:173:			    printf("\nCannot open file \"%s\"\n",pSPARC->RelaxFilename);
relax.c:185:            if (fabs(pSPARC->d[atmc]) > delta_d)
relax.c:186:                delta_d = fabs(pSPARC->d[atmc]);
relax.c:187:            y[atmc] = pSPARC->atom_pos[atmc];
relax.c:188:            F[atmc] = pSPARC->forces[atmc];
relax.c:189:            pSPARC->atom_pos[atmc] += sigma * pSPARC->d[atmc];
relax.c:193:        pSPARC->Relax_fac = sigma;
relax.c:197:        pSPARC->elecgs_Count++;
relax.c:200:            eta_prev -= pSPARC->forces[atmc] * pSPARC->d[atmc];
relax.c:201:            pSPARC->atom_pos[atmc] = y[atmc];
relax.c:202:            pSPARC->forces[atmc] = F[atmc];
relax.c:214:                eta -= pSPARC->forces[atmc] * pSPARC->d[atmc];
relax.c:218:                pSPARC->atom_pos[atmc] += alpha * pSPARC->d[atmc];
relax.c:220:            pSPARC->Relax_fac = alpha;
relax.c:224:            pSPARC->elecgs_Count++;
relax.c:235:            r[atmc] = pSPARC->forces[atmc];
relax.c:239:            if (fabs(pSPARC->forces[atmc]) > err)
relax.c:240:                err = fabs(pSPARC->forces[atmc]);
relax.c:245:                pSPARC->d[atmc] = s[atmc];
relax.c:248:                pSPARC->d[atmc] = s[atmc] + beta * pSPARC->d[atmc];
relax.c:255:        if(check1 && !(iter % pSPARC->Printrestart_fq)) // printrestart_fq is the frequency at which the restart file is written
relax.c:258:            pSPARC->RelaxCount++;
relax.c:266:            output_fp = fopen(pSPARC->OutFilename,"a");
relax.c:268:                printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
relax.c:276:        pSPARC->RelaxCount++;
relax.c:281:        pSPARC->RelaxCount--;
relax.c:288:    free(pSPARC->d);
relax.c:304:    double lbfgs_tol = pSPARC->TOL_RELAX;
relax.c:305:    int n = 3 * pSPARC->n_atom;
relax.c:307:    int m = pSPARC->L_history;
relax.c:308:    double finit_stp = pSPARC->L_finit_stp;
relax.c:309:    double maxmov = pSPARC->L_maxmov;
relax.c:310:    int autoscale = pSPARC->L_autoscale;
relax.c:311:    int lineopt = pSPARC->L_lineopt; // Needed only if autoscale = 0
relax.c:312:    double icurv = pSPARC->L_icurv; // Needed only if autoscale = 0
relax.c:315:    pSPARC->isFD = 1; // Never change here
relax.c:316:    pSPARC->isReset = 1; // Never change here
relax.c:317:    pSPARC->step = 0; // Never change here
relax.c:320:    pSPARC->deltaX = (double *)calloc( m*n , sizeof(double) );
relax.c:321:    pSPARC->deltaG = (double *)calloc( m*n , sizeof(double) );
relax.c:322:    pSPARC->iys = (double *) calloc(m , sizeof(double));
relax.c:325:    pSPARC->fold = (double *) malloc(n * sizeof(double));
relax.c:326:    pSPARC->d = (double *) malloc(n * sizeof(double));
relax.c:327:    pSPARC->atom_disp = (double *) malloc(n * sizeof(double));
relax.c:332:    int check = (pSPARC->PrintRelaxout == 1 && !rank), check1 = (pSPARC->Printrestart == 1 && !rank);
relax.c:337:    if(pSPARC->RestartFlag != 0){
relax.c:340:        if(pSPARC->cell_typ != 0){
relax.c:341:            for(atm = 0; atm < pSPARC->n_atom; atm++){
relax.c:342:                Cart2nonCart_coord(pSPARC, &pSPARC->atom_pos[3*atm], &pSPARC->atom_pos[3*atm+1], &pSPARC->atom_pos[3*atm+2]);
relax.c:348:            if (fabs(pSPARC->forces[i]) > err)
relax.c:349:                err = fabs(pSPARC->forces[i]); // defined as supremum norm of force vector
relax.c:355:            if (fabs(pSPARC->forces[i]) > err)
relax.c:356:                err = fabs(pSPARC->forces[i]); // defined as supremum norm of force vector
relax.c:360:    pSPARC->elecgs_Count++;
relax.c:361:    pSPARC->RelaxCount++;
relax.c:363:    int imax = pSPARC->Relax_Niter + pSPARC->restartCount + pSPARC->RelaxCount;
relax.c:366:        output_relax = fopen(pSPARC->RelaxFilename,"a");
relax.c:368:            printf("\nCannot open file \"%s\"\n",pSPARC->RelaxFilename);
relax.c:372:        output_fp = fopen(pSPARC->OutFilename,"a");
relax.c:374:            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
relax.c:380:        if(pSPARC->RestartFlag == 0){
relax.c:381:            fprintf(output_relax,":RELAXSTEP: %d\n", pSPARC->RelaxCount);
relax.c:388:    iter = pSPARC->RelaxCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0);
relax.c:392:    while (iter < imax && err > lbfgs_tol && (t_acc + 1.2 * (MPI_Wtime() - t_init)/60.0) < pSPARC->TWtime) {
relax.c:395:            output_relax = fopen(pSPARC->RelaxFilename,"a+");
relax.c:397:                printf("\nCannot open file \"%s\"\n",pSPARC->RelaxFilename);
relax.c:409:            if(pSPARC->isFD){
relax.c:410:            // Take the finite difference pSPARC->step down the forces
relax.c:411:                fnorm = norm(n, pSPARC->forces);
relax.c:413:                    pSPARC->d[i] = pSPARC->forces[i]/fnorm; // normalized force direction
relax.c:414:                    xold[i] = pSPARC->atom_pos[i];
relax.c:415:                    pSPARC->fold[i] = pSPARC->forces[i];
relax.c:416:                    pSPARC->atom_pos[i] += pSPARC->d[i] * finit_stp; // finite difference pSPARC->step in the direction of the force
relax.c:418:                pSPARC->Relax_fac = finit_stp; // Needed for charge extrapolation
relax.c:419:                pSPARC->isFD = 0;
relax.c:422:                    pSPARC->d[i] = pSPARC->atom_disp[i];
relax.c:424:                dnorm = norm(n, pSPARC->d);
relax.c:425:                fp1 = dotproduct(n, pSPARC->fold, 0, pSPARC->d, 0)/dnorm;
relax.c:426:                fp2 = dotproduct(n, pSPARC->forces, 0, pSPARC->d, 0)/dnorm;
relax.c:430:                    pSPARC->isReset = 1;
relax.c:433:                if(pSPARC->isReset == 1){
relax.c:434:                    pSPARC->step = 0;
relax.c:435:                    pSPARC->isReset = 0;
relax.c:437:                    if(pSPARC->step < m){
relax.c:438:                        s_pos = pSPARC->step * n;
relax.c:440:                            pSPARC->deltaX[s_pos + i] = pSPARC->atom_disp[i];
relax.c:441:                            pSPARC->deltaG[s_pos + i] = pSPARC->fold[i] - pSPARC->forces[i];
relax.c:443:                        pSPARC->iys[pSPARC->step] = 1.0/dotproduct(n, pSPARC->deltaX, s_pos, pSPARC->deltaG, s_pos);
relax.c:447:                            pSPARC->deltaX[i] = pSPARC->deltaX[i + n];
relax.c:448:                            pSPARC->deltaG[i] = pSPARC->deltaG[i + n];
relax.c:451:                            pSPARC->iys[i] = pSPARC->iys[i + 1];
relax.c:453:                            pSPARC->deltaX[s_pos + i] = pSPARC->atom_disp[i];
relax.c:454:                            pSPARC->deltaG[s_pos + i] = pSPARC->fold[i] - pSPARC->forces[i];
relax.c:456:                        pSPARC->iys[m-1] = 1.0/dotproduct(n, pSPARC->deltaX, s_pos, pSPARC->deltaG, s_pos);
relax.c:458:                    pSPARC->step++;
relax.c:461:                    xold[i] = pSPARC->atom_pos[i];
relax.c:462:                    pSPARC->fold[i] = pSPARC->forces[i];
relax.c:464:                if(pSPARC->step < m)
relax.c:465:                    bound = pSPARC->step;
relax.c:471:                    pSPARC->d[i] = -pSPARC->forces[i];
relax.c:476:                    alpha[j] = dotproduct(n, pSPARC->deltaX, s_pos, pSPARC->d, 0);
relax.c:477:                    alpha[j] *= pSPARC->iys[j];
relax.c:479:                        pSPARC->d[k] -= alpha[j] * pSPARC->deltaG[s_pos + k];
relax.c:482:                    pSPARC->d[i] = icurv * pSPARC->d[i];
relax.c:485:                    beta = dotproduct(n, pSPARC->deltaG, s_pos, pSPARC->d, 0);
relax.c:486:                    beta *= pSPARC->iys[i];
relax.c:488:                        pSPARC->d[k] += pSPARC->deltaX[s_pos + k] * (alpha[i] - beta);
relax.c:491:                    pSPARC->d[i] = -pSPARC->d[i];
relax.c:494:                stp_sz = norm(n, pSPARC->d);
relax.c:496:                    pSPARC->isReset = 1;
relax.c:498:                    fnorm = norm(n, pSPARC->forces);
relax.c:500:                        pSPARC->d[i] = stp_sz * pSPARC->forces[i]/fnorm; //  Take a steepest descent pSPARC->step
relax.c:503:                    fnorm = norm(n, pSPARC->forces);
relax.c:505:                        pSPARC->d[i] = pSPARC->forces[i]/fnorm;
relax.c:506:                        pSPARC->atom_pos[i] += maxmov * pSPARC->d[i];
relax.c:508:                    pSPARC->Relax_fac = maxmov;
relax.c:512:                        pSPARC->atom_pos[i] += pSPARC->d[i];
relax.c:513:                    pSPARC->Relax_fac = 1.0;
relax.c:517:            if(pSPARC->isFD){
relax.c:518:                pSPARC->isFD = 0;
relax.c:519:                a1 = fabs(dotproduct(n, pSPARC->forces, 0, pSPARC->fold, 0));
relax.c:520:                a2 = dotproduct(n, pSPARC->fold, 0, pSPARC->fold, 0);
relax.c:522:                    pSPARC->isReset = 1;
relax.c:524:                    pSPARC->isReset = 0;
relax.c:526:                    pSPARC->isReset = 1;
relax.c:527:                if(pSPARC->isReset){
relax.c:528:                    pSPARC->step = 0;
relax.c:529:                    pSPARC->isReset = 0;
relax.c:531:                    if(pSPARC->step < m){
relax.c:532:                        s_pos = pSPARC->step * n;
relax.c:534:                            pSPARC->deltaX[s_pos + i] = pSPARC->atom_disp[i];
relax.c:535:                            pSPARC->deltaG[s_pos + i] = pSPARC->fold[i] - pSPARC->forces[i];
relax.c:537:                        pSPARC->iys[pSPARC->step] = 1.0/dotproduct(n, pSPARC->deltaX, s_pos, pSPARC->deltaG, s_pos);
relax.c:541:                            pSPARC->deltaX[i] = pSPARC->deltaX[i + n];
relax.c:542:                            pSPARC->deltaG[i] = pSPARC->deltaG[i + n];
relax.c:545:                            pSPARC->iys[i] = pSPARC->iys[i + 1];
relax.c:547:                            pSPARC->deltaX[s_pos + i] = pSPARC->atom_disp[i];
relax.c:548:                            pSPARC->deltaG[s_pos + i] = pSPARC->fold[i] - pSPARC->forces[i];
relax.c:550:                        pSPARC->iys[m-1] = 1.0/dotproduct(n, pSPARC->deltaX, s_pos, pSPARC->deltaG, s_pos);
relax.c:552:                    pSPARC->step++;
relax.c:555:                    xold[i] = pSPARC->atom_pos[i];
relax.c:556:                    pSPARC->fold[i] = pSPARC->forces[i];
relax.c:558:                if(pSPARC->step < m)
relax.c:559:                    bound = pSPARC->step;
relax.c:566:                    pSPARC->d[i] = -pSPARC->forces[i];
relax.c:570:                    alpha[j] = dotproduct(n, pSPARC->deltaX, s_pos, pSPARC->d, 0);
relax.c:571:                    alpha[j] *= pSPARC->iys[j];
relax.c:573:                        pSPARC->d[k] -= alpha[j] * pSPARC->deltaG[s_pos + k];
relax.c:576:                    pSPARC->d[i] = icurv * pSPARC->d[i];
relax.c:579:                    beta = dotproduct(n, pSPARC->deltaG, s_pos, pSPARC->d, 0);
relax.c:580:                    beta *= pSPARC->iys[i];
relax.c:582:                        pSPARC->d[k] += pSPARC->deltaX[s_pos + k] * (alpha[i] - beta);
relax.c:585:                    pSPARC->d[i] = -pSPARC->d[i];
relax.c:588:                    dnorm = norm(n, pSPARC->d);
relax.c:590:                        pSPARC->d[i] /= dnorm;
relax.c:591:                        pSPARC->atom_pos[i] += pSPARC->d[i] * finit_stp; // finite difference pSPARC->step along search direction
relax.c:593:                    pSPARC->Relax_fac = finit_stp;
relax.c:595:                    stp_sz = dnorm = norm(n, pSPARC->d);
relax.c:599:                            pSPARC->d[i] = stp_sz * pSPARC->d[i]/dnorm;
relax.c:602:                        pSPARC->atom_pos[i] += pSPARC->d[i];
relax.c:603:                    pSPARC->Relax_fac = 1.0;
relax.c:604:                    pSPARC->isFD = 1;
relax.c:607:                pSPARC->isFD = 1;
relax.c:608:                fp1 = dotproduct(n, pSPARC->fold, 0, pSPARC->d, 0);
relax.c:609:                fp2 = dotproduct(n, pSPARC->forces, 0, pSPARC->d, 0);
relax.c:622:                    pSPARC->atom_pos[i] += pSPARC->d[i] * stp_sz;
relax.c:623:                pSPARC->Relax_fac = stp_sz;
relax.c:629:            pSPARC->atom_disp[i] = pSPARC->atom_pos[i] - xold[i];
relax.c:634:        pSPARC->elecgs_Count++;
relax.c:637:            if (fabs(pSPARC->forces[i]) > err)
relax.c:638:                err = fabs(pSPARC->forces[i]); // defined as supremum norm of force vector
relax.c:644:        if(check1 && !(iter % pSPARC->Printrestart_fq)) // printrestart_fq is the frequency at which the restart file is written
relax.c:647:            pSPARC->RelaxCount++;
relax.c:654:            output_fp = fopen(pSPARC->OutFilename,"a");
relax.c:656:                printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
relax.c:664:        pSPARC->RelaxCount++;
relax.c:671:        pSPARC->RelaxCount--;
relax.c:674:    free(pSPARC->deltaX);
relax.c:675:    free(pSPARC->deltaG);
relax.c:676:    free(pSPARC->iys);
relax.c:679:    free(pSPARC->fold);
relax.c:680:    free(pSPARC->atom_disp);
relax.c:681:    free(pSPARC->d);
relax.c:715:    double fire_tol = pSPARC->TOL_RELAX;
relax.c:717:    pSPARC->FIRE_dt *= pSPARC->fs2atu; // convert from femto second to atomic unit of time
relax.c:718:    double mass = pSPARC->FIRE_mass * pSPARC->amu2au; // convert from amu to atomic unit of mass
relax.c:719:    double maxmov = pSPARC->FIRE_maxmov;
relax.c:726:    double dtMax = 10.0 * pSPARC->FIRE_dt;
relax.c:729:    int check = (pSPARC->PrintRelaxout == 1 && !rank), check1 = (pSPARC->Printrestart == 1 && !rank);
relax.c:730:    int n = 3 * pSPARC->n_atom, i, iter;
relax.c:733:    pSPARC->d = (double *) malloc(n * sizeof(double)); // displacement vector
relax.c:734:    pSPARC->FIRE_vel = (double *) malloc(n * sizeof(double));
relax.c:738:    if(pSPARC->RestartFlag != 0){
relax.c:741:        if(pSPARC->cell_typ != 0){
relax.c:742:            for(atm = 0; atm < pSPARC->n_atom; atm++){
relax.c:743:                Cart2nonCart_coord(pSPARC, &pSPARC->atom_pos[3*atm], &pSPARC->atom_pos[3*atm+1], &pSPARC->atom_pos[3*atm+2]);
relax.c:749:            if (fabs(pSPARC->forces[i]) > err)
relax.c:750:                err = fabs(pSPARC->forces[i]); // defined as supremum norm of force vector
relax.c:753:            acc[i] = pSPARC->forces[i]/mass;
relax.c:759:            if (fabs(pSPARC->forces[i]) > err)
relax.c:760:                err = fabs(pSPARC->forces[i]); // defined as supremum norm of force vector
relax.c:763:        pSPARC->FIRE_resetIter = 0;
relax.c:764:        pSPARC->FIRE_alpha = alphaStart;
relax.c:765:        pSPARC->FIRE_dtNow = pSPARC->FIRE_dt;
relax.c:767:            pSPARC->FIRE_vel[i] = 0.0; // TODO: Is this the best initialization of velocities?
relax.c:768:            acc[i] = pSPARC->forces[i]/mass;
relax.c:772:    pSPARC->elecgs_Count++;
relax.c:773:    pSPARC->RelaxCount++;
relax.c:775:    int imax = pSPARC->Relax_Niter + pSPARC->restartCount + pSPARC->RelaxCount;
relax.c:778:        output_relax = fopen(pSPARC->RelaxFilename,"a");
relax.c:780:            printf("\nCannot open file \"%s\"\n",pSPARC->RelaxFilename);
relax.c:784:        output_fp = fopen(pSPARC->OutFilename,"a");
relax.c:786:            printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
relax.c:792:        if(pSPARC->RestartFlag == 0){
relax.c:793:            fprintf(output_relax,":RELAXSTEP: %d\n", pSPARC->RelaxCount);
relax.c:800:    iter = pSPARC->RelaxCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0);
relax.c:803:    while (iter < imax && err > fire_tol && (t_acc + 1.2 * (MPI_Wtime() - t_init)/60.0) < pSPARC->TWtime) {
relax.c:806:            output_relax = fopen(pSPARC->RelaxFilename,"a+");
relax.c:808:                printf("\nCannot open file \"%s\"\n",pSPARC->RelaxFilename);
relax.c:821:            pSPARC->FIRE_vel[i] += 0.5 * pSPARC->FIRE_dtNow * acc[i];
relax.c:822:            pSPARC->d[i] = pSPARC->FIRE_vel[i] * pSPARC->FIRE_dtNow;
relax.c:823:            if(pSPARC->d[i] > maxmov)
relax.c:824:                pSPARC->d[i] = maxmov;
relax.c:825:            else if(pSPARC->d[i] < -maxmov)
relax.c:826:                pSPARC->d[i] = -maxmov;
relax.c:827:            pSPARC->atom_pos[i] += pSPARC->d[i];
relax.c:829:        pSPARC->Relax_fac = 1.0;
relax.c:833:        pSPARC->elecgs_Count++;
relax.c:836:            acc[i] = pSPARC->forces[i]/mass;
relax.c:837:            pSPARC->FIRE_vel[i] += 0.5 * acc[i] * pSPARC->FIRE_dtNow;
relax.c:841:        Pw = dotproduct(n, pSPARC->forces, 0, pSPARC->FIRE_vel, 0);
relax.c:844:                pSPARC->FIRE_vel[i] = 0.0; // Reset velocity
relax.c:845:            pSPARC->FIRE_resetIter = iter;
relax.c:846:            pSPARC->FIRE_dtNow *= fDec; // decrease dt
relax.c:847:            pSPARC->FIRE_alpha = alphaStart; // reset alpha
relax.c:848:        } else if(Pw >= 0.0 && (iter - pSPARC->FIRE_resetIter) > nMIN){
relax.c:849:            pSPARC->FIRE_dtNow = min(pSPARC->FIRE_dtNow * fInc, dtMax); // update dt
relax.c:850:            pSPARC->FIRE_alpha *= fAlpha; // update alpha
relax.c:853:        fnorm = norm(n, pSPARC->forces);
relax.c:854:        vnorm = norm(n, pSPARC->FIRE_vel);
relax.c:856:            pSPARC->FIRE_vel[i] = (1.0 - pSPARC->FIRE_alpha) * pSPARC->FIRE_vel[i] + (pSPARC->FIRE_alpha * vnorm) * (pSPARC->forces[i]/fnorm); // modified velocity
relax.c:862:            if (fabs(pSPARC->forces[i]) > err)
relax.c:863:                err = fabs(pSPARC->forces[i]); // defined as supremum norm of force vector
relax.c:870:        if(check1 && !(iter % pSPARC->Printrestart_fq)) // printrestart_fq is the frequency at which the restart file is written
relax.c:873:            pSPARC->RelaxCount++;
relax.c:882:            output_fp = fopen(pSPARC->OutFilename,"a");
relax.c:884:                printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
relax.c:891:        pSPARC->RelaxCount++;
relax.c:897:        pSPARC->RelaxCount--;
relax.c:901:    free(pSPARC->d);
relax.c:902:    free(pSPARC->FIRE_vel);
relax.c:923:    if (pSPARC->cell_typ <= 20) {
relax.c:924:        pSPARC->cellrelax_dims[0] = 1 - pSPARC->BCx;
relax.c:925:        pSPARC->cellrelax_dims[1] = 1 - pSPARC->BCy;
relax.c:926:        pSPARC->cellrelax_dims[2] = 1 - pSPARC->BCz;
relax.c:927:    } else if (pSPARC->cell_typ > 20 && pSPARC->cell_typ <= 30) {
relax.c:928:        pSPARC->cellrelax_dims[0] = 0;
relax.c:929:        pSPARC->cellrelax_dims[1] = 0;
relax.c:930:        pSPARC->cellrelax_dims[2] = 1;
relax.c:933:    pSPARC->cellrelax_ndim = pSPARC->cellrelax_dims[0]
relax.c:934:                           + pSPARC->cellrelax_dims[1]
relax.c:935:                           + pSPARC->cellrelax_dims[2];
relax.c:937:    double max_dilatation = pSPARC->max_dilatation;
relax.c:939:    double Lx = pSPARC->range_x;
relax.c:940:    double Ly = pSPARC->range_y;
relax.c:941:    double Lz = pSPARC->range_z;
relax.c:943:    if (pSPARC->cell_typ <= 20) {
relax.c:944:        V = Lx * Ly * Lz * pSPARC->Jacbdet;
relax.c:945:    } else if (pSPARC->cell_typ > 20 && pSPARC->cell_typ <= 30) {
relax.c:946:        V = Lx * ((pSPARC->xin + pSPARC->xout)/2.0) * Ly * Lz;
relax.c:947:        pSPARC->twistpercell = pSPARC->twist * Lz;
relax.c:950:    double V_lwbd = V / pow(max_dilatation,pSPARC->cellrelax_ndim);
relax.c:951:    double V_upbd = V * pow(max_dilatation,pSPARC->cellrelax_ndim);
relax.c:954:    double optVol = BrentsFun(pSPARC, V_lwbd, V_upbd, 1e-4, pSPARC->TOL_RELAX_CELL, pSPARC->Relax_Niter);
relax.c:958:                        pSPARC->range_x, pSPARC->range_y, pSPARC->range_z);
relax.c:978:    if (pSPARC->RelaxFlag == 2) {
relax.c:980:        pSPARC->Calc_stress = 1;
relax.c:982:        pSPARC->elecgs_Count++;
relax.c:983:        pSPARC->RelaxCount++;
relax.c:986:        if (pSPARC->PrintRelaxout == 1) {
relax.c:989:    } else if (pSPARC->RelaxFlag == 3) { // Perform atomic relaxation before for this cell for full relaxation
relax.c:990:        pSPARC->RelaxFlag = 1;
relax.c:991:        pSPARC->Calc_stress = 1;
relax.c:992:        pSPARC->StressCount = pSPARC->elecgs_Count;
relax.c:995:        if(pSPARC->cell_typ != 0){
relax.c:996:            for(int atm = 0; atm < pSPARC->n_atom; atm++){
relax.c:997:                Cart2nonCart_coord(pSPARC, &pSPARC->atom_pos[3*atm], &pSPARC->atom_pos[3*atm+1], &pSPARC->atom_pos[3*atm+2]);
relax.c:1001:        pSPARC->RelaxFlag = 3;
relax.c:1010:    if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20){
relax.c:1012:        stress_tmp[0] = pSPARC->stress[0]; stress_tmp[1] = pSPARC->stress[1]; stress_tmp[2] = pSPARC->stress[2];
relax.c:1013:        stress_tmp[3] = pSPARC->stress[1]; stress_tmp[4] = pSPARC->stress[3]; stress_tmp[5] = pSPARC->stress[4];
relax.c:1014:        stress_tmp[6] = pSPARC->stress[2]; stress_tmp[7] = pSPARC->stress[4]; stress_tmp[8] = pSPARC->stress[5];
relax.c:1017:                stress_lc[0] += pSPARC->LatUVec[k] * stress_tmp[3*k+l] * pSPARC->gradT[l];
relax.c:1018:                stress_lc[1] += pSPARC->LatUVec[k] * stress_tmp[3*k+l] * pSPARC->gradT[3+l];
relax.c:1019:                stress_lc[2] += pSPARC->LatUVec[k] * stress_tmp[3*k+l] * pSPARC->gradT[6+l];
relax.c:1020:                stress_lc[3] += pSPARC->LatUVec[3+k] * stress_tmp[3*k+l] * pSPARC->gradT[3+l];
relax.c:1021:                stress_lc[4] += pSPARC->LatUVec[3+k] * stress_tmp[3*k+l] * pSPARC->gradT[6+l];
relax.c:1022:                stress_lc[5] += pSPARC->LatUVec[6+k] * stress_tmp[3*k+l] * pSPARC->gradT[6+l];
relax.c:1028:            stress_lc[i] = pSPARC->stress[i];
relax.c:1039:        if(pSPARC->BC == 2) {
relax.c:1049:        if (pSPARC->cellrelax_dims[0] == 1) max_P_stress += stress_diag[0];
relax.c:1050:        if (pSPARC->cellrelax_dims[1] == 1) max_P_stress += stress_diag[1];
relax.c:1051:        if (pSPARC->cellrelax_dims[2] == 1) max_P_stress += stress_diag[2];
relax.c:1053:        max_P_stress /= pSPARC->cellrelax_ndim;
relax.c:1099:    if (pSPARC->cell_typ <= 20) {
relax.c:1100:        vol_old = pSPARC->range_x * pSPARC->range_y * pSPARC->range_z * pSPARC->Jacbdet;
relax.c:1101:    } else if (pSPARC->cell_typ > 20 && pSPARC->cell_typ <= 30) {
relax.c:1102:        vol_old = pSPARC->range_x * ((pSPARC->xin + pSPARC->xout)/2.0) * pSPARC->range_y * pSPARC->range_z;
relax.c:1106:    double scal = pow(vol / vol_old, 1.0/pSPARC->cellrelax_ndim);
relax.c:1109:    if (pSPARC->cellrelax_dims[0] == 1) pSPARC->range_x *= scal;
relax.c:1110:    if (pSPARC->cellrelax_dims[1] == 1) pSPARC->range_y *= scal;
relax.c:1111:    if (pSPARC->cellrelax_dims[2] == 1) pSPARC->range_z *= scal;
relax.c:1114:    if (pSPARC->cellrelax_dims[0] == 1) pSPARC->delta_x *= scal;
relax.c:1115:    if (pSPARC->cellrelax_dims[1] == 1) pSPARC->delta_y *= scal;
relax.c:1116:    if (pSPARC->cellrelax_dims[2] == 1) pSPARC->delta_z *= scal;
relax.c:1118:    if (pSPARC->cell_typ <= 20) {
relax.c:1119:        pSPARC->dV = pSPARC->delta_x * pSPARC->delta_y * pSPARC->delta_z * pSPARC->Jacbdet;
relax.c:1120:    } else if (pSPARC->cell_typ > 20 && pSPARC->cell_typ <= 30) {
relax.c:1121:        pSPARC->dV = pSPARC->delta_x * pSPARC->delta_y * pSPARC->delta_z;
relax.c:1122:        pSPARC->twist = pSPARC->twistpercell/pSPARC->range_z;
relax.c:1127:    for(int ityp = 0; ityp < pSPARC->Ntypes; ityp++){
relax.c:1128:        for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++) {
relax.c:1129:            if (pSPARC->cellrelax_dims[0] == 1) pSPARC->atom_pos[3*count  ] *= scal;
relax.c:1130:            if (pSPARC->cellrelax_dims[1] == 1) pSPARC->atom_pos[3*count+1] *= scal;
relax.c:1131:            if (pSPARC->cellrelax_dims[2] == 1) pSPARC->atom_pos[3*count+2] *= scal;
relax.c:1139:        printf("CELL  : %12.6f\t%12.6f\t%12.6f\n",pSPARC->range_x,pSPARC->range_y,pSPARC->range_z);
relax.c:1141:        for (i = 0; i < 3 * pSPARC->n_atom; i++) {
relax.c:1142:            printf("%12.6f\t",pSPARC->atom_pos[i]);
relax.c:1151:    int FDn = pSPARC->order / 2;
relax.c:1155:    dx_inv = 1.0 / pSPARC->delta_x;
relax.c:1156:    dy_inv = 1.0 / pSPARC->delta_y;
relax.c:1157:    dz_inv = 1.0 / pSPARC->delta_z;
relax.c:1159:        pSPARC->D1_stencil_coeffs_x[p] = pSPARC->FDweights_D1[p] * dx_inv;
relax.c:1160:        pSPARC->D1_stencil_coeffs_y[p] = pSPARC->FDweights_D1[p] * dy_inv;
relax.c:1161:        pSPARC->D1_stencil_coeffs_z[p] = pSPARC->FDweights_D1[p] * dz_inv;
relax.c:1164:    if (pSPARC->CyclixFlag) {
relax.c:1166:        Integration_weights_cyclix(pSPARC, pSPARC->Intgwt_kpttopo, pSPARC->DMVertices_kptcomm[0], pSPARC->Nx_d_kptcomm, pSPARC->Ny_d_kptcomm, pSPARC->Nz_d_kptcomm);
relax.c:1167:        Integration_weights_cyclix(pSPARC, pSPARC->Intgwt_psi, pSPARC->DMVertices_dmcomm[0], pSPARC->Nx_d_dmcomm, pSPARC->Ny_d_dmcomm, pSPARC->Nz_d_dmcomm);
relax.c:1168:        Integration_weights_cyclix(pSPARC, pSPARC->Intgwt_phi, pSPARC->DMVertices[0], pSPARC->Nx_d, pSPARC->Ny_d, pSPARC->Nz_d);
relax.c:1172:        dx2_inv = 1.0 / (pSPARC->delta_x * pSPARC->delta_x);
relax.c:1173:        dy2_inv = 1.0 / (pSPARC->delta_y * pSPARC->delta_y);
relax.c:1174:        dz2_inv = 1.0 / (pSPARC->delta_z * pSPARC->delta_z);
relax.c:1177:        if (pSPARC->cell_typ == 0) {
relax.c:1179:                pSPARC->D2_stencil_coeffs_x[p] = pSPARC->FDweights_D2[p] * dx2_inv;
relax.c:1180:                pSPARC->D2_stencil_coeffs_y[p] = pSPARC->FDweights_D2[p] * dy2_inv;
relax.c:1181:                pSPARC->D2_stencil_coeffs_z[p] = pSPARC->FDweights_D2[p] * dz2_inv;
relax.c:1183:        } else if (pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
relax.c:1185:                pSPARC->D2_stencil_coeffs_x[p] = pSPARC->lapcT[0] * pSPARC->FDweights_D2[p] * dx2_inv;
relax.c:1186:                pSPARC->D2_stencil_coeffs_y[p] = pSPARC->lapcT[4] * pSPARC->FDweights_D2[p] * dy2_inv;
relax.c:1187:                pSPARC->D2_stencil_coeffs_z[p] = pSPARC->lapcT[8] * pSPARC->FDweights_D2[p] * dz2_inv;
relax.c:1188:                pSPARC->D2_stencil_coeffs_xy[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dx_inv; // 2*T_12 d/dx(df/dy)
relax.c:1189:                pSPARC->D2_stencil_coeffs_xz[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dx_inv; // 2*T_13 d/dx(df/dz)
relax.c:1190:                pSPARC->D2_stencil_coeffs_yz[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dy_inv; // 2*T_23 d/dy(df/dz)
relax.c:1191:                pSPARC->D1_stencil_coeffs_xy[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dy_inv; // d/dx(2*T_12 df/dy) used in d/dx(2*T_12 df/dy + 2*T_13 df/dz)
relax.c:1192:                pSPARC->D1_stencil_coeffs_yx[p] = 2 * pSPARC->lapcT[1] * pSPARC->FDweights_D1[p] * dx_inv; // d/dy(2*T_12 df/dx) used in d/dy(2*T_12 df/dx + 2*T_23 df/dz)
relax.c:1193:                pSPARC->D1_stencil_coeffs_xz[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dz_inv; // d/dx(2*T_13 df/dz) used in d/dx(2*T_12 df/dy + 2*T_13 df/dz)
relax.c:1194:                pSPARC->D1_stencil_coeffs_zx[p] = 2 * pSPARC->lapcT[2] * pSPARC->FDweights_D1[p] * dx_inv; // d/dz(2*T_13 df/dx) used in d/dz(2*T_13 df/dz + 2*T_23 df/dy)
relax.c:1195:                pSPARC->D1_stencil_coeffs_yz[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dz_inv; // d/dy(2*T_23 df/dz) used in d/dy(2*T_12 df/dx + 2*T_23 df/dz)
relax.c:1196:                pSPARC->D1_stencil_coeffs_zy[p] = 2 * pSPARC->lapcT[5] * pSPARC->FDweights_D1[p] * dy_inv; // d/dz(2*T_23 df/dy) used in d/dz(2*T_12 df/dx + 2*T_23 df/dy)
relax.c:1201:        if(pSPARC->cell_typ == 0) {
relax.c:1205:            pSPARC->MaxEigVal_mhalfLap = pSPARC->D2_stencil_coeffs_x[0]
relax.c:1206:                                    + pSPARC->D2_stencil_coeffs_y[0]
relax.c:1207:                                    + pSPARC->D2_stencil_coeffs_z[0];
relax.c:1209:            scal_x = (pSPARC->Nx - pSPARC->Nx % 2) / (double) pSPARC->Nx;
relax.c:1210:            scal_y = (pSPARC->Ny - pSPARC->Ny % 2) / (double) pSPARC->Ny;
relax.c:1211:            scal_z = (pSPARC->Nz - pSPARC->Nz % 2) / (double) pSPARC->Nz;
relax.c:1213:                pSPARC->MaxEigVal_mhalfLap += 2.0 * (pSPARC->D2_stencil_coeffs_x[p] * cos(M_PI*p*scal_x)
relax.c:1214:                                                + pSPARC->D2_stencil_coeffs_y[p] * cos(M_PI*p*scal_y)
relax.c:1215:                                                + pSPARC->D2_stencil_coeffs_z[p] * cos(M_PI*p*scal_z));
relax.c:1217:            pSPARC->MaxEigVal_mhalfLap *= -0.5;
relax.c:1221:                pSPARC->MaxEigVal_mhalfLap, (t2-t1)*1e3);
relax.c:1226:        if (fabs(pSPARC->delta_x - pSPARC->delta_y) < 1E-12 &&
relax.c:1227:            fabs(pSPARC->delta_y - pSPARC->delta_z) < 1E-12) {
relax.c:1228:            h_eff = pSPARC->delta_x;
relax.c:1235:        if (pSPARC->ChebDegree < 0) {
relax.c:1236:            pSPARC->ChebDegree = Mesh2ChebDegree(h_eff);
relax.c:1241:            if (!rank) printf("h_eff = %.2f, npl = %d\n", h_eff,pSPARC->ChebDegree);
relax.c:1245:            if (!rank) printf("Chebyshev polynomial degree (provided by user): npl = %d\n",pSPARC->ChebDegree);
relax.c:1250:        if (pSPARC->TOL_PRECOND < 0.0) { // kerker tol not provided by user
relax.c:1251:            pSPARC->TOL_PRECOND = (h_eff * h_eff) * 1e-3;
relax.c:1260:    if (pSPARC->Nkpts >= 1 && pSPARC->kptcomm_index != -1) {
relax.c:1292:    FILE *output_fp = fopen(pSPARC->OutFilename,"a");
relax.c:1294:        printf("\nCannot open file \"%s\"\n",pSPARC->OutFilename);
relax.c:1300:    fprintf(output_fp,"CELL: %.15g %.15g %.15g \n",pSPARC->range_x,pSPARC->range_y,pSPARC->range_z);
relax.c:1301:    fprintf(output_fp,"CHEB_DEGREE: %d\n",pSPARC->ChebDegree);
relax.c:1305:    if ( (fabs(pSPARC->delta_x-pSPARC->delta_y) <=1e-12) && (fabs(pSPARC->delta_x-pSPARC->delta_z) <=1e-12)
relax.c:1306:        && (fabs(pSPARC->delta_y-pSPARC->delta_z) <=1e-12) ) {
relax.c:1307:        fprintf(output_fp,"Mesh spacing                       :  %.6g (Bohr)\n",pSPARC->delta_x);
relax.c:1309:        fprintf(output_fp,"Mesh spacing in x-direction        :  %.6g (Bohr)\n",pSPARC->delta_x);
relax.c:1310:        fprintf(output_fp,"Mesh spacing in y-direction        :  %.6g (Bohr)\n",pSPARC->delta_y);
relax.c:1311:        fprintf(output_fp,"Mesh spacing in z direction        :  %.6g (Bohr)\n",pSPARC->delta_z);
relax.c:1323:    FILE *output_fp = fopen(pSPARC->RelaxFilename,"a");
relax.c:1325:        printf("\nCannot open file \"%s\"\n",pSPARC->RelaxFilename);
relax.c:1329:    fprintf(output_fp,":RELAXSTEP: %d\n", pSPARC->RelaxCount);
relax.c:1330:    fprintf(output_fp,":CELL: %18.10E %18.10E %18.10E\n", pSPARC->range_x, pSPARC->range_y, pSPARC->range_z);
relax.c:1331:    fprintf(output_fp,":VOLUME: %18.10E\n", pSPARC->range_x*pSPARC->range_y*pSPARC->range_z*pSPARC->Jacbdet);
relax.c:1333:    fprintf(output_fp,"%18.10E %18.10E %18.10E \n",pSPARC->LatVec[0],pSPARC->LatVec[1],pSPARC->LatVec[2]);
relax.c:1334:    fprintf(output_fp,"%18.10E %18.10E %18.10E \n",pSPARC->LatVec[3],pSPARC->LatVec[4],pSPARC->LatVec[5]);
relax.c:1335:    fprintf(output_fp,"%18.10E %18.10E %18.10E \n",pSPARC->LatVec[6],pSPARC->LatVec[7],pSPARC->LatVec[8]);
relax.c:1338:    PrintStress(pSPARC, pSPARC->stress, output_fp);
relax.c:1355:    // if (pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return 0.0;
relax.c:1458:    if (pSPARC->CyclixFlag) {
relax.c:1459:        fprintf(output_relax,":TOTAL TWIST(rad): %18.10E\n", pSPARC->twist*pSPARC->range_z);
relax.c:1461:    fprintf(output_relax,":E(Ha): %.15E\n", pSPARC->Etot);
relax.c:1464:    for(atm = 0; atm < pSPARC->n_atom; atm++){
relax.c:1465:        fprintf(output_relax,"%20.15f %20.15f %20.15f\n", pSPARC->atom_pos[3 * atm], pSPARC->atom_pos[3 * atm + 1], pSPARC->atom_pos[3 * atm + 2]);
relax.c:1469:    for(atm = 0; atm < pSPARC->n_atom; atm++){
relax.c:1470:        fprintf(output_relax,"%20.15f %20.15f %20.15f\n", pSPARC->forces[3 * atm], pSPARC->forces[3 * atm + 1], pSPARC->forces[3 * atm + 2]);
relax.c:1473:    if(pSPARC->Calc_stress == 1) {
relax.c:1474:        fprintf(output_relax,":CELL: %18.10E %18.10E %18.10E\n", pSPARC->range_x, pSPARC->range_y, pSPARC->range_z);
relax.c:1475:        fprintf(output_relax,":VOLUME: %18.10E\n", pSPARC->range_x*pSPARC->range_y*pSPARC->range_z*pSPARC->Jacbdet);
relax.c:1477:        fprintf(output_relax,"%18.10E %18.10E %18.10E \n",pSPARC->LatVec[0],pSPARC->LatVec[1],pSPARC->LatVec[2]);
relax.c:1478:        fprintf(output_relax,"%18.10E %18.10E %18.10E \n",pSPARC->LatVec[3],pSPARC->LatVec[4],pSPARC->LatVec[5]);
relax.c:1479:        fprintf(output_relax,"%18.10E %18.10E %18.10E \n",pSPARC->LatVec[6],pSPARC->LatVec[7],pSPARC->LatVec[8]);
relax.c:1481:        PrintStress(pSPARC, pSPARC->stress, output_relax);
relax.c:1490:    relaxout = fopen(pSPARC->restart_Filename,"w");
relax.c:1492:        printf("\nCannot open file \"%s\"\n",pSPARC->restart_Filename);
relax.c:1496:    fprintf(relaxout,":RELAXSTEP: %d\n", pSPARC->RelaxCount + pSPARC->restartCount + (pSPARC->RestartFlag == 0));
relax.c:1497:    fprintf(relaxout,":E(Ha): %.15E\n", pSPARC->Etot);
relax.c:1501:    for(atm = 0; atm < pSPARC->n_atom; atm++){
relax.c:1502:        fprintf(relaxout,"%20.15f %20.15f %20.15f\n", pSPARC->atom_pos[3 * atm], pSPARC->atom_pos[3 * atm + 1], pSPARC->atom_pos[3 * atm + 2]);
relax.c:1505:    if (strcmpi(pSPARC->RelaxMeth,"NLCG") == 0){
relax.c:1508:        for(atm = 0; atm < pSPARC->n_atom; atm++){
relax.c:1509:            fprintf(relaxout,"%20.15f %20.15f %20.15f\n", pSPARC->d[3 * atm], pSPARC->d[3 * atm + 1], pSPARC->d[3 * atm + 2]);
relax.c:1511:    } else if(strcmpi(pSPARC->RelaxMeth,"LBFGS") == 0){
relax.c:1512:        fprintf(relaxout,":ISFD: %d\n", pSPARC->isFD);
relax.c:1513:        fprintf(relaxout,":ISRESET: %d\n", pSPARC->isReset);
relax.c:1514:        fprintf(relaxout,":STEP: %d\n", pSPARC->step);
relax.c:1515:        int n = 3 * pSPARC->n_atom;
relax.c:1517:        for(atm = 0; atm < pSPARC->L_history * n; atm++){
relax.c:1518:            fprintf(relaxout,"%20.15f\n", pSPARC->deltaX[atm]);
relax.c:1521:        for(atm = 0; atm < pSPARC->L_history * n; atm++){
relax.c:1522:            fprintf(relaxout,"%20.15f\n", pSPARC->deltaG[atm]);
relax.c:1525:        for(atm = 0; atm < pSPARC->L_history; atm++){
relax.c:1526:            fprintf(relaxout,"%20.15f\n", pSPARC->iys[atm]);
relax.c:1530:            fprintf(relaxout,"%20.15f\n", pSPARC->fold[atm]);
relax.c:1534:            fprintf(relaxout,"%20.15f\n", pSPARC->atom_disp[atm]);
relax.c:1536:    } else if(strcmpi(pSPARC->RelaxMeth,"FIRE") == 0) {
relax.c:1537:        fprintf(relaxout,":FIRE_alpha: %20.15f\n", pSPARC->FIRE_alpha);
relax.c:1538:        fprintf(relaxout,":FIRE_dtNow: %20.15f\n", pSPARC->FIRE_dtNow);
relax.c:1539:        fprintf(relaxout,":FIRE_resetIter: %d\n", pSPARC->FIRE_resetIter);
relax.c:1540:        int n = 3 * pSPARC->n_atom;
relax.c:1543:            fprintf(relaxout,"%20.15f\n", pSPARC->FIRE_vel[atm]);
relax.c:1563:        strncpy(rst_Filename, pSPARC->restart_Filename, sizeof(rst_Filename));
relax.c:1576:    if (strcmpi(pSPARC->RelaxMeth,"NLCG") == 0){
relax.c:1577:        pSPARC->d = (double *)malloc( 3 * pSPARC->n_atom * sizeof(double) );
relax.c:1578:        if (pSPARC->d == NULL) {
relax.c:1585:    int n = 3 * pSPARC->n_atom;
relax.c:1586:    if(strcmpi(pSPARC->RelaxMeth,"NLCG") == 0)
relax.c:1588:    else if(strcmpi(pSPARC->RelaxMeth,"LBFGS") == 0)
relax.c:1589:        l_buff = 4 * sizeof(int) + ((3 + 2 * pSPARC->L_history) * n + pSPARC->L_history) * sizeof(double);
relax.c:1590:    else if(strcmpi(pSPARC->RelaxMeth,"FIRE") == 0)
relax.c:1602:                fscanf(rst_fp,"%d",&pSPARC->restartCount);
relax.c:1604:                for(atm = 0; atm < pSPARC->n_atom; atm++)
relax.c:1605:                    fscanf(rst_fp,"%lf %lf %lf", &pSPARC->atom_pos[3 * atm], &pSPARC->atom_pos[3 * atm + 1], &pSPARC->atom_pos[3 * atm + 2]);
relax.c:1607:                for(atm = 0; atm < pSPARC->n_atom; atm++)
relax.c:1608:                    fscanf(rst_fp,"%lf %lf %lf", &pSPARC->d[3 * atm], &pSPARC->d[3 * atm + 1], &pSPARC->d[3 * atm + 2]);
relax.c:1610:                fscanf(rst_fp,"%d", &pSPARC->isFD);
relax.c:1612:                fscanf(rst_fp,"%d", &pSPARC->isReset);
relax.c:1614:                fscanf(rst_fp,"%d", &pSPARC->step);
relax.c:1616:                for(atm = 0; atm < pSPARC->L_history * n; atm++)
relax.c:1617:                    fscanf(rst_fp,"%lf", &pSPARC->deltaX[atm]);
relax.c:1619:                for(atm = 0; atm < pSPARC->L_history * n; atm++)
relax.c:1620:                    fscanf(rst_fp,"%lf", &pSPARC->deltaG[atm]);
relax.c:1622:                for(atm = 0; atm < pSPARC->L_history; atm++)
relax.c:1623:                    fscanf(rst_fp,"%lf", &pSPARC->iys[atm]);
relax.c:1626:                    fscanf(rst_fp,"%lf", &pSPARC->fold[atm]);
relax.c:1629:                    fscanf(rst_fp,"%lf", &pSPARC->atom_disp[atm]);
relax.c:1631:                fscanf(rst_fp,"%lf", &pSPARC->FIRE_alpha);
relax.c:1633:                fscanf(rst_fp,"%lf", &pSPARC->FIRE_dtNow);
relax.c:1635:                fscanf(rst_fp,"%d", &pSPARC->FIRE_resetIter);
relax.c:1638:                    fscanf(rst_fp,"%lf", &pSPARC->FIRE_vel[atm]);
relax.c:1644:        MPI_Pack(&pSPARC->restartCount, 1, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1645:        MPI_Pack(pSPARC->atom_pos, n, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1646:        if(strcmpi(pSPARC->RelaxMeth,"NLCG") == 0){
relax.c:1647:            MPI_Pack(pSPARC->d, n, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1648:        } else if(strcmpi(pSPARC->RelaxMeth,"LBFGS") == 0){
relax.c:1649:            MPI_Pack(&pSPARC->isFD, 1, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1650:            MPI_Pack(&pSPARC->isReset, 1, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1651:            MPI_Pack(&pSPARC->step, 1, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1652:            MPI_Pack(pSPARC->deltaX, pSPARC->L_history * n, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1653:            MPI_Pack(pSPARC->deltaG, pSPARC->L_history * n, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1654:            MPI_Pack(pSPARC->iys, pSPARC->L_history, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1655:            MPI_Pack(pSPARC->fold, n, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1656:            MPI_Pack(pSPARC->atom_disp, n, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1657:        } else if(strcmpi(pSPARC->RelaxMeth,"FIRE") == 0){
relax.c:1658:            MPI_Pack(&pSPARC->FIRE_alpha, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1659:            MPI_Pack(&pSPARC->FIRE_dtNow, 1, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1660:            MPI_Pack(&pSPARC->FIRE_resetIter, 1, MPI_INT, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1661:            MPI_Pack(pSPARC->FIRE_vel, n, MPI_DOUBLE, buff, l_buff, &position, MPI_COMM_WORLD);
relax.c:1677:        MPI_Unpack(buff, l_buff, &position, &pSPARC->restartCount, 1, MPI_INT, MPI_COMM_WORLD);
relax.c:1678:        MPI_Unpack(buff, l_buff, &position, pSPARC->atom_pos, n, MPI_DOUBLE, MPI_COMM_WORLD);
relax.c:1679:        if(strcmpi(pSPARC->RelaxMeth,"NLCG") == 0){
relax.c:1680:            MPI_Unpack(buff, l_buff, &position, pSPARC->d, n, MPI_DOUBLE, MPI_COMM_WORLD);
relax.c:1681:        } else if(strcmpi(pSPARC->RelaxMeth,"LBFGS") == 0){
relax.c:1682:            MPI_Unpack(buff, l_buff, &position, &pSPARC->isFD, 1, MPI_INT, MPI_COMM_WORLD);
relax.c:1683:            MPI_Unpack(buff, l_buff, &position, &pSPARC->isReset, 1, MPI_INT, MPI_COMM_WORLD);
relax.c:1684:            MPI_Unpack(buff, l_buff, &position, &pSPARC->step, 1, MPI_INT, MPI_COMM_WORLD);
relax.c:1685:            MPI_Unpack(buff, l_buff, &position, pSPARC->deltaX, pSPARC->L_history * n, MPI_DOUBLE, MPI_COMM_WORLD);
relax.c:1686:            MPI_Unpack(buff, l_buff, &position, pSPARC->deltaG, pSPARC->L_history * n, MPI_DOUBLE, MPI_COMM_WORLD);
relax.c:1687:            MPI_Unpack(buff, l_buff, &position, pSPARC->iys, pSPARC->L_history, MPI_DOUBLE, MPI_COMM_WORLD);
relax.c:1688:            MPI_Unpack(buff, l_buff, &position, pSPARC->fold, n, MPI_DOUBLE, MPI_COMM_WORLD);
relax.c:1689:            MPI_Unpack(buff, l_buff, &position, pSPARC->atom_disp, n, MPI_DOUBLE, MPI_COMM_WORLD);
relax.c:1690:        } else if(strcmpi(pSPARC->RelaxMeth,"FIRE") == 0){
relax.c:1691:            MPI_Unpack(buff, l_buff, &position, &pSPARC->FIRE_alpha, 1, MPI_DOUBLE, MPI_COMM_WORLD);
relax.c:1692:            MPI_Unpack(buff, l_buff, &position, &pSPARC->FIRE_dtNow, 1, MPI_DOUBLE, MPI_COMM_WORLD);
relax.c:1693:            MPI_Unpack(buff, l_buff, &position, &pSPARC->FIRE_resetIter, 1, MPI_INT, MPI_COMM_WORLD);
relax.c:1694:            MPI_Unpack(buff, l_buff, &position, pSPARC->FIRE_vel, n, MPI_DOUBLE, MPI_COMM_WORLD);
spinOrbitCoupling.c:69:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
spinOrbitCoupling.c:70:        pspsoc = pSPARC->psd[ityp].pspsoc;
spinOrbitCoupling.c:77:        lloc = pSPARC->localPsd[ityp]; // local projector index
spinOrbitCoupling.c:78:        lmax = pSPARC->psd[ityp].lmax;
spinOrbitCoupling.c:79:        psd_len = pSPARC->psd[ityp].size;
spinOrbitCoupling.c:84:            nlocProj[ityp].nprojso += pSPARC->psd[ityp].ppl_soc[l-1] * (2 * l + 1);
spinOrbitCoupling.c:102:            if(pSPARC->cell_typ == 0){
spinOrbitCoupling.c:108:                    x2 = (i_DM + DMVertices[0]) * pSPARC->delta_x - x0_i;
spinOrbitCoupling.c:109:                    y2 = (j_DM + DMVertices[2]) * pSPARC->delta_y - y0_i;
spinOrbitCoupling.c:110:                    z2 = (k_DM + DMVertices[4]) * pSPARC->delta_z - z0_i;
spinOrbitCoupling.c:117:            } else if(pSPARC->cell_typ > 10 && pSPARC->cell_typ < 20) {
spinOrbitCoupling.c:123:                    x = (i_DM + DMVertices[0]) * pSPARC->delta_x - x0_i;
spinOrbitCoupling.c:124:                    y = (j_DM + DMVertices[2]) * pSPARC->delta_y - y0_i;
spinOrbitCoupling.c:125:                    z = (k_DM + DMVertices[4]) * pSPARC->delta_z - z0_i;
spinOrbitCoupling.c:139:                if  (l == lloc) { lcount2 += pSPARC->psd[ityp].ppl_soc[l-1]; continue;}
spinOrbitCoupling.c:140:                for (np = 0; np < pSPARC->psd[ityp].ppl_soc[l-1]; np++) {
spinOrbitCoupling.c:142:                    if (pSPARC->psd[ityp].is_r_uniform == 1) {
spinOrbitCoupling.c:143:						SplineInterpUniform(pSPARC->psd[ityp].RadialGrid, pSPARC->psd[ityp].UdV_soc+lcount2*psd_len, psd_len, 
spinOrbitCoupling.c:144:						                    rc_pos_r, UdV_sort, ndc, pSPARC->psd[ityp].SplineFitUdV_soc+lcount*psd_len);
spinOrbitCoupling.c:146:						SplineInterpNonuniform(pSPARC->psd[ityp].RadialGrid, pSPARC->psd[ityp].UdV_soc+lcount2*psd_len, psd_len, 
spinOrbitCoupling.c:147:						                       rc_pos_r, UdV_sort, ndc, pSPARC->psd[ityp].SplineFitUdV_soc+lcount*psd_len); 
spinOrbitCoupling.c:204:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) { 
spinOrbitCoupling.c:205:        pspsoc = pSPARC->psd[ityp].pspsoc;
spinOrbitCoupling.c:212:        lloc = pSPARC->localPsd[ityp]; // local projector index
spinOrbitCoupling.c:213:        lmax = pSPARC->psd[ityp].lmax;      
spinOrbitCoupling.c:217:            nlocProj[ityp].nprojso_ext += pSPARC->psd[ityp].ppl_soc[l-1] * (2 * l);
spinOrbitCoupling.c:236:                for (np = 0; np < pSPARC->psd[ityp].ppl_soc[l-1]; np++) {
spinOrbitCoupling.c:254:                for (np = 0; np < pSPARC->psd[ityp].ppl_soc[l-1]; np++) {
spinOrbitCoupling.c:271:                for (np = 0; np < pSPARC->psd[ityp].ppl_soc[l-1]; np++) {
spinOrbitCoupling.c:297:    pSPARC->IP_displ_SOC = (int *)malloc( sizeof(int) * (pSPARC->n_atom+1));
spinOrbitCoupling.c:299:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:300:        lmax = pSPARC->psd[ityp].lmax;
spinOrbitCoupling.c:301:        lloc = pSPARC->localPsd[ityp];
spinOrbitCoupling.c:306:            nproj += pSPARC->psd[ityp].ppl_soc[l-1] * (2*l);
spinOrbitCoupling.c:308:        pSPARC->IP_displ_SOC[0] = 0;
spinOrbitCoupling.c:309:        for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
spinOrbitCoupling.c:310:            pSPARC->IP_displ_SOC[atom_index+1] = pSPARC->IP_displ_SOC[atom_index] + nproj;
spinOrbitCoupling.c:330:    alpha = (double complex *) calloc( pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol, sizeof(double complex));
spinOrbitCoupling.c:331:    double Lx = pSPARC->range_x;
spinOrbitCoupling.c:332:    double Ly = pSPARC->range_y;
spinOrbitCoupling.c:333:    double Lz = pSPARC->range_z;
spinOrbitCoupling.c:334:    double k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:335:    double k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:336:    double k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:342:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:350:            a = bloch_fac * pSPARC->dV;
spinOrbitCoupling.c:362:                alpha+pSPARC->IP_displ_SOC[atom_index]*ncol, nlocProj[ityp].nprojso_ext);
spinOrbitCoupling.c:371:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol, MPI_DOUBLE_COMPLEX, MPI_SUM, comm);
spinOrbitCoupling.c:377:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:378:        int lloc = pSPARC->localPsd[ityp];
spinOrbitCoupling.c:379:        lmax = pSPARC->psd[ityp].lmax;
spinOrbitCoupling.c:380:        for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
spinOrbitCoupling.c:386:                        ldispl += pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:389:                    for (np = 0; np < pSPARC->psd[ityp].ppl_soc[l-1]; np++) {
spinOrbitCoupling.c:392:                            alpha[count++] *= spinorfac*0.5*m*pSPARC->psd[ityp].Gamma_soc[ldispl+np];
spinOrbitCoupling.c:393:                            // printf("gammaso_Jl %f\n", spinorfac*0.5*m*pSPARC->psd[ityp].Gamma_soc[ldispl+np]);
spinOrbitCoupling.c:396:                    ldispl += pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:403:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:416:                          alpha+pSPARC->IP_displ_SOC[atom_index]*ncol, nlocProj[ityp].nprojso_ext, &b, Vnlx, ndc); 
spinOrbitCoupling.c:443:    alpha = (double complex *) calloc( pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol, sizeof(double complex));
spinOrbitCoupling.c:444:    double Lx = pSPARC->range_x;
spinOrbitCoupling.c:445:    double Ly = pSPARC->range_y;
spinOrbitCoupling.c:446:    double Lz = pSPARC->range_z;
spinOrbitCoupling.c:447:    double k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:448:    double k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:449:    double k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:455:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:464:            a = bloch_fac * pSPARC->dV;
spinOrbitCoupling.c:476:                alpha+pSPARC->IP_displ_SOC[atom_index]*ncol, nlocProj[ityp].nprojso_ext);
spinOrbitCoupling.c:485:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol, MPI_DOUBLE_COMPLEX, MPI_SUM, comm);
spinOrbitCoupling.c:490:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:491:        int lloc = pSPARC->localPsd[ityp];
spinOrbitCoupling.c:492:        lmax = pSPARC->psd[ityp].lmax;
spinOrbitCoupling.c:493:        for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
spinOrbitCoupling.c:499:                        ldispl += pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:502:                    for (np = 0; np < pSPARC->psd[ityp].ppl_soc[l-1]; np++) {
spinOrbitCoupling.c:506:                            alpha[count++] *= 0.5*sqrt(l*(l+1)-m*(m+1))*pSPARC->psd[ityp].Gamma_soc[ldispl+np];
spinOrbitCoupling.c:509:                    ldispl += pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:516:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:530:                          alpha+pSPARC->IP_displ_SOC[atom_index]*ncol, nlocProj[ityp].nprojso_ext, &b, Vnlx, ndc); 
spinOrbitCoupling.c:551:    if (pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
spinOrbitCoupling.c:558:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:559:    DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
spinOrbitCoupling.c:560:    DMndbyNspinor = pSPARC->Nd_d_dmcomm;
spinOrbitCoupling.c:561:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:562:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:563:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:571:    alpha = (double complex *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * 4 * Nspinor, sizeof(double complex));
spinOrbitCoupling.c:572:    alpha_so1 = (double complex *)calloc( pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * 4 * Nspinor, sizeof(double complex));
spinOrbitCoupling.c:573:    alpha_so2 = (double complex *)calloc( pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * 4 * Nspinor, sizeof(double complex));
spinOrbitCoupling.c:575:    force_nloc = (double *)calloc(3 * pSPARC->n_atom, sizeof(double));
spinOrbitCoupling.c:576:    double Lx = pSPARC->range_x;
spinOrbitCoupling.c:577:    double Ly = pSPARC->range_y;
spinOrbitCoupling.c:578:    double Lz = pSPARC->range_z;
spinOrbitCoupling.c:590:            beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nspinor * count;
spinOrbitCoupling.c:592:            beta = alpha_so1 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * count;
spinOrbitCoupling.c:594:            beta = alpha_so2 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * count;
spinOrbitCoupling.c:605:                k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:606:                k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:607:                k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:611:                    Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, 
spinOrbitCoupling.c:612:                        pSPARC->Xorb_kpt+spn_i*size_s+kpt*size_k+spinor*DMndbyNspinor, 
spinOrbitCoupling.c:613:                        pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k+spinor*DMndbyNspinor, dim, &kpt_vec, pSPARC->dmcomm);
spinOrbitCoupling.c:615:                beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nspinor * (Nk * nspin * (dim + 1) + count);
spinOrbitCoupling.c:616:                Compute_Integral_Chi_Dpsi_kpt(pSPARC, pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k, beta, spn_i, kpt, "SC");
spinOrbitCoupling.c:617:                beta = alpha_so1 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * (Nk * nspin * (dim + 1) + count);
spinOrbitCoupling.c:618:                Compute_Integral_Chi_Dpsi_kpt(pSPARC, pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k, beta, spn_i, kpt, "SO1");
spinOrbitCoupling.c:619:                beta = alpha_so2 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * (Nk * nspin * (dim + 1) + count);
spinOrbitCoupling.c:620:                Compute_Integral_Chi_Dpsi_kpt(pSPARC, pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k, beta, spn_i, kpt, "SO2");
spinOrbitCoupling.c:626:    if (pSPARC->npNd > 1) {
spinOrbitCoupling.c:627:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 4, MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
spinOrbitCoupling.c:628:        MPI_Allreduce(MPI_IN_PLACE, alpha_so1, pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 4, MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
spinOrbitCoupling.c:629:        MPI_Allreduce(MPI_IN_PLACE, alpha_so2, pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 4, MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
spinOrbitCoupling.c:641:    if (pSPARC->npspin > 1) {
spinOrbitCoupling.c:642:        if (pSPARC->spincomm_index == 0)
spinOrbitCoupling.c:643:            MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
spinOrbitCoupling.c:645:            MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
spinOrbitCoupling.c:649:    if (pSPARC->npkpt > 1) {
spinOrbitCoupling.c:651:        // if (pSPARC->kptcomm_index == 0)
spinOrbitCoupling.c:652:        //     MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
spinOrbitCoupling.c:654:        //     MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
spinOrbitCoupling.c:655:        MPI_Allreduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
spinOrbitCoupling.c:659:    if (pSPARC->npband > 1) {
spinOrbitCoupling.c:660:        if (pSPARC->bandcomm_index == 0)
spinOrbitCoupling.c:661:            MPI_Reduce(MPI_IN_PLACE, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
spinOrbitCoupling.c:663:            MPI_Reduce(force_nloc, force_nloc, 3 * pSPARC->n_atom, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
spinOrbitCoupling.c:669:        for (i = 0; i < pSPARC->n_atom; i++) {
spinOrbitCoupling.c:675:        for (i = 0; i < pSPARC->n_atom; i++) {
spinOrbitCoupling.c:676:            printf("%18.14f %18.14f %18.14f\n", pSPARC->forces[i*3], pSPARC->forces[i*3+1], pSPARC->forces[i*3+2]);
spinOrbitCoupling.c:682:        for (i = 0; i < 3 * pSPARC->n_atom; i++) {
spinOrbitCoupling.c:683:            pSPARC->forces[i] += force_nloc[i];
spinOrbitCoupling.c:700:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:701:    DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
spinOrbitCoupling.c:702:    DMndbyNspinor = pSPARC->Nd_d_dmcomm;
spinOrbitCoupling.c:703:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:704:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:705:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:712:    double Lx = pSPARC->range_x;
spinOrbitCoupling.c:713:    double Ly = pSPARC->range_y;
spinOrbitCoupling.c:714:    double Lz = pSPARC->range_z;
spinOrbitCoupling.c:718:    k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:719:    k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:720:    k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:722:    IP_displ = !strcmpi(option, "SC") ? pSPARC->IP_displ : pSPARC->IP_displ_SOC;
spinOrbitCoupling.c:724:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:725:        nproj = !strcmpi(option, "SC") ? pSPARC->nlocProj[ityp].nproj : pSPARC->nlocProj[ityp].nprojso_ext;
spinOrbitCoupling.c:727:            Chi = pSPARC->nlocProj[ityp].Chi_c;
spinOrbitCoupling.c:729:            Chi = pSPARC->nlocProj[ityp].Chisowt0;
spinOrbitCoupling.c:732:        for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
spinOrbitCoupling.c:733:            x0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3  ];
spinOrbitCoupling.c:734:            y0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
spinOrbitCoupling.c:735:            z0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
spinOrbitCoupling.c:738:            a = bloch_fac * pSPARC->dV;
spinOrbitCoupling.c:740:            ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
spinOrbitCoupling.c:742:            atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
spinOrbitCoupling.c:746:                    Chi = (spinor == 0) ? pSPARC->nlocProj[ityp].Chisowtl : pSPARC->nlocProj[ityp].Chisowtnl; 
spinOrbitCoupling.c:748:                    x_ptr = pSPARC->Xorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd + spinor * DMndbyNspinor;
spinOrbitCoupling.c:751:                        *(x_rc_ptr + i) = conj(*(x_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]));
spinOrbitCoupling.c:754:                spinorshift = IP_displ[pSPARC->n_atom] * ncol * spinor;
spinOrbitCoupling.c:774:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:775:    DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
spinOrbitCoupling.c:776:    DMndbyNspinor = pSPARC->Nd_d_dmcomm;
spinOrbitCoupling.c:777:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:778:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:779:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:784:    double Lx = pSPARC->range_x;
spinOrbitCoupling.c:785:    double Ly = pSPARC->range_y;
spinOrbitCoupling.c:786:    double Lz = pSPARC->range_z;
spinOrbitCoupling.c:790:    k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:791:    k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:792:    k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:794:    IP_displ = !strcmpi(option, "SC") ? pSPARC->IP_displ : pSPARC->IP_displ_SOC;
spinOrbitCoupling.c:796:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:797:        nproj = !strcmpi(option, "SC") ? pSPARC->nlocProj[ityp].nproj : pSPARC->nlocProj[ityp].nprojso_ext;
spinOrbitCoupling.c:799:            Chi = pSPARC->nlocProj[ityp].Chi_c;
spinOrbitCoupling.c:801:            Chi = pSPARC->nlocProj[ityp].Chisowt0;
spinOrbitCoupling.c:804:        for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
spinOrbitCoupling.c:805:            x0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3  ];
spinOrbitCoupling.c:806:            y0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
spinOrbitCoupling.c:807:            z0_i = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
spinOrbitCoupling.c:811:            ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat]; 
spinOrbitCoupling.c:813:            atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
spinOrbitCoupling.c:816:                    Chi = (spinor == 0) ? pSPARC->nlocProj[ityp].Chisowtnl : pSPARC->nlocProj[ityp].Chisowtl; 
spinOrbitCoupling.c:823:                        *(dx_rc_ptr + i) = *(dx_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
spinOrbitCoupling.c:832:                spinorshift = IP_displ[pSPARC->n_atom] * ncol * spinor;
spinOrbitCoupling.c:851:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:852:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:853:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:854:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:860:    int Ns = pSPARC->Nstates;
spinOrbitCoupling.c:864:    IP_displ = !strcmpi(option, "SC") ? pSPARC->IP_displ : pSPARC->IP_displ_SOC;
spinOrbitCoupling.c:865:    beta_x = alpha + IP_displ[pSPARC->n_atom]*ncol*Nk*nspin*Nspinor;
spinOrbitCoupling.c:866:    beta_y = alpha + IP_displ[pSPARC->n_atom]*ncol*Nk*nspin*Nspinor * 2;
spinOrbitCoupling.c:867:    beta_z = alpha + IP_displ[pSPARC->n_atom]*ncol*Nk*nspin*Nspinor * 3;
spinOrbitCoupling.c:872:            kpt_spn_fac = pSPARC->occfac * 2.0 * pSPARC->kptWts_loc[k] / pSPARC->Nkpts;
spinOrbitCoupling.c:876:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:877:                    int lloc = pSPARC->localPsd[ityp];
spinOrbitCoupling.c:878:                    lmax = pSPARC->psd[ityp].lmax;
spinOrbitCoupling.c:879:                    for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
spinOrbitCoupling.c:881:                        for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
spinOrbitCoupling.c:882:                            g_nk = pSPARC->occ[spn_i*Nk*Ns+k*Ns+n];
spinOrbitCoupling.c:887:                                ppl = !strcmpi(option, "SC") ? pSPARC->psd[ityp].ppl[l] : pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:898:                                        if (!strcmpi(option, "SC")) scaled_gamma_Jl = pSPARC->psd[ityp].Gamma[ldispl+np];
spinOrbitCoupling.c:899:                                        else if (!strcmpi(option, "SO1")) scaled_gamma_Jl = spinorfac*0.5*m*pSPARC->psd[ityp].Gamma_soc[ldispl+np];
spinOrbitCoupling.c:900:                                        else if (!strcmpi(option, "SO2")) scaled_gamma_Jl = 0.5*sqrt(l*(l+1)-m*(m+1))*pSPARC->psd[ityp].Gamma_soc[ldispl+np];
spinOrbitCoupling.c:938:    if (pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
spinOrbitCoupling.c:944:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:945:    Ns = pSPARC->Nstates;
spinOrbitCoupling.c:946:    DMndbyNspinor = pSPARC->Nd_d_dmcomm;
spinOrbitCoupling.c:947:    DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
spinOrbitCoupling.c:948:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:949:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:952:    DMnx = pSPARC->Nx_d_dmcomm;
spinOrbitCoupling.c:953:    DMny = pSPARC->Ny_d_dmcomm;
spinOrbitCoupling.c:954:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:967:    alpha = (double complex *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * 7 * Nspinor, sizeof(double complex));
spinOrbitCoupling.c:968:    alpha_so1 = (double complex *)calloc( pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * 7 * Nspinor, sizeof(double complex));
spinOrbitCoupling.c:969:    alpha_so2 = (double complex *)calloc( pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * 7 * Nspinor, sizeof(double complex));
spinOrbitCoupling.c:970:    double Lx = pSPARC->range_x;
spinOrbitCoupling.c:971:    double Ly = pSPARC->range_y;
spinOrbitCoupling.c:972:    double Lz = pSPARC->range_z;
spinOrbitCoupling.c:980:    if (pSPARC->cell_typ == 0){
spinOrbitCoupling.c:984:                for(kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++) {
spinOrbitCoupling.c:985:                    k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:986:                    k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:987:                    k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:991:                        dpsi_xi = (dim == 0) ? pSPARC->Yorb_kpt : (dpsi_full + (dim-1)*size_s*nspin );
spinOrbitCoupling.c:992:                        Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb_kpt+spn_i*size_s+kpt*size_k+spinor*DMndbyNspinor, 
spinOrbitCoupling.c:993:                                                 dpsi_xi+spn_i*size_s+kpt*size_k+spinor*DMndbyNspinor, dim, &kpt_vec, pSPARC->dmcomm);
spinOrbitCoupling.c:1001:        dpsi_x1 = pSPARC->Yorb_kpt;
spinOrbitCoupling.c:1007:                for(kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++) {
spinOrbitCoupling.c:1008:                    k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:1009:                    k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:1010:                    k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:1014:                        Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, 
spinOrbitCoupling.c:1015:                                pSPARC->Xorb_kpt+spn_i*size_s+kpt*size_k+spinor*DMndbyNspinor, 
spinOrbitCoupling.c:1016:                                dpsi_xi_lv+spinor*DMndbyNspinor, dim, &kpt_vec, pSPARC->dmcomm);
spinOrbitCoupling.c:1021:                            dpsi_x1[i + spn_i*size_s+kpt*size_k] = pSPARC->gradT[0]*dpsi_xi_lv[i];
spinOrbitCoupling.c:1022:                            dpsi_x2[i + spn_i*size_s+kpt*size_k] = pSPARC->gradT[1]*dpsi_xi_lv[i];
spinOrbitCoupling.c:1023:                            dpsi_x3[i + spn_i*size_s+kpt*size_k] = pSPARC->gradT[2]*dpsi_xi_lv[i];
spinOrbitCoupling.c:1025:                            dpsi_x1[i + spn_i*size_s+kpt*size_k] += pSPARC->gradT[0+3*dim]*dpsi_xi_lv[i];
spinOrbitCoupling.c:1026:                            dpsi_x2[i + spn_i*size_s+kpt*size_k] += pSPARC->gradT[1+3*dim]*dpsi_xi_lv[i];
spinOrbitCoupling.c:1027:                            dpsi_x3[i + spn_i*size_s+kpt*size_k] += pSPARC->gradT[2+3*dim]*dpsi_xi_lv[i];
spinOrbitCoupling.c:1040:            beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nspinor * count;
spinOrbitCoupling.c:1042:            beta = alpha_so1 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * count;
spinOrbitCoupling.c:1044:            beta = alpha_so2 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * count;            
spinOrbitCoupling.c:1053:        dpsi_xi = (dim == 0) ? pSPARC->Yorb_kpt : dpsi_full + (dim-1)*size_s*nspin;
spinOrbitCoupling.c:1057:                for(kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++) {
spinOrbitCoupling.c:1058:                    beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nspinor * (Nk * nspin * count2 + count);
spinOrbitCoupling.c:1060:                    beta = alpha_so1 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * (Nk * nspin * count2 + count);
spinOrbitCoupling.c:1062:                    beta = alpha_so2 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * (Nk * nspin * count2 + count);
spinOrbitCoupling.c:1075:        dpsi_xi = (dim == 0) ? pSPARC->Yorb_kpt : dpsi_full + (dim-1)*size_s*nspin;
spinOrbitCoupling.c:1077:            dpsi_xj = (dim2 == 0) ? pSPARC->Yorb_kpt : dpsi_full + (dim2-1)*size_s*nspin;
spinOrbitCoupling.c:1079:                for(kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++) {
spinOrbitCoupling.c:1089:                        g_nk = pSPARC->occ[spn_i*Nk*Ns + kpt*Ns + n + pSPARC->band_start_indx];
spinOrbitCoupling.c:1092:                    stress_k[count] -= pSPARC->occfac * pSPARC->kptWts_loc[kpt] / pSPARC->Nkpts * temp_k;
spinOrbitCoupling.c:1100:    if (pSPARC->npNd > 1) {
spinOrbitCoupling.c:1104:        MPI_Iallreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 7, 
spinOrbitCoupling.c:1105:                        MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm, &req0);
spinOrbitCoupling.c:1106:        MPI_Iallreduce(MPI_IN_PLACE, alpha_so1, pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * Nspinor * nspin * 7, 
spinOrbitCoupling.c:1107:                        MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm, &req1);
spinOrbitCoupling.c:1108:        MPI_Iallreduce(MPI_IN_PLACE, alpha_so2, pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * Nspinor * nspin * 7, 
spinOrbitCoupling.c:1109:                        MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm, &req2);
spinOrbitCoupling.c:1110:        MPI_Iallreduce(MPI_IN_PLACE, stress_k, 6, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm, &req3);
spinOrbitCoupling.c:1126:        stress_nl[i] *= pSPARC->occfac * 2.0;
spinOrbitCoupling.c:1128:    energy_nl *= pSPARC->occfac/pSPARC->dV;   
spinOrbitCoupling.c:1130:    pSPARC->stress_nl[0] = stress_nl[0] - energy_nl;
spinOrbitCoupling.c:1131:    pSPARC->stress_nl[1] = stress_nl[1];
spinOrbitCoupling.c:1132:    pSPARC->stress_nl[2] = stress_nl[2];
spinOrbitCoupling.c:1133:    pSPARC->stress_nl[3] = stress_nl[3] - energy_nl;
spinOrbitCoupling.c:1134:    pSPARC->stress_nl[4] = stress_nl[4];
spinOrbitCoupling.c:1135:    pSPARC->stress_nl[5] = stress_nl[5] - energy_nl;
spinOrbitCoupling.c:1137:        pSPARC->stress_k[i] = stress_k[i];
spinOrbitCoupling.c:1140:    if (pSPARC->npspin > 1) {    
spinOrbitCoupling.c:1141:        if (pSPARC->spincomm_index == 0){
spinOrbitCoupling.c:1142:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
spinOrbitCoupling.c:1143:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
spinOrbitCoupling.c:1145:            MPI_Reduce(pSPARC->stress_nl, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
spinOrbitCoupling.c:1146:            MPI_Reduce(pSPARC->stress_k, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
spinOrbitCoupling.c:1152:    if (pSPARC->npkpt > 1) {    
spinOrbitCoupling.c:1153:        MPI_Allreduce(MPI_IN_PLACE, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
spinOrbitCoupling.c:1154:        MPI_Allreduce(MPI_IN_PLACE, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
spinOrbitCoupling.c:1158:    if (pSPARC->npband > 1) {
spinOrbitCoupling.c:1159:        if (pSPARC->bandcomm_index == 0){
spinOrbitCoupling.c:1160:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
spinOrbitCoupling.c:1161:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
spinOrbitCoupling.c:1163:            MPI_Reduce(pSPARC->stress_nl, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
spinOrbitCoupling.c:1165:            MPI_Reduce(pSPARC->stress_k, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
spinOrbitCoupling.c:1171:        double cell_measure = pSPARC->Jacbdet;
spinOrbitCoupling.c:1172:        if(pSPARC->BCx == 0)
spinOrbitCoupling.c:1173:            cell_measure *= pSPARC->range_x;
spinOrbitCoupling.c:1174:        if(pSPARC->BCy == 0)
spinOrbitCoupling.c:1175:            cell_measure *= pSPARC->range_y;
spinOrbitCoupling.c:1176:        if(pSPARC->BCz == 0)
spinOrbitCoupling.c:1177:            cell_measure *= pSPARC->range_z;
spinOrbitCoupling.c:1180:            pSPARC->stress_nl[i] /= cell_measure;
spinOrbitCoupling.c:1181:            pSPARC->stress_k[i] /= cell_measure;
spinOrbitCoupling.c:1189:        PrintStress(pSPARC, pSPARC->stress_nl, NULL);
spinOrbitCoupling.c:1191:        PrintStress(pSPARC, pSPARC->stress_k, NULL);  
spinOrbitCoupling.c:1210:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:1211:    DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
spinOrbitCoupling.c:1212:    DMndbyNspinor = pSPARC->Nd_d_dmcomm;
spinOrbitCoupling.c:1213:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:1214:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:1217:    DMnx = pSPARC->Nx_d_dmcomm;
spinOrbitCoupling.c:1218:    DMny = pSPARC->Ny_d_dmcomm;
spinOrbitCoupling.c:1219:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:1222:    double Lx = pSPARC->range_x;
spinOrbitCoupling.c:1223:    double Ly = pSPARC->range_y;
spinOrbitCoupling.c:1224:    double Lz = pSPARC->range_z;
spinOrbitCoupling.c:1228:    k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:1229:    k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:1230:    k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:1232:    IP_displ = !strcmpi(option, "SC") ? pSPARC->IP_displ : pSPARC->IP_displ_SOC;
spinOrbitCoupling.c:1234:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:1235:        nproj = !strcmpi(option, "SC") ? pSPARC->nlocProj[ityp].nproj : pSPARC->nlocProj[ityp].nprojso_ext;
spinOrbitCoupling.c:1237:            Chi = pSPARC->nlocProj[ityp].Chi_c;
spinOrbitCoupling.c:1239:            Chi = pSPARC->nlocProj[ityp].Chisowt0;
spinOrbitCoupling.c:1242:        for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
spinOrbitCoupling.c:1243:            R1 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3];
spinOrbitCoupling.c:1244:            R2 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
spinOrbitCoupling.c:1245:            R3 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
spinOrbitCoupling.c:1249:            ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
spinOrbitCoupling.c:1252:            atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
spinOrbitCoupling.c:1255:                    Chi = (spinor == 0) ? pSPARC->nlocProj[ityp].Chisowtnl : pSPARC->nlocProj[ityp].Chisowtl; 
spinOrbitCoupling.c:1263:                        indx = pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i];
spinOrbitCoupling.c:1267:                        x1_R1 = (i_DM + pSPARC->DMVertices_dmcomm[0]) * pSPARC->delta_x - R1;
spinOrbitCoupling.c:1268:                        x2_R2 = (j_DM + pSPARC->DMVertices_dmcomm[2]) * pSPARC->delta_y - R2;
spinOrbitCoupling.c:1269:                        x3_R3 = (k_DM + pSPARC->DMVertices_dmcomm[4]) * pSPARC->delta_z - R3;
spinOrbitCoupling.c:1270:                        StXmRjp = pSPARC->LatUVec[0+dim2] * x1_R1 + pSPARC->LatUVec[3+dim2] * x2_R2 + pSPARC->LatUVec[6+dim2] * x3_R3;
spinOrbitCoupling.c:1281:                spinorshift = IP_displ[pSPARC->n_atom] * ncol * spinor;
spinOrbitCoupling.c:1298:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:1299:    Ns = pSPARC->Nstates;
spinOrbitCoupling.c:1300:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:1301:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:1302:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:1303:    shift = pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol;
spinOrbitCoupling.c:1311:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:1312:                    lmax = pSPARC->psd[ityp].lmax;
spinOrbitCoupling.c:1313:                    for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
spinOrbitCoupling.c:1315:                        for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
spinOrbitCoupling.c:1316:                            g_nk = pSPARC->occ[spn_i*Nk*Ns+k*Ns+n];
spinOrbitCoupling.c:1323:                                if (l == pSPARC->localPsd[ityp]) {
spinOrbitCoupling.c:1324:                                    ldispl += pSPARC->psd[ityp].ppl[l];
spinOrbitCoupling.c:1327:                                for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
spinOrbitCoupling.c:1334:                                    gamma_jl = pSPARC->psd[ityp].Gamma[ldispl+np];
spinOrbitCoupling.c:1337:                                ldispl += pSPARC->psd[ityp].ppl[l];
spinOrbitCoupling.c:1344:                                if (l == pSPARC->localPsd[ityp]) {
spinOrbitCoupling.c:1345:                                    ldispl += pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:1348:                                for (np = 0; np < pSPARC->psd[ityp].ppl_soc[l-1]; np++) {
spinOrbitCoupling.c:1353:                                        temp2_e += spinorfac*0.5*m*pSPARC->psd[ityp].Gamma_soc[ldispl+np] * temp_e;
spinOrbitCoupling.c:1357:                                ldispl += pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:1362:                        kptwt = pSPARC->kptWts_loc[k] / pSPARC->Nkpts;
spinOrbitCoupling.c:1373:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:1374:                lmax = pSPARC->psd[ityp].lmax;
spinOrbitCoupling.c:1375:                for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
spinOrbitCoupling.c:1377:                    for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
spinOrbitCoupling.c:1378:                        g_nk = pSPARC->occ[spn_i*Nk*Ns+k*Ns+n];
spinOrbitCoupling.c:1384:                            if (l == pSPARC->localPsd[ityp]) {
spinOrbitCoupling.c:1385:                                ldispl += pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:1388:                            for (np = 0; np < pSPARC->psd[ityp].ppl_soc[l-1]; np++) {
spinOrbitCoupling.c:1394:                                    temp2_e += 0.5*sqrt(l*(l+1)-m*(m+1))*pSPARC->psd[ityp].Gamma_soc[ldispl+np] * temp_e;
spinOrbitCoupling.c:1398:                            ldispl += pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:1402:                    kptwt = pSPARC->kptWts_loc[k] / pSPARC->Nkpts;
spinOrbitCoupling.c:1425:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:1426:    Ns = pSPARC->Nstates;
spinOrbitCoupling.c:1427:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:1428:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:1429:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:1432:    IP_displ = !strcmpi(option, "SC") ? pSPARC->IP_displ : pSPARC->IP_displ_SOC;
spinOrbitCoupling.c:1435:    beta1_x1 = alpha + IP_displ[pSPARC->n_atom]*ncol*Nspinor*Nk*nspin;
spinOrbitCoupling.c:1436:    beta2_x1 = alpha + IP_displ[pSPARC->n_atom]*ncol*Nspinor*Nk*nspin * 2;
spinOrbitCoupling.c:1437:    beta3_x1 = alpha + IP_displ[pSPARC->n_atom]*ncol*Nspinor*Nk*nspin * 3;
spinOrbitCoupling.c:1438:    beta2_x2 = alpha + IP_displ[pSPARC->n_atom]*ncol*Nspinor*Nk*nspin * 4;
spinOrbitCoupling.c:1439:    beta3_x2 = alpha + IP_displ[pSPARC->n_atom]*ncol*Nspinor*Nk*nspin * 5;
spinOrbitCoupling.c:1440:    beta3_x3 = alpha + IP_displ[pSPARC->n_atom]*ncol*Nspinor*Nk*nspin * 6;
spinOrbitCoupling.c:1447:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:1448:                    lmax = pSPARC->psd[ityp].lmax;
spinOrbitCoupling.c:1449:                    for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
spinOrbitCoupling.c:1451:                        for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
spinOrbitCoupling.c:1452:                            g_nk = pSPARC->occ[spn_i*Nk*Ns+k*Ns+n];
spinOrbitCoupling.c:1457:                                ppl = !strcmpi(option, "SC") ? pSPARC->psd[ityp].ppl[l] : pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:1460:                                if (l == pSPARC->localPsd[ityp]) {
spinOrbitCoupling.c:1467:                                        if (!strcmpi(option, "SC")) scaled_gamma_Jl = pSPARC->psd[ityp].Gamma[ldispl+np];
spinOrbitCoupling.c:1468:                                        else if (!strcmpi(option, "SO1")) scaled_gamma_Jl = spinorfac*0.5*m*pSPARC->psd[ityp].Gamma_soc[ldispl+np];
spinOrbitCoupling.c:1469:                                        else if (!strcmpi(option, "SO2")) scaled_gamma_Jl = 0.5*sqrt(l*(l+1)-m*(m+1))*pSPARC->psd[ityp].Gamma_soc[ldispl+np];
spinOrbitCoupling.c:1487:                        kptwt = pSPARC->kptWts_loc[k] / pSPARC->Nkpts;
spinOrbitCoupling.c:1508:    if (pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
spinOrbitCoupling.c:1514:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:1515:    Ns = pSPARC->Nstates;
spinOrbitCoupling.c:1516:    DMndbyNspinor = pSPARC->Nd_d_dmcomm;
spinOrbitCoupling.c:1517:    DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
spinOrbitCoupling.c:1518:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:1519:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:1522:    DMnx = pSPARC->Nx_d_dmcomm;
spinOrbitCoupling.c:1523:    DMny = pSPARC->Ny_d_dmcomm;
spinOrbitCoupling.c:1524:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:1530:    alpha = (double complex *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 4, sizeof(double complex));
spinOrbitCoupling.c:1531:    alpha_so1 = (double complex *)calloc( pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 4, sizeof(double complex));
spinOrbitCoupling.c:1532:    alpha_so2 = (double complex *)calloc( pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 4, sizeof(double complex));
spinOrbitCoupling.c:1535:    double Lx = pSPARC->range_x;
spinOrbitCoupling.c:1536:    double Ly = pSPARC->range_y;
spinOrbitCoupling.c:1537:    double Lz = pSPARC->range_z;
spinOrbitCoupling.c:1548:            beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nspinor * count;
spinOrbitCoupling.c:1550:            beta = alpha_so1 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * count;
spinOrbitCoupling.c:1552:            beta = alpha_so2 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * count;            
spinOrbitCoupling.c:1563:            for(kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++) {
spinOrbitCoupling.c:1564:                k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:1565:                k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:1566:                k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:1570:                    Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb_kpt+spn_i*size_s+kpt*size_k+spinor*DMndbyNspinor, 
spinOrbitCoupling.c:1571:                                            pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k+spinor*DMndbyNspinor, dim, &kpt_vec, pSPARC->dmcomm);
spinOrbitCoupling.c:1573:                beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nspinor * (Nk * nspin * count2 + count);
spinOrbitCoupling.c:1574:                Compute_Integral_Chi_XmRjp_beta_Dpsi_kpt(pSPARC, pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k, beta, spn_i, kpt, dim, "SC");
spinOrbitCoupling.c:1575:                beta = alpha_so1 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * (Nk * nspin * count2 + count);
spinOrbitCoupling.c:1576:                Compute_Integral_Chi_XmRjp_beta_Dpsi_kpt(pSPARC, pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k, beta, spn_i, kpt, dim, "SO1");
spinOrbitCoupling.c:1577:                beta = alpha_so2 + pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nspinor * (Nk * nspin * count2 + count);
spinOrbitCoupling.c:1578:                Compute_Integral_Chi_XmRjp_beta_Dpsi_kpt(pSPARC, pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k, beta, spn_i, kpt, dim, "SO2");
spinOrbitCoupling.c:1585:    if (pSPARC->npNd > 1) {
spinOrbitCoupling.c:1586:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 4, MPI_C_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
spinOrbitCoupling.c:1587:        MPI_Allreduce(MPI_IN_PLACE, alpha_so1, pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 4, MPI_C_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
spinOrbitCoupling.c:1588:        MPI_Allreduce(MPI_IN_PLACE, alpha_so2, pSPARC->IP_displ_SOC[pSPARC->n_atom] * ncol * Nk * nspin * Nspinor * 4, MPI_C_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
spinOrbitCoupling.c:1596:    pressure_nloc *= pSPARC->occfac;
spinOrbitCoupling.c:1599:    energy_nl *= pSPARC->occfac/pSPARC->dV;
spinOrbitCoupling.c:1603:    if (pSPARC->npspin > 1) {    
spinOrbitCoupling.c:1604:        if (pSPARC->spincomm_index == 0){
spinOrbitCoupling.c:1605:            MPI_Reduce(MPI_IN_PLACE, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
spinOrbitCoupling.c:1607:            MPI_Reduce(&pressure_nloc, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
spinOrbitCoupling.c:1612:    if (pSPARC->npkpt > 1) {    
spinOrbitCoupling.c:1613:        if (pSPARC->kptcomm_index == 0){
spinOrbitCoupling.c:1614:            MPI_Reduce(MPI_IN_PLACE, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
spinOrbitCoupling.c:1616:            MPI_Reduce(&pressure_nloc, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->kpt_bridge_comm);
spinOrbitCoupling.c:1621:    if (pSPARC->npband > 1) {
spinOrbitCoupling.c:1622:        if (pSPARC->bandcomm_index == 0){
spinOrbitCoupling.c:1623:            MPI_Reduce(MPI_IN_PLACE, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
spinOrbitCoupling.c:1625:            MPI_Reduce(&pressure_nloc, &pressure_nloc, 1, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
spinOrbitCoupling.c:1630:        pSPARC->pres_nl = pressure_nloc;
spinOrbitCoupling.c:1635:        printf("Pressure contribution from nonlocal pseudopotential: = %.15f Ha\n", pSPARC->pres_nl);
spinOrbitCoupling.c:1656:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:1657:    DMnd = pSPARC->Nd_d_dmcomm * pSPARC->Nspinor;
spinOrbitCoupling.c:1658:    DMndbyNspinor = pSPARC->Nd_d_dmcomm;
spinOrbitCoupling.c:1659:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:1660:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:1663:    DMnx = pSPARC->Nx_d_dmcomm;
spinOrbitCoupling.c:1664:    DMny = pSPARC->Ny_d_dmcomm;
spinOrbitCoupling.c:1665:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:1668:    double Lx = pSPARC->range_x;
spinOrbitCoupling.c:1669:    double Ly = pSPARC->range_y;
spinOrbitCoupling.c:1670:    double Lz = pSPARC->range_z;
spinOrbitCoupling.c:1674:    k1 = pSPARC->k1_loc[kpt];
spinOrbitCoupling.c:1675:    k2 = pSPARC->k2_loc[kpt];
spinOrbitCoupling.c:1676:    k3 = pSPARC->k3_loc[kpt];
spinOrbitCoupling.c:1678:    IP_displ = !strcmpi(option, "SC") ? pSPARC->IP_displ : pSPARC->IP_displ_SOC;
spinOrbitCoupling.c:1680:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:1681:        nproj = !strcmpi(option, "SC") ? pSPARC->nlocProj[ityp].nproj : pSPARC->nlocProj[ityp].nprojso_ext;
spinOrbitCoupling.c:1683:            Chi = pSPARC->nlocProj[ityp].Chi_c;
spinOrbitCoupling.c:1685:            Chi = pSPARC->nlocProj[ityp].Chisowt0;
spinOrbitCoupling.c:1688:        for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
spinOrbitCoupling.c:1689:            R1 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3];
spinOrbitCoupling.c:1690:            R2 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
spinOrbitCoupling.c:1691:            R3 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
spinOrbitCoupling.c:1695:            ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
spinOrbitCoupling.c:1698:            atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
spinOrbitCoupling.c:1701:                    Chi = (spinor == 0) ? pSPARC->nlocProj[ityp].Chisowtnl : pSPARC->nlocProj[ityp].Chisowtl; 
spinOrbitCoupling.c:1709:                        indx = pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i];
spinOrbitCoupling.c:1713:                        x1_R1 = (i_DM + pSPARC->DMVertices_dmcomm[0]) * pSPARC->delta_x - R1;
spinOrbitCoupling.c:1714:                        x2_R2 = (j_DM + pSPARC->DMVertices_dmcomm[2]) * pSPARC->delta_y - R2;
spinOrbitCoupling.c:1715:                        x3_R3 = (k_DM + pSPARC->DMVertices_dmcomm[4]) * pSPARC->delta_z - R3;
spinOrbitCoupling.c:1727:                spinorshift = IP_displ[pSPARC->n_atom] * ncol * spinor;
spinOrbitCoupling.c:1748:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
spinOrbitCoupling.c:1749:    Ns = pSPARC->Nstates;
spinOrbitCoupling.c:1750:    Nk = pSPARC->Nkpts_kptcomm;
spinOrbitCoupling.c:1751:    nspin = pSPARC->Nspin_spincomm;
spinOrbitCoupling.c:1752:    Nspinor = pSPARC->Nspinor;
spinOrbitCoupling.c:1755:    IP_displ = !strcmpi(option, "SC") ? pSPARC->IP_displ : pSPARC->IP_displ_SOC;
spinOrbitCoupling.c:1758:    beta1_x1 = alpha + IP_displ[pSPARC->n_atom]*ncol*Nspinor*Nk*nspin;
spinOrbitCoupling.c:1759:    beta2_x2 = alpha + IP_displ[pSPARC->n_atom]*ncol*Nspinor*Nk*nspin * 2;
spinOrbitCoupling.c:1760:    beta3_x3 = alpha + IP_displ[pSPARC->n_atom]*ncol*Nspinor*Nk*nspin * 3;
spinOrbitCoupling.c:1767:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
spinOrbitCoupling.c:1768:                    lmax = pSPARC->psd[ityp].lmax;
spinOrbitCoupling.c:1769:                    for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
spinOrbitCoupling.c:1771:                        for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
spinOrbitCoupling.c:1772:                            g_nk = pSPARC->occ[spn_i*Nk*Ns+k*Ns+n];
spinOrbitCoupling.c:1777:                                ppl = !strcmpi(option, "SC") ? pSPARC->psd[ityp].ppl[l] : pSPARC->psd[ityp].ppl_soc[l-1];
spinOrbitCoupling.c:1780:                                if (l == pSPARC->localPsd[ityp]) {
spinOrbitCoupling.c:1787:                                        if (!strcmpi(option, "SC")) scaled_gamma_Jl = pSPARC->psd[ityp].Gamma[ldispl+np];
spinOrbitCoupling.c:1788:                                        else if (!strcmpi(option, "SO1")) scaled_gamma_Jl = spinorfac*0.5*m*pSPARC->psd[ityp].Gamma_soc[ldispl+np];
spinOrbitCoupling.c:1789:                                        else if (!strcmpi(option, "SO2")) scaled_gamma_Jl = 0.5*sqrt(l*(l+1)-m*(m+1))*pSPARC->psd[ityp].Gamma_soc[ldispl+np];
spinOrbitCoupling.c:1802:                        kptwt = pSPARC->kptWts_loc[k] / pSPARC->Nkpts;
stress.c:50:    if (pSPARC->CyclixFlag) {
stress.c:63:	for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
stress.c:64:	    for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
stress.c:65:		    avgvel[0] += pSPARC->Mass[ityp] * pSPARC->ion_vel[count * 3];
stress.c:66:		    avgvel[1] += pSPARC->Mass[ityp] * pSPARC->ion_vel[count * 3 + 1];
stress.c:67:		    avgvel[2] += pSPARC->Mass[ityp] * pSPARC->ion_vel[count * 3 + 2];
stress.c:68:		    mass_tot += pSPARC->Mass[ityp];
stress.c:80:            for(ityp = 0; ityp < pSPARC->Ntypes; ityp++){
stress.c:81:	            for(atm = 0; atm < pSPARC->nAtomv[ityp]; atm++){
stress.c:82:	                stress_i[index] -= pSPARC->Mass[ityp] * (pSPARC->ion_vel[count * 3 + j] - avgvel[j]) * (pSPARC->ion_vel[count * 3 + k] - avgvel[k]);
stress.c:91: 	double cell_measure = pSPARC->Jacbdet;
stress.c:92:    if(pSPARC->BCx == 0)
stress.c:93:        cell_measure *= pSPARC->range_x;
stress.c:94:    if(pSPARC->BCy == 0)
stress.c:95:        cell_measure *= pSPARC->range_y;
stress.c:96:    if(pSPARC->BCz == 0)
stress.c:97:        cell_measure *= pSPARC->range_z;
stress.c:100: 	    pSPARC->stress_i[j] = stress_i[j]/cell_measure;
stress.c:101: 	    pSPARC->stress[j] += pSPARC->stress_i[j];
stress.c:104:    if (pSPARC->BC == 2) {
stress.c:105:        pSPARC->pres_i = -1.0*(pSPARC->stress_i[0] + pSPARC->stress_i[3] + pSPARC->stress_i[5])/3.0;
stress.c:106:        pSPARC->pres += pSPARC->pres_i;
stress.c:119:    if (pSPARC->CyclixFlag) {
stress.c:135:    if (pSPARC->mGGAflag == 1) {
stress.c:136:        if (pSPARC->isGammaPoint) { // metaGGA stress psi term is related to wavefunction psi directly; it needs to be computed outside of function Calculate_XC_stress
stress.c:164:    if (pSPARC->usefock > 0) {
stress.c:177:            pSPARC->stress[i] = pSPARC->stress_k[i] + pSPARC->stress_xc[i] + pSPARC->stress_nl[i] + pSPARC->stress_el[i];
stress.c:178:            if (pSPARC->usefock > 0) {
stress.c:179:                pSPARC->stress[i] += pSPARC->stress_exx[i];
stress.c:183:        if (pSPARC->BC == 2) {
stress.c:184: 		    pSPARC->pres = -1.0*(pSPARC->stress[0] + pSPARC->stress[3] + pSPARC->stress[5])/3.0;
stress.c:187:        if (pSPARC->BC == 3){
stress.c:188:            if (pSPARC->BCx == 0 && pSPARC->BCy == 0){
stress.c:189:                pSPARC->stress[2] = pSPARC->stress[4] = pSPARC->stress[5] = 0.0;
stress.c:190:            } else if (pSPARC->BCx == 0 && pSPARC->BCz == 0){
stress.c:191:                pSPARC->stress[1] = pSPARC->stress[3] = pSPARC->stress[4] = 0.0;
stress.c:192:            } else if (pSPARC->BCy == 0 && pSPARC->BCz == 0){
stress.c:193:                pSPARC->stress[0] = pSPARC->stress[1] = pSPARC->stress[2] = 0.0;
stress.c:195:        } else if (pSPARC->BC == 4){
stress.c:196:            if (pSPARC->BCx == 0){
stress.c:197:                pSPARC->stress[1] = pSPARC->stress[2] = pSPARC->stress[3] =pSPARC->stress[4] = pSPARC->stress[5] = 0.0;
stress.c:198:            } else if (pSPARC->BCy == 0){
stress.c:199:                pSPARC->stress[0] = pSPARC->stress[1] = pSPARC->stress[2] =pSPARC->stress[4] = pSPARC->stress[5] = 0.0;
stress.c:200:            } else if (pSPARC->BCz == 0){
stress.c:201:                pSPARC->stress[0] = pSPARC->stress[1] = pSPARC->stress[2] =pSPARC->stress[3] = pSPARC->stress[4] = 0.0;
stress.c:211:        PrintStress(pSPARC, pSPARC->stress, NULL); 
stress.c:223:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
stress.c:225:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank);
stress.c:246:    FDn = pSPARC->order / 2;
stress.c:247:    DMnx = pSPARC->Nx_d;
stress.c:248:    DMny = pSPARC->Ny_d;
stress.c:263:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
stress.c:264:        rchrg = pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1];
stress.c:265:        for (iat = 0; iat < pSPARC->Atom_Influence_local[ityp].n_atom; iat++) {
stress.c:267:            x0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3];
stress.c:268:            y0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 1];
stress.c:269:            z0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 2];
stress.c:272:            int atom_index = pSPARC->Atom_Influence_local[ityp].atom_index[iat];
stress.c:275:            nx = pSPARC->Atom_Influence_local[ityp].xe[iat] - pSPARC->Atom_Influence_local[ityp].xs[iat] + 1;
stress.c:276:            ny = pSPARC->Atom_Influence_local[ityp].ye[iat] - pSPARC->Atom_Influence_local[ityp].ys[iat] + 1;
stress.c:277:            nz = pSPARC->Atom_Influence_local[ityp].ze[iat] - pSPARC->Atom_Influence_local[ityp].zs[iat] + 1;
stress.c:280:            nxp = nx + pSPARC->order;
stress.c:281:            nyp = ny + pSPARC->order;
stress.c:282:            nzp = nz + pSPARC->order;
stress.c:285:            nx2p = nxp + pSPARC->order;
stress.c:286:            ny2p = nyp + pSPARC->order;
stress.c:287:            nz2p = nzp + pSPARC->order;
stress.c:295:            icor = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->order;
stress.c:296:            jcor = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->order;
stress.c:297:            kcor = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->order;
stress.c:300:            x0_i_shift =  x0_i - pSPARC->delta_x * icor; 
stress.c:301:            y0_i_shift =  y0_i - pSPARC->delta_y * jcor;
stress.c:302:            z0_i_shift =  z0_i - pSPARC->delta_z * kcor;
stress.c:306:            if(pSPARC->cell_typ == 0) {    
stress.c:308:                    z = k * pSPARC->delta_z - z0_i_shift; 
stress.c:310:                        y = j * pSPARC->delta_y - y0_i_shift;
stress.c:312:                            x = i * pSPARC->delta_x - x0_i_shift;
stress.c:321:                    z = k * pSPARC->delta_z - z0_i_shift; 
stress.c:323:                        y = j * pSPARC->delta_y - y0_i_shift;
stress.c:325:                            x = i * pSPARC->delta_x - x0_i_shift;
stress.c:326:                            R[count] = sqrt(pSPARC->metricT[0] * (x*x) + pSPARC->metricT[1] * (x*y) + pSPARC->metricT[2] * (x*z) 
stress.c:327:                                          + pSPARC->metricT[4] * (y*y) + pSPARC->metricT[5] * (y*z) + pSPARC->metricT[8] * (z*z) );
stress.c:354:            SplineInterpMain(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rho_c_table, pSPARC->psd[ityp].size, 
stress.c:355:                         R_interp, rhocJ_interp, count_interp, pSPARC->psd[ityp].SplineRhocD,pSPARC->psd[ityp].is_r_uniform);
stress.c:377:            double xin = pSPARC->xin + pSPARC->Atom_Influence_local[ityp].xs[iat] * pSPARC->delta_x;       
stress.c:380:            dk = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->DMVertices[4];
stress.c:381:            dj = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->DMVertices[2];
stress.c:382:            di = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->DMVertices[0];
stress.c:401:                            drhocJ_x_val += (rhocJ[ishift_2p+p] - rhocJ[ishift_2p-p]) * pSPARC->D1_stencil_coeffs_x[p];
stress.c:402:                            drhocJ_y_val += (rhocJ[ishift_2p+pshifty_ex[p]] - rhocJ[ishift_2p-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
stress.c:403:                            drhocJ_z_val += (rhocJ[ishift_2p+pshiftz_ex[p]] - rhocJ[ishift_2p-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
stress.c:413:            double *Vxc = pSPARC->XCPotential;
stress.c:426:                        x1_R1 = (i_DM + pSPARC->DMVertices[0]) * pSPARC->delta_x - x0_i;
stress.c:427:                        x2_R2 = (j_DM + pSPARC->DMVertices[2]) * pSPARC->delta_y - y0_i;
stress.c:428:                        x3_R3 = (k_DM + pSPARC->DMVertices[4]) * pSPARC->delta_z - z0_i;
stress.c:429:                        if (pSPARC->cell_typ != 0)
stress.c:434:                        if (pSPARC->cell_typ != 0)
stress.c:437:                        if (pSPARC->spin_typ == 0)
stress.c:439:                        else if (pSPARC->spin_typ == 1)
stress.c:440:                            Vxc_val = 0.5 * (Vxc[ishift_DM] + Vxc[pSPARC->Nd_d+ishift_DM]);
stress.c:458:        stress_xc_nlcc[i] *= pSPARC->dV;
stress.c:461:    MPI_Allreduce(MPI_IN_PLACE, stress_xc_nlcc, 6, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
stress.c:466:        double cell_measure = pSPARC->Jacbdet;
stress.c:467:        if(pSPARC->BCx == 0)
stress.c:468:            cell_measure *= pSPARC->range_x;
stress.c:469:        if(pSPARC->BCy == 0)
stress.c:470:            cell_measure *= pSPARC->range_y;
stress.c:471:        if(pSPARC->BCz == 0)
stress.c:472:            cell_measure *= pSPARC->range_z;
stress.c:496:    if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
stress.c:498:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank);
stress.c:506:    if(strcmpi(pSPARC->XC,"LDA_PW") == 0 || strcmpi(pSPARC->XC,"LDA_PZ") == 0){
stress.c:507:        pSPARC->stress_xc[0] = pSPARC->stress_xc[3] = pSPARC->stress_xc[5] = pSPARC->Exc - pSPARC->Exc_corr;
stress.c:508:        pSPARC->stress_xc[1] = pSPARC->stress_xc[2] = pSPARC->stress_xc[4] = 0.0;
stress.c:509:    } else if(strcmpi(pSPARC->XC,"GGA_PBE") == 0 || strcmpi(pSPARC->XC,"GGA_RPBE") == 0 || strcmpi(pSPARC->XC,"GGA_PBEsol") == 0 
stress.c:510:        || strcmpi(pSPARC->XC,"PBE0") == 0 || strcmpi(pSPARC->XC,"HF") == 0 || strcmpi(pSPARC->XC,"HSE") == 0
stress.c:511:        || strcmpi(pSPARC->XC,"vdWDF1") == 0 || strcmpi(pSPARC->XC,"vdWDF2") == 0 || strcmpi(pSPARC->XC, "SCAN") == 0
stress.c:512:        || strcmpi(pSPARC->XC, "GGA_CONV_PBE") == 0 || strcmpi(pSPARC->XC, "GGA_CONV_PBE_MULTIPOLE") == 0){
stress.c:513:        pSPARC->stress_xc[0] = pSPARC->stress_xc[3] = pSPARC->stress_xc[5] = pSPARC->Exc - pSPARC->Exc_corr;
stress.c:514:        pSPARC->stress_xc[1] = pSPARC->stress_xc[2] = pSPARC->stress_xc[4] = 0.0;
stress.c:516:        DMnd = (pSPARC->Nspden/2*2+1) * pSPARC->Nd_d;
stress.c:526:        if (pSPARC->NLCC_flag) {
stress.c:529:                rho[i] = pSPARC->electronDens[i] + pSPARC->electronDens_core[i];
stress.c:531:            rho = pSPARC->electronDens;
stress.c:534:        Gradient_vectors_dir(pSPARC, pSPARC->Nd_d, pSPARC->DMVertices, (pSPARC->Nspden/2*2+1), 0.0, rho, Drho_x, 0, pSPARC->dmcomm_phi);
stress.c:535:        Gradient_vectors_dir(pSPARC, pSPARC->Nd_d, pSPARC->DMVertices, (pSPARC->Nspden/2*2+1), 0.0, rho, Drho_y, 1, pSPARC->dmcomm_phi);
stress.c:536:        Gradient_vectors_dir(pSPARC, pSPARC->Nd_d, pSPARC->DMVertices, (pSPARC->Nspden/2*2+1), 0.0, rho, Drho_z, 2, pSPARC->dmcomm_phi);
stress.c:538:        if (pSPARC->NLCC_flag) free(rho);
stress.c:540:        if(pSPARC->cell_typ == 0){
stress.c:542:                stress_xc[0] += Drho_x[i] * Drho_x[i] * pSPARC->Dxcdgrho[i];
stress.c:543:                stress_xc[1] += Drho_x[i] * Drho_y[i] * pSPARC->Dxcdgrho[i];
stress.c:544:                stress_xc[2] += Drho_x[i] * Drho_z[i] * pSPARC->Dxcdgrho[i];
stress.c:545:                stress_xc[3] += Drho_y[i] * Drho_y[i] * pSPARC->Dxcdgrho[i];
stress.c:546:                stress_xc[4] += Drho_y[i] * Drho_z[i] * pSPARC->Dxcdgrho[i];
stress.c:547:                stress_xc[5] += Drho_z[i] * Drho_z[i] * pSPARC->Dxcdgrho[i];    
stress.c:550:                stress_xc[i] *= pSPARC->dV;
stress.c:553:            MPI_Allreduce(MPI_IN_PLACE, stress_xc, 6, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
stress.c:557:                stress_xc[0] += Drho_x[i] * Drho_x[i] * pSPARC->Dxcdgrho[i];
stress.c:558:                stress_xc[1] += Drho_x[i] * Drho_y[i] * pSPARC->Dxcdgrho[i];
stress.c:559:                stress_xc[2] += Drho_x[i] * Drho_z[i] * pSPARC->Dxcdgrho[i];
stress.c:560:                stress_xc[3] += Drho_y[i] * Drho_y[i] * pSPARC->Dxcdgrho[i];
stress.c:561:                stress_xc[4] += Drho_y[i] * Drho_z[i] * pSPARC->Dxcdgrho[i];
stress.c:562:                stress_xc[5] += Drho_z[i] * Drho_z[i] * pSPARC->Dxcdgrho[i];  
stress.c:565:                stress_xc[i] *= pSPARC->dV;
stress.c:568:            MPI_Allreduce(MPI_IN_PLACE, stress_xc, 6, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
stress.c:572:            pSPARC->stress_xc[i] -= stress_xc[i];
stress.c:581:        double cell_measure = pSPARC->Jacbdet;
stress.c:582:        if(pSPARC->BCx == 0)
stress.c:583:            cell_measure *= pSPARC->range_x;
stress.c:584:        if(pSPARC->BCy == 0)
stress.c:585:            cell_measure *= pSPARC->range_y;
stress.c:586:        if(pSPARC->BCz == 0)
stress.c:587:            cell_measure *= pSPARC->range_z;
stress.c:590:            pSPARC->stress_xc[i] /= cell_measure; 
stress.c:594:    if (pSPARC->NLCC_flag) {
stress.c:599:            pSPARC->stress_xc[i] += stress_xc_nlcc[i];
stress.c:603:    if (pSPARC->d3Flag == 1) {
stress.c:607:    if (pSPARC->vdWDFFlag != 0) { // either vdW_DF1 or vdW_DF2, compute the contribution of nonlinear correlation of vdWDF on stress
stress.c:608:        if (pSPARC->spin_typ == 0) {
stress.c:619:        PrintStress(pSPARC, pSPARC->stress_xc, NULL); 
stress.c:643:	if (pSPARC->dmcomm_phi == MPI_COMM_NULL) return;
stress.c:663:    MPI_Comm_rank(pSPARC->dmcomm_phi, &rank);
stress.c:672:    FDn = pSPARC->order / 2;
stress.c:673:    w2_diag = (pSPARC->D2_stencil_coeffs_x[0] + pSPARC->D2_stencil_coeffs_y[0] + pSPARC->D2_stencil_coeffs_z[0]) * -inv_4PI;
stress.c:674:    if(pSPARC->cell_typ == 0){
stress.c:683:    // Nx = pSPARC->Nx; Ny = pSPARC->Ny; Nz = pSPARC->Nz;
stress.c:684:    DMnx = pSPARC->Nx_d; DMny = pSPARC->Ny_d; // DMnz = pSPARC->Nz_d;
stress.c:685:    DMnd = pSPARC->Nd_d;
stress.c:699:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->elecstPotential, Dphi_x, 0, pSPARC->dmcomm_phi);
stress.c:700:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->elecstPotential, Dphi_y, 1, pSPARC->dmcomm_phi);
stress.c:701:    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices, 1, 0.0, pSPARC->elecstPotential, Dphi_z, 2, pSPARC->dmcomm_phi);
stress.c:705:        temp1 = 0.5 * (pSPARC->psdChrgDens[i] - pSPARC->electronDens[i]) * pSPARC->elecstPotential[i];
stress.c:714:    for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
stress.c:715:        rchrg = pSPARC->psd[ityp].RadialGrid[pSPARC->psd[ityp].size-1];
stress.c:716:        for (iat = 0; iat < pSPARC->Atom_Influence_local[ityp].n_atom; iat++) {
stress.c:718:            x0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3];
stress.c:719:            y0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 1];
stress.c:720:            z0_i = pSPARC->Atom_Influence_local[ityp].coords[iat * 3 + 2];
stress.c:723:            nx = pSPARC->Atom_Influence_local[ityp].xe[iat] - pSPARC->Atom_Influence_local[ityp].xs[iat] + 1;
stress.c:724:            ny = pSPARC->Atom_Influence_local[ityp].ye[iat] - pSPARC->Atom_Influence_local[ityp].ys[iat] + 1;
stress.c:725:            nz = pSPARC->Atom_Influence_local[ityp].ze[iat] - pSPARC->Atom_Influence_local[ityp].zs[iat] + 1;
stress.c:728:            nxp = nx + pSPARC->order;
stress.c:729:            nyp = ny + pSPARC->order;
stress.c:730:            nzp = nz + pSPARC->order;
stress.c:733:            nx2p = nxp + pSPARC->order;
stress.c:734:            ny2p = nyp + pSPARC->order;
stress.c:735:            nz2p = nzp + pSPARC->order;
stress.c:746:            icor = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->order;
stress.c:747:            jcor = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->order;
stress.c:748:            kcor = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->order;
stress.c:751:            x0_i_shift =  x0_i - pSPARC->delta_x * icor; 
stress.c:752:            y0_i_shift =  y0_i - pSPARC->delta_y * jcor;
stress.c:753:            z0_i_shift =  z0_i - pSPARC->delta_z * kcor;
stress.c:757:            if(pSPARC->cell_typ == 0) {    
stress.c:759:                    z = k * pSPARC->delta_z - z0_i_shift; 
stress.c:761:                        y = j * pSPARC->delta_y - y0_i_shift;
stress.c:763:                            x = i * pSPARC->delta_x - x0_i_shift;
stress.c:772:                    z = k * pSPARC->delta_z - z0_i_shift; 
stress.c:774:                        y = j * pSPARC->delta_y - y0_i_shift;
stress.c:776:                            x = i * pSPARC->delta_x - x0_i_shift;
stress.c:777:                            R[count] = sqrt(pSPARC->metricT[0] * (x*x) + pSPARC->metricT[1] * (x*y) + pSPARC->metricT[2] * (x*z) 
stress.c:778:                                          + pSPARC->metricT[4] * (y*y) + pSPARC->metricT[5] * (y*z) + pSPARC->metricT[8] * (z*z) );
stress.c:793:            Calculate_Pseudopot_Ref(R, nd_2ex, pSPARC->REFERENCE_CUTOFF, -pSPARC->Znucl[ityp], VJ_ref);
stress.c:812:                    VJ[i] = -pSPARC->Znucl[ityp] / R[i];
stress.c:820:            if (pSPARC->psd[ityp].is_r_uniform == 1) {
stress.c:821:                SplineInterpUniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
stress.c:822:                                    R_interp, VJ_interp, count_interp, pSPARC->psd[ityp].SplinerVlocD); 
stress.c:824:                SplineInterpNonuniform(pSPARC->psd[ityp].RadialGrid,pSPARC->psd[ityp].rVloc, pSPARC->psd[ityp].size, 
stress.c:825:                                    R_interp, VJ_interp, count_interp, pSPARC->psd[ityp].SplinerVlocD); 
stress.c:833:                    VJ[ind_interp[i]] = pSPARC->psd[ityp].Vloc_0;
stress.c:860:            double xin = pSPARC->xin + pSPARC->Atom_Influence_local[ityp].xs[iat] * pSPARC->delta_x;       
stress.c:865:            dk = pSPARC->Atom_Influence_local[ityp].zs[iat] - pSPARC->DMVertices[4];
stress.c:866:            dj = pSPARC->Atom_Influence_local[ityp].ys[iat] - pSPARC->DMVertices[2];
stress.c:867:            di = pSPARC->Atom_Influence_local[ityp].xs[iat] - pSPARC->DMVertices[0];
stress.c:868:            if(pSPARC->cell_typ == 0){
stress.c:869:                for(kp = FDn, kp2 = pSPARC->order, k_DM = dk; kp2 < nzp; kp++, kp2++, k_DM++) {
stress.c:873:                    for(jp = FDn, jp2 = pSPARC->order, j_DM = dj; jp2 < nyp; jp++, jp2++, j_DM++) {
stress.c:878:                        for(ip = FDn, ip2 = pSPARC->order, i_DM = di; ip2 < nxp ; ip++, ip2++, i_DM++) {
stress.c:888:                                DbJ_x_val += (bJ[ishift_p+p] - bJ[ishift_p-p]) * pSPARC->D1_stencil_coeffs_x[p];
stress.c:889:                                DbJ_y_val += (bJ[ishift_p+pshifty[p]] - bJ[ishift_p-pshifty[p]]) * pSPARC->D1_stencil_coeffs_y[p];
stress.c:890:                                DbJ_z_val += (bJ[ishift_p+pshiftz[p]] - bJ[ishift_p-pshiftz[p]]) * pSPARC->D1_stencil_coeffs_z[p];
stress.c:892:                                DbJ_ref_x_val += (bJ_ref[ishift_p+p] - bJ_ref[ishift_p-p]) * pSPARC->D1_stencil_coeffs_x[p];
stress.c:893:                                DbJ_ref_y_val += (bJ_ref[ishift_p+pshifty[p]] - bJ_ref[ishift_p-pshifty[p]]) * pSPARC->D1_stencil_coeffs_y[p];
stress.c:894:                                DbJ_ref_z_val += (bJ_ref[ishift_p+pshiftz[p]] - bJ_ref[ishift_p-pshiftz[p]]) * pSPARC->D1_stencil_coeffs_z[p];
stress.c:896:                                DVJ_x_val += (VJ[ishift_2p+p] - VJ[ishift_2p-p]) * pSPARC->D1_stencil_coeffs_x[p];
stress.c:897:                                DVJ_y_val += (VJ[ishift_2p+pshifty_ex[p]] - VJ[ishift_2p-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
stress.c:898:                                DVJ_z_val += (VJ[ishift_2p+pshiftz_ex[p]] - VJ[ishift_2p-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
stress.c:900:                                DVJ_ref_x_val += (VJ_ref[ishift_2p+p] - VJ_ref[ishift_2p-p]) * pSPARC->D1_stencil_coeffs_x[p];
stress.c:901:                                DVJ_ref_y_val += (VJ_ref[ishift_2p+pshifty_ex[p]] - VJ_ref[ishift_2p-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
stress.c:902:                                DVJ_ref_z_val += (VJ_ref[ishift_2p+pshiftz_ex[p]] - VJ_ref[ishift_2p-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
stress.c:907:                            x1_R1 = (i_DM + pSPARC->DMVertices[0]) * pSPARC->delta_x - x0_i;
stress.c:908:                            x2_R2 = (j_DM + pSPARC->DMVertices[2]) * pSPARC->delta_y - y0_i;
stress.c:909:                            x3_R3 = (k_DM + pSPARC->DMVertices[4]) * pSPARC->delta_z - z0_i;
stress.c:911:                            stress_el[0] += DbJ_x_val * x1_R1 * pSPARC->elecstPotential[ishift_DM];
stress.c:912:                            stress_el[1] += DbJ_x_val * x2_R2 * pSPARC->elecstPotential[ishift_DM];
stress.c:913:                            stress_el[2] += DbJ_x_val * x3_R3 * pSPARC->elecstPotential[ishift_DM];
stress.c:914:                            stress_el[3] += DbJ_y_val * x2_R2 * pSPARC->elecstPotential[ishift_DM];
stress.c:915:                            stress_el[4] += DbJ_y_val * x3_R3 * pSPARC->elecstPotential[ishift_DM];
stress.c:916:                            stress_el[5] += DbJ_z_val * x3_R3 * pSPARC->elecstPotential[ishift_DM];
stress.c:918:                            temp1 = pSPARC->Vc[ishift_DM] - VJ_ref[ishift_2p];
stress.c:919:                            temp2 = pSPARC->Vc[ishift_DM];
stress.c:920:                            temp3 = pSPARC->psdChrgDens[ishift_DM] + pSPARC->psdChrgDens_ref[ishift_DM];
stress.c:936:                for(kp = FDn, kp2 = pSPARC->order, k_DM = dk; kp2 < nzp; kp++, kp2++, k_DM++) {
stress.c:940:                    for(jp = FDn, jp2 = pSPARC->order, j_DM = dj; jp2 < nyp; jp++, jp2++, j_DM++) {
stress.c:945:                        for(ip = FDn, ip2 = pSPARC->order, i_DM = di; ip2 < nxp ; ip++, ip2++, i_DM++) {
stress.c:955:                                DbJ_x_val += (bJ[ishift_p+p] - bJ[ishift_p-p]) * pSPARC->D1_stencil_coeffs_x[p];
stress.c:956:                                DbJ_y_val += (bJ[ishift_p+pshifty[p]] - bJ[ishift_p-pshifty[p]]) * pSPARC->D1_stencil_coeffs_y[p];
stress.c:957:                                DbJ_z_val += (bJ[ishift_p+pshiftz[p]] - bJ[ishift_p-pshiftz[p]]) * pSPARC->D1_stencil_coeffs_z[p];
stress.c:959:                                DbJ_ref_x_val += (bJ_ref[ishift_p+p] - bJ_ref[ishift_p-p]) * pSPARC->D1_stencil_coeffs_x[p];
stress.c:960:                                DbJ_ref_y_val += (bJ_ref[ishift_p+pshifty[p]] - bJ_ref[ishift_p-pshifty[p]]) * pSPARC->D1_stencil_coeffs_y[p];
stress.c:961:                                DbJ_ref_z_val += (bJ_ref[ishift_p+pshiftz[p]] - bJ_ref[ishift_p-pshiftz[p]]) * pSPARC->D1_stencil_coeffs_z[p];
stress.c:963:                                DVJ_x_val += (VJ[ishift_2p+p] - VJ[ishift_2p-p]) * pSPARC->D1_stencil_coeffs_x[p];
stress.c:964:                                DVJ_y_val += (VJ[ishift_2p+pshifty_ex[p]] - VJ[ishift_2p-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
stress.c:965:                                DVJ_z_val += (VJ[ishift_2p+pshiftz_ex[p]] - VJ[ishift_2p-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
stress.c:967:                                DVJ_ref_x_val += (VJ_ref[ishift_2p+p] - VJ_ref[ishift_2p-p]) * pSPARC->D1_stencil_coeffs_x[p];
stress.c:968:                                DVJ_ref_y_val += (VJ_ref[ishift_2p+pshifty_ex[p]] - VJ_ref[ishift_2p-pshifty_ex[p]]) * pSPARC->D1_stencil_coeffs_y[p];
stress.c:969:                                DVJ_ref_z_val += (VJ_ref[ishift_2p+pshiftz_ex[p]] - VJ_ref[ishift_2p-pshiftz_ex[p]]) * pSPARC->D1_stencil_coeffs_z[p];
stress.c:974:                            x1_R1 = (i_DM + pSPARC->DMVertices[0]) * pSPARC->delta_x - x0_i;
stress.c:975:                            x2_R2 = (j_DM + pSPARC->DMVertices[2]) * pSPARC->delta_y - y0_i;
stress.c:976:                            x3_R3 = (k_DM + pSPARC->DMVertices[4]) * pSPARC->delta_z - z0_i;
stress.c:984:                            stress_el[0] += DbJ_x_val * x1_R1 * pSPARC->elecstPotential[ishift_DM];
stress.c:985:                            stress_el[1] += DbJ_x_val * x2_R2 * pSPARC->elecstPotential[ishift_DM];
stress.c:986:                            stress_el[2] += DbJ_x_val * x3_R3 * pSPARC->elecstPotential[ishift_DM];
stress.c:987:                            stress_el[3] += DbJ_y_val * x2_R2 * pSPARC->elecstPotential[ishift_DM];
stress.c:988:                            stress_el[4] += DbJ_y_val * x3_R3 * pSPARC->elecstPotential[ishift_DM];
stress.c:989:                            stress_el[5] += DbJ_z_val * x3_R3 * pSPARC->elecstPotential[ishift_DM];
stress.c:991:                            temp1 = pSPARC->Vc[ishift_DM] - VJ_ref[ishift_2p];
stress.c:992:                            temp2 = pSPARC->Vc[ishift_DM];
stress.c:993:                            temp3 = pSPARC->psdChrgDens[ishift_DM] + pSPARC->psdChrgDens_ref[ishift_DM];
stress.c:1017:        pSPARC->stress_el[i] = (stress_el[i] + 0.5 * stress_corr[i]) * pSPARC->dV;
stress.c:1021:    MPI_Allreduce(MPI_IN_PLACE, pSPARC->stress_el, 6, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm_phi);
stress.c:1024:    pSPARC->stress_el[0] += pSPARC->Esc;
stress.c:1025:    pSPARC->stress_el[3] += pSPARC->Esc;
stress.c:1026:    pSPARC->stress_el[5] += pSPARC->Esc;
stress.c:1030:        double cell_measure = pSPARC->Jacbdet;
stress.c:1031:        if(pSPARC->BCx == 0)
stress.c:1032:            cell_measure *= pSPARC->range_x;
stress.c:1033:        if(pSPARC->BCy == 0)
stress.c:1034:            cell_measure *= pSPARC->range_y;
stress.c:1035:        if(pSPARC->BCz == 0)
stress.c:1036:            cell_measure *= pSPARC->range_z;
stress.c:1039:            pSPARC->stress_el[i] /= cell_measure; 
stress.c:1047:        PrintStress(pSPARC, pSPARC->stress_el, NULL); 
stress.c:1078:    if (pSPARC->isGammaPoint) {
stress.c:1079:        if (pSPARC->SQFlag == 1)
stress.c:1084:        if (pSPARC->Nspinor == 1)
stress.c:1086:        else if (pSPARC->Nspinor == 2)
stress.c:1096:    if (pSPARC->spincomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
stress.c:1101:    nspin = pSPARC->Nspin_spincomm; // number of spin in my spin communicator
stress.c:1102:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
stress.c:1103:    Ns = pSPARC->Nstates; // total number of bands
stress.c:1104:    DMnd = pSPARC->Nd_d_dmcomm;
stress.c:1105:    DMnx = pSPARC->Nx_d_dmcomm;
stress.c:1106:    DMny = pSPARC->Ny_d_dmcomm;
stress.c:1129:    alpha = (double *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 10, sizeof(double));
stress.c:1131:    if (pSPARC->SQ3Flag == 1)
stress.c:1132:        alpha2 = (double *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin, sizeof(double));
stress.c:1138:    double *XorY = (pSPARC->SQ3Flag == 0) ? pSPARC->Xorb : pSPARC->Yorb;
stress.c:1139:    double *YorZ = (pSPARC->SQ3Flag == 0) ? pSPARC->Yorb : pSPARC->Zorb;
stress.c:1143:        beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
stress.c:1144:        if (pSPARC->SQ3Flag == 1)   
stress.c:1145:            beta2 = alpha2 + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
stress.c:1146:        for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
stress.c:1147:            if (!pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
stress.c:1148:            for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
stress.c:1149:                ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
stress.c:1151:                atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
stress.c:1155:                    psi_ptr = pSPARC->Xorb + spn_i * size_s + n * DMnd;
stress.c:1158:                        *(psi_rc_ptr + i) = *(psi_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
stress.c:1161:                cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, pSPARC->dV, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
stress.c:1162:                            psi_rc, ndc, 1.0, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); // multiplied dV to get inner-product
stress.c:1164:                if (pSPARC->SQ3Flag == 1){
stress.c:1166:                        psi_ptr = pSPARC->Yorb + spn_i * size_s + n * DMnd;
stress.c:1169:                            *(psi_rc_ptr + i) = *(psi_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]);
stress.c:1172:                    cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, pSPARC->dV, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
stress.c:1173:                                psi_rc, ndc, 1.0, beta2+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); // multiply dV to get inner-product
stress.c:1187:            Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, XorY+spn_i*size_s, YorZ+spn_i*size_s, dim, pSPARC->dmcomm);
stress.c:1188:            beta1 = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (nspin * (3*dim+1) + count);
stress.c:1189:            beta2 = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (nspin * (3*dim+2) + count);
stress.c:1190:            beta3 = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (nspin * (3*dim+3) + count);
stress.c:1191:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
stress.c:1192:                if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
stress.c:1193:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
stress.c:1194:                    R1 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3];
stress.c:1195:                    R2 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
stress.c:1196:                    R3 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
stress.c:1197:                    ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
stress.c:1201:                    atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
stress.c:1208:                            indx = pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i];
stress.c:1212:                            x1_R1 = (i_DM + pSPARC->DMVertices_dmcomm[0]) * pSPARC->delta_x - R1;
stress.c:1213:                            x2_R2 = (j_DM + pSPARC->DMVertices_dmcomm[2]) * pSPARC->delta_y - R2;
stress.c:1214:                            x3_R3 = (k_DM + pSPARC->DMVertices_dmcomm[4]) * pSPARC->delta_z - R3;
stress.c:1227:                    cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, 1.0, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
stress.c:1228:                                dpsi_x1_rc, ndc, 1.0, beta1+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj);
stress.c:1229:                    cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, 1.0, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
stress.c:1230:                                dpsi_x2_rc, ndc, 1.0, beta2+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj);
stress.c:1231:                    cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, 1.0, pSPARC->nlocProj[ityp].Chi[iat], ndc, 
stress.c:1232:                                dpsi_x3_rc, ndc, 1.0, beta3+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj);                        
stress.c:1242:                if (pSPARC->SQ3Flag == 1) {
stress.c:1243:                    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb+spn_i*size_s, dpsi_full+spn_i*size_s, 0, pSPARC->dmcomm);
stress.c:1253:                    g_nk = (pSPARC->SQ3Flag == 0) ? pSPARC->occ[spn_i*Ns + n + pSPARC->band_start_indx] : 1.0;
stress.c:1258:                Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb+spn_i*size_s, dpsi_full+spn_i*size_s, 1, pSPARC->dmcomm);
stress.c:1266:                    g_nk = (pSPARC->SQ3Flag == 0) ? pSPARC->occ[spn_i*Ns + n + pSPARC->band_start_indx] : 1.0;
stress.c:1272:                Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb+spn_i*size_s, dpsi_full+spn_i*size_s, 2, pSPARC->dmcomm);
stress.c:1280:                    g_nk = (pSPARC->SQ3Flag == 0) ? pSPARC->occ[spn_i*Ns + n + pSPARC->band_start_indx] : 1.0;
stress.c:1286:                if (pSPARC->SQ3Flag == 1) {
stress.c:1288:                    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb+spn_i*size_s, dpsi_full+spn_i*size_s, 2, pSPARC->dmcomm);
stress.c:1298:                    g_nk = (pSPARC->SQ3Flag == 0) ? pSPARC->occ[spn_i*Ns + n + pSPARC->band_start_indx] : 1.0;
stress.c:1304:                if (pSPARC->SQ3Flag == 1) {
stress.c:1306:                    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb+spn_i*size_s, dpsi_full+spn_i*size_s, 1, pSPARC->dmcomm);
stress.c:1316:                    g_nk = (pSPARC->SQ3Flag == 0) ? pSPARC->occ[spn_i*Ns + n + pSPARC->band_start_indx] : 1.0;
stress.c:1322:                if (pSPARC->SQ3Flag == 1) {
stress.c:1324:                    Gradient_vectors_dir(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, ncol, 0.0, pSPARC->Xorb+spn_i*size_s, dpsi_full+spn_i*size_s, 2, pSPARC->dmcomm);
stress.c:1334:                    g_nk = (pSPARC->SQ3Flag == 0) ? pSPARC->occ[spn_i*Ns + n + pSPARC->band_start_indx] : 1.0;
stress.c:1342:    stress_k[0] *= -(2.0/pSPARC->Nspin); // component (1,1)
stress.c:1343:    stress_k[1] *= -(2.0/pSPARC->Nspin); // component (1,2)
stress.c:1344:    stress_k[2] *= -(2.0/pSPARC->Nspin); // component (1,3)
stress.c:1345:    stress_k[3] *= -(2.0/pSPARC->Nspin); // component (2,2)
stress.c:1346:    stress_k[4] *= -(2.0/pSPARC->Nspin); // component (2,3)
stress.c:1347:    stress_k[5] *= -(2.0/pSPARC->Nspin); // component (3,3)
stress.c:1351:    if (pSPARC->npNd > 1) {
stress.c:1352:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * nspin * 10, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
stress.c:1353:        MPI_Allreduce(MPI_IN_PLACE, stress_k, 6, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
stress.c:1358:    beta1_x1 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin;
stress.c:1359:    beta1_x2 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 2;
stress.c:1360:    beta1_x3 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 3;
stress.c:1361:    beta2_x1 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 4;
stress.c:1362:    beta2_x2 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 5;
stress.c:1363:    beta2_x3 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 6;
stress.c:1364:    beta3_x1 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 7;
stress.c:1365:    beta3_x2 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 8;
stress.c:1366:    beta3_x3 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*nspin * 9;
stress.c:1370:        for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
stress.c:1371:            lmax = pSPARC->psd[ityp].lmax;
stress.c:1372:            for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
stress.c:1374:                for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
stress.c:1375:                    g_nk = (pSPARC->SQ3Flag == 0) ? pSPARC->occ[spn_i*Ns + n] : 1.0;
stress.c:1380:                        if (l == pSPARC->localPsd[ityp]) {
stress.c:1381:                            ldispl += pSPARC->psd[ityp].ppl[l];
stress.c:1384:                        for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
stress.c:1387:                                if (pSPARC->SQ3Flag == 0)
stress.c:1396:                            gamma_jl = pSPARC->psd[ityp].Gamma[ldispl+np];
stress.c:1401:                        ldispl += pSPARC->psd[ityp].ppl[l];
stress.c:1416:        stress_nl[i] *= (2.0/pSPARC->Nspin) * 2.0;
stress.c:1418:    energy_nl *= (2.0/pSPARC->Nspin)/pSPARC->dV;   
stress.c:1421:    if(pSPARC->cell_typ == 0){
stress.c:1422:        pSPARC->stress_nl[0] = stress_nl[0] + energy_nl;
stress.c:1423:        pSPARC->stress_nl[1] = stress_nl[1];
stress.c:1424:        pSPARC->stress_nl[2] = stress_nl[2];
stress.c:1425:        pSPARC->stress_nl[3] = stress_nl[4] + energy_nl;
stress.c:1426:        pSPARC->stress_nl[4] = stress_nl[5];
stress.c:1427:        pSPARC->stress_nl[5] = stress_nl[8] + energy_nl;
stress.c:1429:            pSPARC->stress_k[i] = stress_k[i];
stress.c:1436:                c_g[3*i+j] = pSPARC->gradT[3*j+i];
stress.c:1437:                c_c[3*i+j] = pSPARC->LatUVec[3*j+i];
stress.c:1441:        pSPARC->stress_nl[0] = c_g[0] * (c_c[0] * stress_nl[0] + c_c[1] * stress_nl[1] + c_c[2] * stress_nl[2]) +
stress.c:1444:        pSPARC->stress_nl[1] = c_g[0] * (c_c[3] * stress_nl[0] + c_c[4] * stress_nl[1] + c_c[5] * stress_nl[2]) +
stress.c:1447:        pSPARC->stress_nl[2] = c_g[0] * (c_c[6] * stress_nl[0] + c_c[7] * stress_nl[1] + c_c[8] * stress_nl[2]) +
stress.c:1450:        pSPARC->stress_nl[3] = c_g[3] * (c_c[3] * stress_nl[0] + c_c[4] * stress_nl[1] + c_c[5] * stress_nl[2]) +
stress.c:1453:        pSPARC->stress_nl[4] = c_g[3] * (c_c[6] * stress_nl[0] + c_c[7] * stress_nl[1] + c_c[8] * stress_nl[2]) +
stress.c:1456:        pSPARC->stress_nl[5] = c_g[6] * (c_c[6] * stress_nl[0] + c_c[7] * stress_nl[1] + c_c[8] * stress_nl[2]) +
stress.c:1460:        pSPARC->stress_k[0] = c_g[0] * (c_g[0] * stress_k[0] + c_g[1] * stress_k[1] + c_g[2] * stress_k[2]) +
stress.c:1463:        pSPARC->stress_k[1] = c_g[0] * (c_g[3] * stress_k[0] + c_g[4] * stress_k[1] + c_g[5] * stress_k[2]) +
stress.c:1466:        pSPARC->stress_k[2] = c_g[0] * (c_g[6] * stress_k[0] + c_g[7] * stress_k[1] + c_g[8] * stress_k[2]) +
stress.c:1469:        pSPARC->stress_k[3] = c_g[3] * (c_g[3] * stress_k[0] + c_g[4] * stress_k[1] + c_g[5] * stress_k[2]) +
stress.c:1472:        pSPARC->stress_k[4] = c_g[3] * (c_g[6] * stress_k[0] + c_g[7] * stress_k[1] + c_g[8] * stress_k[2]) +
stress.c:1475:        pSPARC->stress_k[5] = c_g[6] * (c_g[6] * stress_k[0] + c_g[7] * stress_k[1] + c_g[8] * stress_k[2]) +
stress.c:1484:    if (pSPARC->npspin > 1) {    
stress.c:1485:        if (pSPARC->spincomm_index == 0){
stress.c:1486:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
stress.c:1487:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
stress.c:1489:            MPI_Reduce(pSPARC->stress_nl, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
stress.c:1490:            MPI_Reduce(pSPARC->stress_k, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
stress.c:1495:    if (pSPARC->npband > 1) {
stress.c:1496:        if (pSPARC->bandcomm_index == 0){
stress.c:1497:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
stress.c:1498:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
stress.c:1500:            MPI_Reduce(pSPARC->stress_nl, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
stress.c:1501:            MPI_Reduce(pSPARC->stress_k, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
stress.c:1506:    if (pSPARC->ext_FPMD_Flag != 0) {
stress.c:1507:        double highE_Tk = pSPARC->ext_FPMD_highETk;
stress.c:1508:        pSPARC->stress_k[0] -= 2.0 / 3.0 * highE_Tk; // component (1,1)
stress.c:1509:        pSPARC->stress_k[3] -= 2.0 / 3.0 * highE_Tk; // component (2,2)
stress.c:1510:        pSPARC->stress_k[5] -= 2.0 / 3.0 * highE_Tk; // component (3,3)
stress.c:1515:        double cell_measure = pSPARC->Jacbdet;
stress.c:1516:        if(pSPARC->BCx == 0)
stress.c:1517:            cell_measure *= pSPARC->range_x;
stress.c:1518:        if(pSPARC->BCy == 0)
stress.c:1519:            cell_measure *= pSPARC->range_y;
stress.c:1520:        if(pSPARC->BCz == 0)
stress.c:1521:            cell_measure *= pSPARC->range_z;
stress.c:1524:            pSPARC->stress_nl[i] /= cell_measure;
stress.c:1525:            pSPARC->stress_k[i] /= cell_measure;
stress.c:1533:        PrintStress(pSPARC, pSPARC->stress_nl, NULL);
stress.c:1535:        PrintStress(pSPARC, pSPARC->stress_k, NULL);  
stress.c:1539:    if (pSPARC->SQ3Flag == 1) free(alpha2);
stress.c:1555:    if (pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0 || pSPARC->bandcomm_index < 0 || pSPARC->dmcomm == MPI_COMM_NULL) return;
stress.c:1560:    ncol = pSPARC->Nband_bandcomm; // number of bands assigned
stress.c:1561:    Ns = pSPARC->Nstates;
stress.c:1562:    DMnd = pSPARC->Nd_d_dmcomm;
stress.c:1563:    Nk = pSPARC->Nkpts_kptcomm;
stress.c:1564:    nspin = pSPARC->Nspin_spincomm;
stress.c:1567:    DMnx = pSPARC->Nx_d_dmcomm;
stress.c:1568:    DMny = pSPARC->Ny_d_dmcomm;
stress.c:1589:    alpha = (double complex *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * 10, sizeof(double complex));
stress.c:1590:    double Lx = pSPARC->range_x;
stress.c:1591:    double Ly = pSPARC->range_y;
stress.c:1592:    double Lz = pSPARC->range_z;
stress.c:1602:            k1 = pSPARC->k1_loc[kpt];
stress.c:1603:            k2 = pSPARC->k2_loc[kpt];
stress.c:1604:            k3 = pSPARC->k3_loc[kpt];
stress.c:1605:            beta = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * count;
stress.c:1606:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
stress.c:1607:                if (!pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
stress.c:1608:                for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
stress.c:1609:                    R1 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3  ];
stress.c:1610:                    R2 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
stress.c:1611:                    R3 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
stress.c:1614:                    a = bloch_fac * pSPARC->dV;
stress.c:1617:                    ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
stress.c:1619:                    atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
stress.c:1623:                        psi_ptr = pSPARC->Xorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd;
stress.c:1626:                            *(psi_rc_ptr + i) = conj(*(psi_ptr + pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i]));
stress.c:1629:                    cblas_zgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, &a, pSPARC->nlocProj[ityp].Chi_c[iat], ndc, 
stress.c:1630:                                psi_rc, ndc, &b, beta+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj); // multiplied dV to get inner-product
stress.c:1641:        for(kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++) {
stress.c:1642:            k1 = pSPARC->k1_loc[kpt];
stress.c:1643:            k2 = pSPARC->k2_loc[kpt];
stress.c:1644:            k3 = pSPARC->k3_loc[kpt];
stress.c:1648:                Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, 
stress.c:1649:                    ncol, 0.0, pSPARC->Xorb_kpt+spn_i*size_s+kpt*size_k, 
stress.c:1650:                    pSPARC->Yorb_kpt+spn_i*size_s+kpt*size_k, dim, &kpt_vec, pSPARC->dmcomm);
stress.c:1652:                beta1 = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (Nk * nspin * (3*dim + 1) + count);
stress.c:1653:                beta2 = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (Nk * nspin * (3*dim + 2) + count);
stress.c:1654:                beta3 = alpha + pSPARC->IP_displ[pSPARC->n_atom] * ncol * (Nk * nspin * (3*dim + 3) + count);
stress.c:1656:                for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
stress.c:1657:                    if (! pSPARC->nlocProj[ityp].nproj) continue; // this is typical for hydrogen
stress.c:1658:                    for (iat = 0; iat < pSPARC->Atom_Influence_nloc[ityp].n_atom; iat++) {
stress.c:1659:                        R1 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3];
stress.c:1660:                        R2 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+1];
stress.c:1661:                        R3 = pSPARC->Atom_Influence_nloc[ityp].coords[iat*3+2];
stress.c:1665:                        ndc = pSPARC->Atom_Influence_nloc[ityp].ndc[iat];
stress.c:1669:                        atom_index = pSPARC->Atom_Influence_nloc[ityp].atom_index[iat];
stress.c:1671:                            dpsi_ptr = pSPARC->Yorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd;
stress.c:1676:                                indx = pSPARC->Atom_Influence_nloc[ityp].grid_pos[iat][i];
stress.c:1680:                                x1_R1 = (i_DM + pSPARC->DMVertices_dmcomm[0]) * pSPARC->delta_x - R1;
stress.c:1681:                                x2_R2 = (j_DM + pSPARC->DMVertices_dmcomm[2]) * pSPARC->delta_y - R2;
stress.c:1682:                                x3_R3 = (k_DM + pSPARC->DMVertices_dmcomm[4]) * pSPARC->delta_z - R3;
stress.c:1694:                        cblas_zgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, &bloch_fac, pSPARC->nlocProj[ityp].Chi_c[iat], ndc, 
stress.c:1695:                                    dpsi_x1_rc, ndc, &b, beta1+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj);
stress.c:1696:                        cblas_zgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, &bloch_fac, pSPARC->nlocProj[ityp].Chi_c[iat], ndc, 
stress.c:1697:                                    dpsi_x2_rc, ndc, &b, beta2+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj);
stress.c:1698:                        cblas_zgemm(CblasColMajor, CblasTrans, CblasNoTrans, pSPARC->nlocProj[ityp].nproj, ncol, ndc, &bloch_fac, pSPARC->nlocProj[ityp].Chi_c[iat], ndc, 
stress.c:1699:                                    dpsi_x3_rc, ndc, &b, beta3+pSPARC->IP_displ[atom_index]*ncol, pSPARC->nlocProj[ityp].nproj);                        
stress.c:1706:                    Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, 
stress.c:1707:                        ncol, 0.0, pSPARC->Xorb_kpt+spn_i*size_s+kpt*size_k, 
stress.c:1708:                        dpsi_full+spn_i*size_s+kpt*size_k, 1, &kpt_vec, pSPARC->dmcomm);
stress.c:1712:                        dpsi_ptr = pSPARC->Yorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd; // dpsi_1
stress.c:1720:                        g_nk = pSPARC->occ[spn_i*Nk*Ns + kpt*Ns + n + pSPARC->band_start_indx];
stress.c:1725:                    stress_k[0] -= (2.0/pSPARC->Nspin) * pSPARC->kptWts_loc[kpt] / pSPARC->Nkpts * temp_k[0];
stress.c:1726:                    stress_k[1] -= (2.0/pSPARC->Nspin) * pSPARC->kptWts_loc[kpt] / pSPARC->Nkpts * temp_k[1];
stress.c:1727:                    stress_k[3] -= (2.0/pSPARC->Nspin) * pSPARC->kptWts_loc[kpt] / pSPARC->Nkpts * temp_k[3];
stress.c:1730:                    Gradient_vectors_dir_kpt(pSPARC, DMnd, pSPARC->DMVertices_dmcomm, 
stress.c:1731:                        ncol, 0.0, pSPARC->Xorb_kpt+spn_i*size_s+kpt*size_k, 
stress.c:1732:                        dpsi_full+spn_i*size_s+kpt*size_k, 2, &kpt_vec, pSPARC->dmcomm);
stress.c:1735:                        dpsi_ptr = pSPARC->Yorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd; // dpsi_1
stress.c:1742:                        g_nk = pSPARC->occ[spn_i*Nk*Ns + kpt*Ns + n + pSPARC->band_start_indx];
stress.c:1746:                    stress_k[2] -= (2.0/pSPARC->Nspin) * pSPARC->kptWts_loc[kpt] / pSPARC->Nkpts * temp_k[2];
stress.c:1747:                    stress_k[5] -= (2.0/pSPARC->Nspin) * pSPARC->kptWts_loc[kpt] / pSPARC->Nkpts * temp_k[5];
stress.c:1751:                        dpsi_ptr = pSPARC->Yorb_kpt + spn_i * size_s + kpt * size_k + n * DMnd; // dpsi_2
stress.c:1757:                        temp_k[4] += dpsi2_dpsi3 * pSPARC->occ[spn_i*Nk*Ns + kpt*Ns + n + pSPARC->band_start_indx];
stress.c:1759:                    stress_k[4] -= (2.0/pSPARC->Nspin) * pSPARC->kptWts_loc[kpt] / pSPARC->Nkpts * temp_k[4];
stress.c:1768:    if (pSPARC->npNd > 1) {
stress.c:1769:        MPI_Allreduce(MPI_IN_PLACE, alpha, pSPARC->IP_displ[pSPARC->n_atom] * ncol * Nk * nspin * 10, MPI_DOUBLE_COMPLEX, MPI_SUM, pSPARC->dmcomm);
stress.c:1770:        MPI_Allreduce(MPI_IN_PLACE, stress_k, 6, MPI_DOUBLE, MPI_SUM, pSPARC->dmcomm);
stress.c:1775:    beta1_x1 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin;
stress.c:1776:    beta1_x2 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 2;
stress.c:1777:    beta1_x3 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 3;
stress.c:1778:    beta2_x1 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 4;
stress.c:1779:    beta2_x2 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 5;
stress.c:1780:    beta2_x3 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 6;
stress.c:1781:    beta3_x1 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 7;
stress.c:1782:    beta3_x2 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 8;
stress.c:1783:    beta3_x3 = alpha + pSPARC->IP_displ[pSPARC->n_atom]*ncol*Nk*nspin * 9;
stress.c:1789:            for (ityp = 0; ityp < pSPARC->Ntypes; ityp++) {
stress.c:1790:                lmax = pSPARC->psd[ityp].lmax;
stress.c:1791:                for (iat = 0; iat < pSPARC->nAtomv[ityp]; iat++) {
stress.c:1793:                    for (n = pSPARC->band_start_indx; n <= pSPARC->band_end_indx; n++) {
stress.c:1794:                        g_nk = pSPARC->occ[spn_i*Nk*Ns+k*Ns+n];
stress.c:1799:                            if (l == pSPARC->localPsd[ityp]) {
stress.c:1800:                                ldispl += pSPARC->psd[ityp].ppl[l];
stress.c:1803:                            for (np = 0; np < pSPARC->psd[ityp].ppl[l]; np++) {
stress.c:1819:                                gamma_jl = pSPARC->psd[ityp].Gamma[ldispl+np];
stress.c:1824:                            ldispl += pSPARC->psd[ityp].ppl[l];
stress.c:1831:                    kptwt = pSPARC->kptWts_loc[k] / pSPARC->Nkpts;
stress.c:1841:        stress_nl[i] *= (2.0/pSPARC->Nspin) * 2.0;
stress.c:1843:    energy_nl *= (2.0/pSPARC->Nspin)/pSPARC->dV;   
stress.c:1846:    if(pSPARC->cell_typ == 0){
stress.c:1847:        pSPARC->stress_nl[0] = stress_nl[0] + energy_nl;
stress.c:1848:        pSPARC->stress_nl[1] = stress_nl[1];
stress.c:1849:        pSPARC->stress_nl[2] = stress_nl[2];
stress.c:1850:        pSPARC->stress_nl[3] = stress_nl[4] + energy_nl;
stress.c:1851:        pSPARC->stress_nl[4] = stress_nl[5];
stress.c:1852:        pSPARC->stress_nl[5] = stress_nl[8] + energy_nl;
stress.c:1854:            pSPARC->stress_k[i] = stress_k[i];
stress.c:1861:                c_g[3*i+j] = pSPARC->gradT[3*j+i];
stress.c:1862:                c_c[3*i+j] = pSPARC->LatUVec[3*j+i];
stress.c:1865:        pSPARC->stress_nl[0] = c_g[0] * (c_c[0] * stress_nl[0] + c_c[1] * stress_nl[1] + c_c[2] * stress_nl[2]) +
stress.c:1868:        pSPARC->stress_nl[1] = c_g[0] * (c_c[3] * stress_nl[0] + c_c[4] * stress_nl[1] + c_c[5] * stress_nl[2]) +
stress.c:1871:        pSPARC->stress_nl[2] = c_g[0] * (c_c[6] * stress_nl[0] + c_c[7] * stress_nl[1] + c_c[8] * stress_nl[2]) +
stress.c:1874:        pSPARC->stress_nl[3] = c_g[3] * (c_c[3] * stress_nl[0] + c_c[4] * stress_nl[1] + c_c[5] * stress_nl[2]) +
stress.c:1877:        pSPARC->stress_nl[4] = c_g[3] * (c_c[6] * stress_nl[0] + c_c[7] * stress_nl[1] + c_c[8] * stress_nl[2]) +
stress.c:1880:        pSPARC->stress_nl[5] = c_g[6] * (c_c[6] * stress_nl[0] + c_c[7] * stress_nl[1] + c_c[8] * stress_nl[2]) +
stress.c:1884:        pSPARC->stress_k[0] = c_g[0] * (c_g[0] * stress_k[0] + c_g[1] * stress_k[1] + c_g[2] * stress_k[2]) +
stress.c:1887:        pSPARC->stress_k[1] = c_g[0] * (c_g[3] * stress_k[0] + c_g[4] * stress_k[1] + c_g[5] * stress_k[2]) +
stress.c:1890:        pSPARC->stress_k[2] = c_g[0] * (c_g[6] * stress_k[0] + c_g[7] * stress_k[1] + c_g[8] * stress_k[2]) +
stress.c:1893:        pSPARC->stress_k[3] = c_g[3] * (c_g[3] * stress_k[0] + c_g[4] * stress_k[1] + c_g[5] * stress_k[2]) +
stress.c:1896:        pSPARC->stress_k[4] = c_g[3] * (c_g[6] * stress_k[0] + c_g[7] * stress_k[1] + c_g[8] * stress_k[2]) +
stress.c:1899:        pSPARC->stress_k[5] = c_g[6] * (c_g[6] * stress_k[0] + c_g[7] * stress_k[1] + c_g[8] * stress_k[2]) +
stress.c:1907:    if (pSPARC->npspin > 1) {    
stress.c:1908:        if (pSPARC->spincomm_index == 0){
stress.c:1909:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
stress.c:1910:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
stress.c:1912:            MPI_Reduce(pSPARC->stress_nl, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
stress.c:1913:            MPI_Reduce(pSPARC->stress_k, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->spin_bridge_comm);
stress.c:1919:    if (pSPARC->npkpt > 1) {    
stress.c:1920:        MPI_Allreduce(MPI_IN_PLACE, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
stress.c:1921:        MPI_Allreduce(MPI_IN_PLACE, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, pSPARC->kpt_bridge_comm);
stress.c:1925:    if (pSPARC->npband > 1) {
stress.c:1926:        if (pSPARC->bandcomm_index == 0){
stress.c:1927:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
stress.c:1928:            MPI_Reduce(MPI_IN_PLACE, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
stress.c:1930:            MPI_Reduce(pSPARC->stress_nl, pSPARC->stress_nl, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
stress.c:1932:            MPI_Reduce(pSPARC->stress_k, pSPARC->stress_k, 6, MPI_DOUBLE, MPI_SUM, 0, pSPARC->blacscomm);
stress.c:1937:    if (pSPARC->ext_FPMD_Flag != 0) {
stress.c:1938:        double highE_Tk = pSPARC->ext_FPMD_highETk;
stress.c:1939:        pSPARC->stress_k[0] -= 2.0 / 3.0 * highE_Tk; // component (1,1)
stress.c:1940:        pSPARC->stress_k[3] -= 2.0 / 3.0 * highE_Tk; // component (2,2)
stress.c:1941:        pSPARC->stress_k[5] -= 2.0 / 3.0 * highE_Tk; // component (3,3)
stress.c:1946:        double cell_measure = pSPARC->Jacbdet;
stress.c:1947:        if(pSPARC->BCx == 0)
stress.c:1948:            cell_measure *= pSPARC->range_x;
stress.c:1949:        if(pSPARC->BCy == 0)
stress.c:1950:            cell_measure *= pSPARC->range_y;
stress.c:1951:        if(pSPARC->BCz == 0)
stress.c:1952:            cell_measure *= pSPARC->range_z;
stress.c:1955:            pSPARC->stress_nl[i] /= cell_measure;
stress.c:1956:            pSPARC->stress_k[i] /= cell_measure;
stress.c:1964:        PrintStress(pSPARC, pSPARC->stress_nl, NULL);
stress.c:1966:        PrintStress(pSPARC, pSPARC->stress_k, NULL);  
stress.c:1987:        if (pSPARC->BC == 2){
stress.c:1989:        } else if (pSPARC->BC == 3){
stress.c:1990:            if (pSPARC->BCx == 0 && pSPARC->BCy == 0){
stress.c:1992:                printf("Stress equiv. to all periodic (GPa): \n %.15f %.15f \n %.15f %.15f \n", stress[0]*CONST_HA_BOHR3_GPA/pSPARC->range_z, stress[1]*CONST_HA_BOHR3_GPA/pSPARC->range_z, stress[1]*CONST_HA_BOHR3_GPA/pSPARC->range_z, stress[3]*CONST_HA_BOHR3_GPA/pSPARC->range_z);
stress.c:1993:            } else if (pSPARC->BCx == 0 && pSPARC->BCz == 0){
stress.c:1995:                printf("Stress equiv. to all periodic (GPa): \n %.15f %.15f \n %.15f %.15f \n", stress[0]*CONST_HA_BOHR3_GPA/pSPARC->range_y, stress[2]*CONST_HA_BOHR3_GPA/pSPARC->range_y, stress[2]*CONST_HA_BOHR3_GPA/pSPARC->range_y, stress[5]*CONST_HA_BOHR3_GPA/pSPARC->range_y);
stress.c:1996:            } else if (pSPARC->BCy == 0 && pSPARC->BCz == 0){
stress.c:1998:                printf("Stress equiv. to all periodic (GPa): \n %.15f %.15f \n %.15f %.15f \n", stress[3]*CONST_HA_BOHR3_GPA/pSPARC->range_x, stress[4]*CONST_HA_BOHR3_GPA/pSPARC->range_x, stress[4]*CONST_HA_BOHR3_GPA/pSPARC->range_x, stress[5]*CONST_HA_BOHR3_GPA/pSPARC->range_x);
stress.c:2000:        } else if (pSPARC->BC == 4){
stress.c:2001:            if (pSPARC->BCx == 0){
stress.c:2003:                printf("Stress equiv. to all periodic (GPa): \n %.15f \n", stress[0]*CONST_HA_BOHR3_GPA/(pSPARC->range_y * pSPARC->range_z));
stress.c:2004:            } else if (pSPARC->BCy == 0){
stress.c:2006:                printf("Stress equiv. to all periodic (GPa): \n %.15f \n", stress[3]*CONST_HA_BOHR3_GPA/(pSPARC->range_x * pSPARC->range_z));
stress.c:2007:            } else if (pSPARC->BCz == 0){
stress.c:2009:                printf("Stress equiv. to all periodic (GPa): \n %.15f \n", stress[5]*CONST_HA_BOHR3_GPA/(pSPARC->range_x * pSPARC->range_y));
stress.c:2011:        } else if (pSPARC->BC >= 5 && pSPARC->BC <= 7){
stress.c:2013:            printf("Stress equiv. to all periodic (GPa): \n %.15f \n", stress[5]*CONST_HA_BOHR3_GPA/(M_PI * ( pow(pSPARC->xout,2.0) - pow(pSPARC->xin,2.0) ) ) );
stress.c:2016:        if (pSPARC->MDFlag == 0 && pSPARC->RelaxFlag == 0) {
stress.c:2017:            if (pSPARC->BC == 2){
stress.c:2019:            } else if (pSPARC->BC == 3){
stress.c:2020:                if (pSPARC->BCx == 0 && pSPARC->BCy == 0){
stress.c:2022:                    fprintf(fp, "Stress equiv. to all periodic (GPa): \n%18.10E %18.10E \n%18.10E %18.10E \n", stress[0]*CONST_HA_BOHR3_GPA/pSPARC->range_z, stress[1]*CONST_HA_BOHR3_GPA/pSPARC->range_z, stress[1]*CONST_HA_BOHR3_GPA/pSPARC->range_z, stress[3]*CONST_HA_BOHR3_GPA/pSPARC->range_z);
stress.c:2023:                } else if (pSPARC->BCx == 0 && pSPARC->BCz == 0){
stress.c:2025:                    fprintf(fp, "Stress equiv. to all periodic (GPa): \n%18.10E %18.10E \n%18.10E %18.10E \n", stress[0]*CONST_HA_BOHR3_GPA/pSPARC->range_y, stress[2]*CONST_HA_BOHR3_GPA/pSPARC->range_y, stress[2]*CONST_HA_BOHR3_GPA/pSPARC->range_y, stress[5]*CONST_HA_BOHR3_GPA/pSPARC->range_y);
stress.c:2026:                } else if (pSPARC->BCy == 0 && pSPARC->BCz == 0){
stress.c:2028:                    fprintf(fp, "Stress equiv. to all periodic (GPa): \n%18.10E %18.10E \n%18.10E %18.10E \n", stress[3]*CONST_HA_BOHR3_GPA/pSPARC->range_x, stress[4]*CONST_HA_BOHR3_GPA/pSPARC->range_x, stress[4]*CONST_HA_BOHR3_GPA/pSPARC->range_x, stress[5]*CONST_HA_BOHR3_GPA/pSPARC->range_x);
stress.c:2030:            } else if (pSPARC->BC == 4){
stress.c:2031:                if (pSPARC->BCx == 0){
stress.c:2033:                    fprintf(fp, "Stress equiv. to all periodic (GPa): \n%18.10E \n", stress[0]*CONST_HA_BOHR3_GPA/(pSPARC->range_y * pSPARC->range_z));
stress.c:2034:                } else if (pSPARC->BCy == 0){
stress.c:2036:                    fprintf(fp, "Stress equiv. to all periodic (GPa): \n%18.10E \n", stress[3]*CONST_HA_BOHR3_GPA/(pSPARC->range_x * pSPARC->range_z));
stress.c:2037:                } else if (pSPARC->BCz == 0){
stress.c:2039:                    fprintf(fp, "Stress equiv. to all periodic (GPa): \n%18.10E \n", stress[5]*CONST_HA_BOHR3_GPA/(pSPARC->range_x * pSPARC->range_y));
stress.c:2041:            } else if (pSPARC->BC >= 5 && pSPARC->BC <= 7){
stress.c:2043:                fprintf(fp, "Stress equiv. to all periodic (GPa): \n%18.10E \n", stress[5]*CONST_HA_BOHR3_GPA/(M_PI * ( pow(pSPARC->xout,2.0) - pow(pSPARC->xin,2.0) ) ) );
stress.c:2046:            if (pSPARC->BC == 2){
stress.c:2048:            } else if (pSPARC->BC == 3){
stress.c:2049:                if (pSPARC->BCx == 0 && pSPARC->BCy == 0){
stress.c:2051:                } else if (pSPARC->BCx == 0 && pSPARC->BCz == 0){
stress.c:2053:                } else if (pSPARC->BCy == 0 && pSPARC->BCz == 0){
stress.c:2056:            } else if (pSPARC->BC == 4){
stress.c:2057:                if (pSPARC->BCx == 0){
stress.c:2059:                } else if (pSPARC->BCy == 0){
stress.c:2061:                } else if (pSPARC->BCz == 0){
stress.c:2064:            } else if (pSPARC->BC >= 5 && pSPARC->BC <= 7){
tools.c:1973:    if(pSPARC->cell_typ == 0){
tools.c:1975:            z = k * pSPARC->delta_z - z0_i_shift; 
tools.c:1977:                y = j * pSPARC->delta_y - y0_i_shift;
tools.c:1979:                    x = i * pSPARC->delta_x - x0_i_shift;
tools.c:1988:            z = k * pSPARC->delta_z - z0_i_shift; 
tools.c:1990:                y = j * pSPARC->delta_y - y0_i_shift;
tools.c:1992:                    x = i * pSPARC->delta_x - x0_i_shift;
tools.c:1993:                    R[count] = sqrt(pSPARC->metricT[0] * (x*x) + pSPARC->metricT[1] * (x*y) + pSPARC->metricT[2] * (x*z) 
tools.c:1994:                                   + pSPARC->metricT[4] * (y*y) + pSPARC->metricT[5] * (y*z) + pSPARC->metricT[8] * (z*z) );     
tools.c:2602:    if(pSPARC->spincomm_index < 0 || pSPARC->kptcomm_index < 0) return;
tools.c:2604:    MPI_Comm_rank(pSPARC->spincomm, &rank_spincomm);
tools.c:2605:    MPI_Comm_rank(pSPARC->bandcomm, &rank_bandcomm);
tools.c:2611:    int Nk = pSPARC->Nkpts_kptcomm;
tools.c:2612:    int Ns = pSPARC->Nstates;
tools.c:2614:    for(spn_i = 0; spn_i < pSPARC->Nspin_spincomm; spn_i++) {
tools.c:2617:        if(pSPARC->Nspin == 1) {
tools.c:2618:            ns_max = ceil(pSPARC->Nelectron/2) - 1;
tools.c:2619:            ns_min = ceil(pSPARC->Nelectron/2);
tools.c:2621:            if (spn_i + pSPARC->spincomm_index == 0) {
tools.c:2622:                ns_max = ceil(pSPARC->Nelectron_up) - 1;
tools.c:2623:                ns_min = ceil(pSPARC->Nelectron_up);
tools.c:2624:            } else if(spn_i + pSPARC->spincomm_index == 1) {
tools.c:2625:                ns_max = ceil(pSPARC->Nelectron_dn) - 1;
tools.c:2626:                ns_min = ceil(pSPARC->Nelectron_dn);
tools.c:2630:        eigmin_g = pSPARC->lambda_sorted[ns_min];
tools.c:2631:        eigmax_g = pSPARC->lambda_sorted[ns_max];
tools.c:2637:        for(kpt = 0; kpt < pSPARC->Nkpts_kptcomm; kpt++){
tools.c:2638:            kpt_disp = spn_disp + kpt*pSPARC->Nstates;
tools.c:2639:            if(pSPARC->lambda_sorted[kpt_disp + ns_min] < eigmin_g){
tools.c:2640:                eigmin_g = pSPARC->lambda_sorted[kpt_disp + ns_min];
tools.c:2643:            if(pSPARC->lambda_sorted[kpt_disp + ns_max] > eigmax_g){
tools.c:2644:                eigmax_g = pSPARC->lambda_sorted[kpt_disp + ns_max];
tools.c:2652:        //if (pSPARC->npspin != 1) { // find min/max over processes with the same rank in spincomm
tools.c:2653:        //    MPI_Allreduce(MPI_IN_PLACE, &eigmin_g, 1, MPI_DOUBLE, MPI_MIN, pSPARC->spin_bridge_comm);
tools.c:2654:        //    MPI_Allreduce(MPI_IN_PLACE, &eigmax_g, 1, MPI_DOUBLE, MPI_MAX, pSPARC->spin_bridge_comm);
tools.c:2657:        if (pSPARC->npkpt != 1) { // find min/max over processes with the same rank in kptcomm to find g
tools.c:2658:            MPI_Allreduce(MPI_IN_PLACE, &eigmin_g, 1, MPI_DOUBLE, MPI_MIN, pSPARC->kpt_bridge_comm);
tools.c:2659:            MPI_Allreduce(MPI_IN_PLACE, &eigmax_g, 1, MPI_DOUBLE, MPI_MAX, pSPARC->kpt_bridge_comm);
tools.c:2663:        double tpiblx = 2 * M_PI / pSPARC->range_x;
tools.c:2664:        double tpibly = 2 * M_PI / pSPARC->range_y;
tools.c:2665:        double tpiblz = 2 * M_PI / pSPARC->range_z;
tools.c:2668:        if(eigmax_loc == eigmax_g && pSPARC->bandcomm_index == 0 && rank_bandcomm == 0) {
tools.c:2669:            printf("Maximum occupied eigenvalue is %.15f which occurs at kpt [%f %f %f] \n",eigmax_g, pSPARC->k1_loc[indx_max]/tpiblx, pSPARC->k2_loc[indx_max]/tpibly,pSPARC->k3_loc[indx_max]/tpiblz);
tools.c:2672:        if(eigmin_loc == eigmin_g && pSPARC->bandcomm_index == 0 && rank_bandcomm == 0) {
tools.c:2673:            printf("Minimum unoccupied eigenvalue is %.15f which occurs at kpt [%f %f %f] \n",eigmin_g, pSPARC->k1_loc[indx_min]/tpiblx, pSPARC->k2_loc[indx_min]/tpibly,pSPARC->k3_loc[indx_min]/tpiblz);
tools.c:2677:            if(pSPARC->Nspin == 1)
tools.c:2680:                printf("Band gap for spin typ %d: %.15f\n", spn_i + pSPARC->spincomm_index, eigmin_g - eigmax_g); 
